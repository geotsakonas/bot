// Generated by dart2js, the Dart to JavaScript compiler version: 1.0.2.1_r30821.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i0 = [H, {
  "": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.BoundClosure$1 = [H, {
  "": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this._target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {
  "": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.BoundClosure$i1 = [P, {
  "": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this._target.call(this._self, this._receiver, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$2 = [P, {
  "": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this._target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.BoundClosure$20 = [P, {
  "": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this._target.call(this._self, p0, p1);
  },
  $is_args2: true
}];

$$.BoundClosure$4 = [O, {
  "": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$4: function(p0, p1, p2, p3) {
    return this._target.call(this._self, p0, p1, p2, p3);
  }
}];

$$.BoundClosure$i2 = [N, {
  "": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this._target.call(this._self, this._receiver, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.Closure$2 = [H, {
  "": "Closure;call$2,$name",
  $is_args2: true
}];

$$.Closure$1 = [H, {
  "": "Closure;call$1,$name",
  $is_args1: true
}];

$$.Closure$0 = [H, {
  "": "Closure;call$0,$name",
  $is_void_: true
}];

$$.Closure$7 = [H, {
  "": "Closure;call$7,$name"
}];

$$.Closure$21 = [P, {
  "": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.Closure$4 = [W, {
  "": "Closure;call$4,$name"
}];

$$.Closure$5 = [O, {
  "": "Closure;call$5,$name"
}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
  JS_CONST: {
    "": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null)
      return C.UnknownJavaScriptObject_methods;
    return interceptor;
  },
  Interceptor: {
    "": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    noSuchMethod$1: function(receiver, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    },
    get$runtimeType: function(receiver) {
      return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
    },
    $isInterceptor: true,
    "%": "DOMImplementation|MediaError|MediaKeyError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
  },
  JSBool: {
    "": "bool/Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_EsU;
    },
    $isbool: true
  },
  JSNull: {
    "": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_eZO;
    }
  },
  JavaScriptObject: {
    "": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    },
    get$runtimeType: function(_) {
      return C.Type_XXD;
    }
  },
  PlainJavaScriptObject: {
    "": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "": "JavaScriptObject;"
  },
  JSArray: {
    "": "List/Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      receiver.splice(index, 0, value);
    },
    removeLast$0: function(receiver) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw H.wrapException(P.RangeError$value(-1));
      return receiver.pop();
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0() === true;)
        this.add$1(receiver, t1.get$current());
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    map$1: function(receiver, f) {
      var t1 = new H.MappedListIterable(receiver, f);
      H.setRuntimeTypeInfo(t1, [null, null]);
      return t1;
    },
    join$1: function(receiver, separator) {
      var t1, list, i, t2;
      t1 = receiver.length;
      list = Array(t1);
      list.fixed$length = init;
      for (i = 0; i < receiver.length; ++i) {
        t2 = H.S(receiver[i]);
        if (i >= t1)
          return H.ioore(list, i);
        list[i] = t2;
      }
      return list.join(separator);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    reduce$1: function(receiver, combine) {
      return H.IterableMixinWorkaround_reduce(receiver, combine);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end == null)
        end = receiver.length;
      else {
        if (typeof end !== "number" || Math.floor(end) !== end)
          throw H.wrapException(new P.ArgumentError(end));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      }
      if (start === end) {
        t1 = [];
        H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(receiver, 0)]);
        return t1;
      }
      t1 = receiver.slice(start, end);
      H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(receiver, 0)]);
      return t1;
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    getRange$2: function(receiver, start, end) {
      H.IterableMixinWorkaround__rangeCheck(receiver, start, end);
      return H.SubListIterable$(receiver, start, end, null);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    sort$1: function(receiver, compare) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.Sort__doSort(receiver, 0, receiver.length - 1, compare);
    },
    indexOf$2: function(receiver, element, start) {
      return H.Arrays_indexOf(receiver, element, start, receiver.length);
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable) {
        t1 = receiver.slice();
        H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(receiver, 0)]);
        return t1;
      } else {
        t1 = receiver.slice();
        H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      var t1 = new H.ListIterator(receiver, receiver.length, 0, null);
      H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(receiver, 0)]);
      return t1;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isList: true,
    $asList: null,
    $asIterable: null,
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
        t1 = new Array($length);
        H.setRuntimeTypeInfo(t1, [$E]);
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSMutableArray: {
    "": "JSArray;",
    $isJSMutableArray: true,
    $asJSArray: null,
    $asList: null,
    $asIterable: null
  },
  JSFixedArray: {
    "": "JSMutableArray;",
    $asJSMutableArray: null,
    $asJSArray: null,
    $asList: null,
    $asIterable: null
  },
  JSExtendableArray: {
    "": "JSMutableArray;",
    $isJSExtendableArray: true,
    $asJSMutableArray: null,
    $asJSArray: null,
    $asList: null,
    $asIterable: null
  },
  JSNumber: {
    "": "num/Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(new P.ArgumentError(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    get$isInfinite: function(receiver) {
      return receiver == Infinity || receiver == -Infinity;
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    round$0: function(receiver) {
      return this.toInt$0(this.roundToDouble$0(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    toRadixString$1: function(receiver, radix) {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else {
        if (typeof other !== "number")
          H.throwExpression(new P.ArgumentError(other));
        return this.toInt$0(receiver / other);
      }
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(new P.ArgumentError(other));
      if (other > 31)
        return 0;
      return receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0) {
        if (other > 31)
          return 0;
        return receiver >>> other;
      }
      if (other > 31)
        other = 31;
      return receiver >> other >>> 0;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return (receiver & other) >>> 0;
    },
    $xor: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "": "int/JSNumber;",
    get$runtimeType: function(receiver) {
      return C.Type_SnA;
    },
    $isdouble: true,
    $isnum: true,
    $isint: true
  },
  JSDouble: {
    "": "double/JSNumber;",
    get$runtimeType: function(receiver) {
      return C.Type_qq1;
    },
    $isdouble: true,
    $isnum: true
  },
  JSPositiveInt: {
    "": "JSInt;"
  },
  JSUInt32: {
    "": "JSPositiveInt;"
  },
  JSUInt31: {
    "": "JSUInt32;"
  },
  JSString: {
    "": "String/Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    allMatches$1: function(receiver, str) {
      if (typeof str !== "string")
        H.throwExpression(new P.ArgumentError(str));
      return H.allMatchesInStringUnchecked(receiver, str);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, t2, i, t3;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (t3 < 0)
          H.throwExpression(P.RangeError$value(t3));
        if (t3 >= t2)
          H.throwExpression(P.RangeError$value(t3));
        t3 = string.charCodeAt(t3);
        if (i >= t1)
          H.throwExpression(P.RangeError$value(i));
        if (t3 !== receiver.charCodeAt(i))
          return;
      }
      return new H.StringMatch(start, string, receiver);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceAll$2: function(receiver, from, to) {
      return H.stringReplaceAllUnchecked(receiver, from, to);
    },
    replaceFirst$2: function(receiver, from, to) {
      return H.stringReplaceFirstUnchecked(receiver, from, to);
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      if (typeof pattern === "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      var t1;
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(P.ArgumentError$(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$lt(startIndex, 0))
        throw H.wrapException(P.RangeError$value(startIndex));
      if (t1.$gt(startIndex, endIndex))
        throw H.wrapException(P.RangeError$value(startIndex));
      if (J.$gt$n(endIndex, receiver.length))
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    toUpperCase$0: function(receiver) {
      return receiver.toUpperCase();
    },
    trim$0: function(receiver) {
      var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
      for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
        if (startIndex >= endIndex)
          H.throwExpression(P.RangeError$value(startIndex));
        codeUnit = receiver.charCodeAt(startIndex);
        if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
          ++startIndex;
        else
          break;
      }
      if (startIndex === endIndex)
        return "";
      for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
        endIndex1 = endIndex0 - 1;
        if (endIndex1 < 0)
          H.throwExpression(P.RangeError$value(endIndex1));
        if (endIndex1 >= endIndex)
          H.throwExpression(P.RangeError$value(endIndex1));
        codeUnit = receiver.charCodeAt(endIndex1);
        if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
          ;
        else
          break;
      }
      if (startIndex === 0 && endIndex0 === endIndex)
        return receiver;
      return receiver.substring(startIndex, endIndex0);
    },
    indexOf$2: function(receiver, pattern, start) {
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(new P.ArgumentError(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      return receiver.indexOf(pattern, start);
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    contains$2: function(receiver, other, startIndex) {
      if (other == null)
        H.throwExpression(new P.ArgumentError(null));
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$runtimeType: function(receiver) {
      return C.Type_Ejg;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }}
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  startRootIsolate: function(entry) {
    var t1, rootContext;
    t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t1._Manager$1(entry);
    init.globalState = t1;
    if (init.globalState.isWorker === true)
      return;
    rootContext = H._IsolateContext$();
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    if (!!entry.$is_args1)
      rootContext.eval$1(new H.startRootIsolate_closure(entry));
    else if (!!entry.$is_args2)
      rootContext.eval$1(new H.startRootIsolate_closure0(entry));
    else
      rootContext.eval$1(entry);
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptD8();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    return;
  },
  IsolateNatives_computeThisScriptD8: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2, uri, t3, t4, t5, worker, t6, workerId;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName];
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        context = H._IsolateContext$();
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        t2 = t1.$index(msg, "functionName");
        uri = t1.$index(msg, "uri");
        t3 = t1.$index(msg, "args");
        t4 = t1.$index(msg, "msg");
        t5 = t1.$index(msg, "isSpawnUri");
        t1 = t1.$index(msg, "replyPort");
        if (uri == null)
          uri = $.get$IsolateNatives_thisScript();
        worker = new Worker(uri);
        worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
        t6 = init.globalState;
        workerId = t6.nextManagerId;
        t6.nextManagerId = workerId + 1;
        t6 = $.get$IsolateNatives_workerIds();
        t6.$indexSet(t6, worker, workerId);
        t6 = init.globalState.managers;
        t6.$indexSet(t6, workerId, worker);
        worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(t1), "args", t3, "msg", H._serializeMessage(t4), "isSpawnUri", t5, "functionName", t2], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        t1 = init.globalState.managers;
        t2 = $.get$IsolateNatives_workerIds();
        t1.remove$1(t1, t2.$index(t2, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
      default:
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  _waitForPendingPorts: function(message, callback) {
    var finder = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
    finder._PendingSendPortFinder$0();
    finder.traverse$1(message);
    P.Future_wait(finder.ports, false).then$1(new H._waitForPendingPorts_closure(callback));
  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "": "Closure;entry_0",
    call$0: function() {
      this.entry_0.call$1([]);
    },
    $isFunction: true,
    $is_void_: true
  },
  startRootIsolate_closure0: {
    "": "Closure;entry_1",
    call$0: function() {
      this.entry_1.call$2([], null);
    },
    $isFunction: true,
    $is_void_: true
  },
  _Manager: {
    "": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = new P.ListQueue(null, 0, 0, 0);
      H.setRuntimeTypeInfo(t3, [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(t1, e); };
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function (object) {};
      }
    }
  },
  _IsolateContext: {
    "": "Object;id>,ports,isolateStatics<",
    eval$1: function(code) {
      var old, result;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      try {
        result = code.call$0();
      } finally {
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
      }
      return result;
    },
    lookup$1: function(portId) {
      var t1 = this.ports;
      return t1.$index(t1, portId);
    },
    register$2: function(_, portId, port) {
      var t1;
      if (this.ports.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1 = this.ports;
      t1.$indexSet(t1, portId, port);
      t1 = init.globalState.isolates;
      t1.$indexSet(t1, this.id, this);
    },
    _IsolateContext$0: function() {
      var t1, t2;
      t1 = init.globalState;
      t2 = t1.nextIsolateId;
      t1.nextIsolateId = t2 + 1;
      this.id = t2;
      this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
      this.isolateStatics = new Isolate();
    },
    $is_IsolateContext: true,
    static: {_IsolateContext$: function() {
        var t1 = new H._IsolateContext(null, null, null);
        t1._IsolateContext$0();
        return t1;
      }}
  },
  _EventLoop: {
    "": "Object;events,activeTimerCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "": "Closure;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    },
    $isFunction: true,
    $is_void_: true
  },
  _IsolateEvent: {
    "": "Object;isolate,fn,message>",
    process$0: function() {
      this.isolate.eval$1(this.fn);
    },
    $is_IsolateEvent: true
  },
  _MainManagerStub: {
    "": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
    call$0: function() {
      var t1, t2, t3, t4;
      t1 = this.entryPoint_0;
      t2 = this.args_1;
      t3 = this.message_2;
      t4 = init.globalState.currentContext.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t4);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t4);
      t4 = P.ReceivePort_ReceivePort();
      $.lazyPort = t4;
      J.send$1$x(this.replyTo_4, ["spawned", new H._NativeJsSendPort(t4._rawPort, init.globalState.currentContext.id)]);
      if (this.isSpawnUri_3 !== true)
        t1.call$1(t3);
      else {
        t4 = J.getInterceptor(t1);
        if (!!t4.$is_args2)
          t1.call$2(t2, t3);
        else if (!!t4.$is_args1)
          t1.call$1(t2);
        else
          t1.call$0();
      }
    },
    $isFunction: true,
    $is_void_: true
  },
  _BaseSendPort: {
    "": "Object;",
    $isSendPort: true
  },
  _NativeJsSendPort: {
    "": "_BaseSendPort;__isolate_helper$_receivePort,_isolateId",
    send$1: function(_, message) {
      H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this.__isolate_helper$_receivePort, other.__isolate_helper$_receivePort);
    },
    get$hashCode: function(_) {
      return this.__isolate_helper$_receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true
  },
  _NativeJsSendPort_send_closure: {
    "": "Closure;this_1,message_2",
    call$0: function() {
      var t1, t2, t3, t4, isolate, shouldSerialize, msg;
      t1 = {};
      t2 = init.globalState.isolates;
      t3 = this.this_1;
      t4 = t3._isolateId;
      isolate = t2.$index(t2, t4);
      if (isolate == null)
        return;
      if (t3.__isolate_helper$_receivePort.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t4;
      msg = this.message_2;
      t1.msg_0 = msg;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(msg);
      t2 = init.globalState.topEventLoop;
      t4 = "receive " + H.S(msg);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
    },
    $isFunction: true,
    $is_void_: true
  },
  _NativeJsSendPort_send__closure: {
    "": "Closure;box_0,this_3,shouldSerialize_4",
    call$0: function() {
      var t1, t2;
      t1 = this.this_3.__isolate_helper$_receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_4) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    },
    $isFunction: true,
    $is_void_: true
  },
  _WorkerSendPort: {
    "": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.$shl$n(this._workerId, 16);
      t2 = J.$shl$n(this._isolateId, 8);
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 ^ t2 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true
  },
  _WorkerSendPort_send_closure: {
    "": "Closure;this_0,message_1",
    call$0: function() {
      var t1, workerMessage, t2, manager;
      t1 = this.this_0;
      workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        t2 = init.globalState.managers;
        manager = t2.$index(t2, t1._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $isFunction: true,
    $is_void_: true
  },
  RawReceivePortImpl: {
    "": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    close$0: function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = t1.ports;
      t2.remove$1(t2, this._id);
      if (t1.ports._collection$_length === 0) {
        t2 = init.globalState.isolates;
        t2.remove$1(t2, t1.id);
      }
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    $isRawReceivePortImpl: true,
    static: {"": "RawReceivePortImpl__nextFreeId"}
  },
  ReceivePortImpl: {
    "": "Stream;_rawPort,_controller",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      t1.toString;
      t1 = new P._ControllerStream(t1);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    close$0: function(_) {
      var t1 = this._rawPort;
      t1.close$0(t1);
      t1 = this._controller;
      t1.close$0(t1);
    },
    get$close: function(_receiver) {
      return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
    },
    ReceivePortImpl$fromRawReceivePort$1: function(_rawPort) {
      var t1 = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
      this._controller = t1;
      this._rawPort._handler = t1.get$add(t1);
    },
    $asStream: function() {
      return [null];
    },
    $isStream: true
  },
  _waitForPendingPorts_closure: {
    "": "Closure;callback_0",
    call$1: function(_) {
      return this.callback_0.call$0();
    },
    $isFunction: true,
    $is_args1: true
  },
  _PendingSendPortFinder: {
    "": "_MessageTraverser;ports,_visited",
    visitPrimitive$1: function(x) {
    },
    visitList$1: function(list) {
      var t1 = this._visited;
      if (t1.$index(t1, list) != null)
        return;
      t1 = this._visited;
      t1.$indexSet(t1, list, true);
      J.forEach$1$ax(list, this.get$_dispatch());
    },
    visitMap$1: function(map) {
      var t1 = this._visited;
      if (t1.$index(t1, map) != null)
        return;
      t1 = this._visited;
      t1.$indexSet(t1, map, true);
      J.forEach$1$ax(map.get$values(map), this.get$_dispatch());
    },
    visitSendPort$1: function(port) {
    },
    _PendingSendPortFinder$0: function() {
      this._visited = new H._JsVisitedMap(null);
    }
  },
  _JsSerializer: {
    "": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x.__isolate_helper$_receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + H.S(x));
    }
  },
  _JsCopier: {
    "": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x.__isolate_helper$_receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + H.S(x));
    }
  },
  _JsDeserializer: {
    "": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        t1 = init.globalState.isolates;
        isolate = t1.$index(t1, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    }
  },
  _JsVisitedMap: {
    "": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = P.List_List(null, null);
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
      return;
    }
  },
  _MessageTraverser: {
    "": "Object;",
    traverse$1: function(x) {
      var result, t1;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      t1 = this._visited;
      t1.reset$0(t1);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
        return this.visitList$1(x);
      if (typeof x === "object" && x !== null && !!t1.$isMap)
        return this.visitMap$1(x);
      if (typeof x === "object" && x !== null && !!t1.$isSendPort)
        return this.visitSendPort$1(x);
      return this.visitObject$1(x);
    },
    get$_dispatch: function() {
      return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var t1, copy, len, t2, i;
      t1 = this._visited;
      copy = t1.$index(t1, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      t2 = this._visited;
      t2.$indexSet(t2, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, t2, copy;
      t1 = {};
      t2 = this._visited;
      copy = t2.$index(t2, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      t2 = this._visited;
      t2.$indexSet(t2, map, copy);
      map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    }
  },
  _Copier_visitMap_closure: {
    "": "Closure;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    },
    $isFunction: true,
    $is_args2: true
  },
  _Serializer: {
    "": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var t1, copyId, id;
      t1 = this._visited;
      copyId = t1.$index(t1, list);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      t1 = this._visited;
      t1.$indexSet(t1, list, id);
      return ["list", id, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var t1, copyId, id;
      t1 = this._visited;
      copyId = t1.$index(t1, map);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      t1 = this._visited;
      t1.$indexSet(t1, map, id);
      return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = P.List_List(null, null);
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    }
  },
  _Deserializer: {
    "": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          t1 = this._deserialized;
          return t1.$index(t1, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      t1 = this._deserialized;
      t1.$indexSet(t1, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, t2, keys, values, len, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      t2 = this._deserialized;
      t2.$indexSet(t2, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "": "Object;_once,_inEventLoop,_handle",
    cancel$0: function() {
      var t1, t2, t3;
      t1 = $.get$globalThis();
      if (t1.setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        t2 = this._handle;
        if (t2 == null)
          return;
        t3 = init.globalState.topEventLoop;
        t3.activeTimerCount = t3.activeTimerCount - 1;
        if (this._once)
          t1.clearTimeout(t2);
        else
          t1.clearInterval(t2);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          t2 = init.globalState.topEventLoop;
          t2.activeTimerCount = t2.activeTimerCount + 1;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "": "Closure;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    },
    $isFunction: true,
    $is_void_: true
  },
  TimerImpl_internalCallback0: {
    "": "Closure;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      var t1 = init.globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      this.callback_3.call$0();
    },
    $isFunction: true,
    $is_void_: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  isJsIndexable: function(object, record) {
    var result, t1;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    t1 = J.getInterceptor(object);
    return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  throwInvalidReflectionError: function(memberName) {
    throw H.wrapException(P.UnsupportedError$("Can't use '" + H.S(memberName) + "' in reflection because it is not included in a @MirrorsUsed annotation."));
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: function(string) {
    throw H.wrapException(P.FormatException$(string));
  },
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1, maxCharCode, digitsPart, i, t2;
    if (handleError == null)
      handleError = H.Primitives__throwFormatException$closure;
    if (typeof source !== "string")
      H.throwExpression(new P.ArgumentError(source));
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (radix == null) {
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          return H.ioore(match, 2);
        if (match[2] != null)
          return parseInt(source, 16);
        if (3 >= t1)
          return H.ioore(match, 3);
        if (match[3] != null)
          return parseInt(source, 10);
        return handleError.call$1(source);
      }
      radix = 10;
    } else {
      if (typeof radix !== "number" || Math.floor(radix) !== radix)
        throw H.wrapException(new P.ArgumentError("Radix is not an integer"));
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
      if (match != null) {
        if (radix === 10) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] != null;
        } else
          t1 = false;
        if (t1)
          return parseInt(source, 10);
        if (!(radix < 10)) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] == null;
        } else
          t1 = true;
        if (t1) {
          maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
          if (1 >= match.length)
            return H.ioore(match, 1);
          digitsPart = match[1];
          t1 = J.getInterceptor$asx(digitsPart);
          i = 0;
          while (true) {
            t2 = t1.get$length(digitsPart);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            t1.codeUnitAt$1(digitsPart, 0);
            if (t1.codeUnitAt$1(digitsPart, i) > maxCharCode)
              return handleError.call$1(source);
            ++i;
          }
        }
      }
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, radix);
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled, t1;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = decompiled;
    }
    t1 = J.getInterceptor$s($name);
    if (t1.codeUnitAt$1($name, 0) === 36)
      $name = t1.substring$1($name, 1);
    t1 = H.getRuntimeTypeInfo(object);
    return H.S($name) + H.joinArguments(t1, 0, null);
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [J.JSInt];
    t1 = new H.ListIterator(codePoints, codePoints.length, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(codePoints, 0)];
    for (; t1.moveNext$0();) {
      i = t1._dev$_current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(charCodes, 0)]); t1.moveNext$0();) {
      i = t1._dev$_current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    object[key] = value;
  },
  Primitives_getConstructorOrInterceptor: function(className) {
    if (className == "String")
      return C.C_JSString;
    if (className == "int")
      return C.C_JSInt;
    if (className == "double")
      return C.C_JSDouble;
    if (className == "num")
      return C.C_JSNumber;
    if (className == "bool")
      return C.C_JSBool;
    if (className == "List")
      return C.C_JSArray;
    return init.allClasses[className];
  },
  JsCache_allocate: function() {
    var result = {x:0};
    delete result.x;
    return result;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper$closure.call$0;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper$closure.call$0;
    throw wrapper;
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
          default:
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,init.globalState.currentContext,H.invokeClosure$closure.call$7);
    closure.$identity = $function;
    return $function;
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      if (onTypeVariable == null)
        return C.JSInt_methods.toString$0(type);
      else
        return onTypeVariable.call$1(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = buffer._contents + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      str = typeof str === "string" ? str : H.S(str);
      buffer._contents = buffer._contents + str;
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  getRuntimeTypeString: function(object) {
    var className = typeof object === "object" && object !== null && object.constructor === Array ? "List" : J.getInterceptor(object).constructor.builtin$cls;
    return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  checkSubtype: function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  checkSubtypeOfRuntimeType: function(o, t) {
    var rti, type;
    if (o == null)
      return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null";
    if (t == null)
      return true;
    rti = H.getRuntimeTypeInfo(o);
    o = J.getInterceptor(o);
    if (rti != null) {
      type = rti.slice();
      type.splice(0, 0, o);
    } else
      type = o;
    return H.isSubtype(type, t);
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    if (!("$is" + H.S(H.runtimeTypeToString(typeOfT, null)) in typeOfS))
      return false;
    substitution = typeOfT !== typeOfS ? typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))] : null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  isAssignable: function(s, t) {
    return H.isSubtype(s, t) || H.isSubtype(t, s);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    if (t == null)
      return true;
    if (s == null)
      return false;
    return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, H.isAssignable$closure)
  ;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_TtD();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_U4w, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_IX5), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  allMatchesInStringUnchecked: function(needle, haystack) {
    var result, t1, $length, patternLength, startIndex, position, endIndex;
    result = P.List_List(null, P.Match);
    t1 = J.getInterceptor$asx(haystack);
    $length = t1.get$length(haystack);
    patternLength = needle.length;
    for (startIndex = 0; true;) {
      position = t1.indexOf$2(haystack, needle, startIndex);
      if (position === -1)
        break;
      result.push(new H.StringMatch(position, haystack, needle));
      endIndex = position + patternLength;
      if (endIndex === $length)
        break;
      else
        startIndex = position === endIndex ? startIndex + 1 : endIndex;
    }
    return result;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    var t1, t2;
    if (typeof other === "string")
      return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
    else {
      t1 = J.getInterceptor$s(other);
      if (typeof other === "object" && other !== null && !!t1.$isJSSyntaxRegExp) {
        t1 = C.JSString_methods.substring$1(receiver, startIndex);
        t2 = other._nativeRegExp;
        return t2.test(t1);
      } else
        return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
    }
  },
  stringReplaceAllUnchecked: function(receiver, from, to) {
    var result, $length, i, t1, nativeRegexp;
    if (typeof from === "string")
      if (from === "")
        if (receiver === "")
          return to;
        else {
          result = P.StringBuffer$("");
          $length = receiver.length;
          result.write$1(to);
          for (i = 0; i < $length; ++i) {
            t1 = receiver[i];
            t1 = result._contents + t1;
            result._contents = t1;
            result._contents = t1 + to;
          }
          return result._contents;
        }
      else
        return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
    else {
      t1 = J.getInterceptor(from);
      if (typeof from === "object" && from !== null && !!t1.$isJSSyntaxRegExp) {
        nativeRegexp = from.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, to.replace("$", "$$$$"));
      } else {
        if (from == null)
          H.throwExpression(new P.ArgumentError(null));
        throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
      }
    }
  },
  stringReplaceFirstUnchecked: function(receiver, from, to) {
    var t1;
    if (typeof from === "string")
      return receiver.replace(from, to.replace("$", "$$$$"));
    else {
      t1 = J.getInterceptor(from);
      if (typeof from === "object" && from !== null && !!t1.$isJSSyntaxRegExp)
        return receiver.replace(from._nativeRegExp, to.replace("$", "$$$$"));
      else {
        if (from == null)
          H.throwExpression(new P.ArgumentError(null));
        throw H.wrapException("String.replace(Pattern) UNIMPLEMENTED");
      }
    }
  },
  JSInvocationMirror: {
    "": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
    get$memberName: function() {
      return this.__js_helper$_memberName;
    },
    get$isSetter: function() {
      return this._kind === 2;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index;
      if (this._kind === 1)
        return C.List_empty;
      t1 = this._arguments;
      argumentCount = t1.length - this._namedArgumentNames.length;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.immutable$list = true;
      list.fixed$length = true;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
      if (this._kind !== 0) {
        t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        H.setRuntimeTypeInfo(t1, [P.Symbol0, null]);
        return t1;
      }
      t1 = this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount;
      if (namedArgumentCount === 0) {
        t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        H.setRuntimeTypeInfo(t1, [P.Symbol0, null]);
        return t1;
      }
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, null);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (t4 < 0 || t4 >= t2.length)
          return H.ioore(t2, t4);
        map.$indexSet(map, new H.Symbol(t3), t2[t4]);
      }
      return map;
    },
    _getCachedInvocation$1: function(object) {
      var interceptor, $name, isIntercepted, interceptor0, receiver, method;
      interceptor = J.getInterceptor(object);
      $name = this._internalName;
      isIntercepted = $.interceptedNames.indexOf($name) !== -1;
      if (isIntercepted) {
        interceptor0 = object === interceptor ? null : interceptor;
        receiver = interceptor;
        interceptor = interceptor0;
      } else {
        receiver = object;
        interceptor = null;
      }
      method = receiver[$name];
      if (typeof method === "function") {
        if (!("$reflectable" in method))
          H.throwInvalidReflectionError(this.get$memberName().get$_name());
        return new H.CachedInvocation(method, isIntercepted, interceptor);
      } else
        return new H.CachedNoSuchMethodInvocation(interceptor);
    },
    static: {"": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER"}
  },
  CachedInvocation: {
    "": "Object;jsFunction,isIntercepted,cachedInterceptor",
    get$isNoSuchMethod: function() {
      return false;
    },
    invokeOn$2: function(victim, $arguments) {
      var receiver, arguments0;
      if (!this.isIntercepted) {
        if (typeof $arguments !== "object" || $arguments === null || $arguments.constructor !== Array)
          $arguments = P.List_List$from($arguments, true, null);
        receiver = victim;
      } else {
        arguments0 = [victim];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        receiver = this.cachedInterceptor;
        receiver = receiver != null ? receiver : victim;
        $arguments = arguments0;
      }
      return this.jsFunction.apply(receiver, $arguments);
    }
  },
  CachedNoSuchMethodInvocation: {
    "": "Object;interceptor",
    get$isNoSuchMethod: function() {
      return true;
    },
    invokeOn$2: function(victim, invocation) {
      var receiver = this.interceptor;
      return J.noSuchMethod$1(receiver == null ? victim : receiver, invocation);
    }
  },
  TypeErrorDecoder: {
    "": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
      }}
  },
  NullError: {
    "": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "": "Closure;ex_0",
    call$1: function(error) {
      var t1 = J.getInterceptor(error);
      if (typeof error === "object" && error !== null && !!t1.$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    },
    $isFunction: true,
    $is_args1: true
  },
  _StackTrace: {
    "": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    },
    $isStackTrace: true
  },
  invokeClosure_closure: {
    "": "Closure;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    },
    $isFunction: true,
    $is_void_: true
  },
  invokeClosure_closure0: {
    "": "Closure;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    },
    $isFunction: true,
    $is_void_: true
  },
  invokeClosure_closure1: {
    "": "Closure;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    },
    $isFunction: true,
    $is_void_: true
  },
  invokeClosure_closure2: {
    "": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    },
    $isFunction: true,
    $is_void_: true
  },
  invokeClosure_closure3: {
    "": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    },
    $isFunction: true,
    $is_void_: true
  },
  Closure: {
    "": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    $isClosure: true,
    $isFunction: true
  },
  BoundClosure: {
    "": "Closure;_self,_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
    },
    $isBoundClosure: true
  },
  CastErrorImplementation: {
    "": "Error;message>",
    toString$0: function(_) {
      return this.message;
    },
    $isError: true,
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "": "Error;message>",
    toString$0: function(_) {
      return "RuntimeError: " + this.message;
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  TypeImpl: {
    "": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName, unmangledName0;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName;
      unmangledName0 = init.mangledGlobalNames[unmangledName];
      unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true
  },
  initHooks_closure: {
    "": "Closure;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    },
    $isFunction: true,
    $is_args1: true
  },
  initHooks_closure0: {
    "": "Closure;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    },
    $isFunction: true,
    $is_args2: true
  },
  initHooks_closure1: {
    "": "Closure;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    },
    $isFunction: true,
    $is_args1: true
  },
  JSSyntaxRegExp: {
    "": "Object;_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(t1.source, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    get$_nativeAnchoredVersion: function() {
      var t1 = this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(t1.source + "|()", t1.multiline, !t1.ignoreCase, true);
      this._nativeAnchoredRegExp = t1;
      return t1;
    },
    firstMatch$1: function(str) {
      var m;
      if (typeof str !== "string")
        H.throwExpression(new P.ArgumentError(str));
      m = this._nativeRegExp.exec(str);
      if (m == null)
        return;
      return H._MatchImplementation$(this, m);
    },
    allMatches$1: function(_, str) {
      if (typeof str !== "string")
        H.throwExpression(new P.ArgumentError(str));
      return new H._AllMatchesIterable(this, str);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    _execAnchored$2: function(string, start) {
      var regexp, match, t1, t2;
      regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      t1 = match.length;
      t2 = t1 - 1;
      if (t2 < 0)
        return H.ioore(match, t2);
      if (match[t2] != null)
        return;
      J.set$length$asx(match, t2);
      return H._MatchImplementation$(this, match);
    },
    matchAsPrefix$2: function(_, string, start) {
      var t1 = J.get$length$asx(string);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = start > t1;
      if (t1)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(string)));
      return this._execAnchored$2(string, start);
    },
    matchAsPrefix$1: function($receiver, string) {
      return this.matchAsPrefix$2($receiver, string, 0);
    },
    $isJSSyntaxRegExp: true,
    $isRegExp: true,
    static: {JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
        var m, i, g, regexp, errorMessage;
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
        if (regexp instanceof RegExp)
          return regexp;
        errorMessage = String(regexp);
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + pattern + ", " + errorMessage));
      }}
  },
  _MatchImplementation: {
    "": "Object;pattern,__js_helper$_match",
    $index: function(_, index) {
      var t1 = this.__js_helper$_match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    _MatchImplementation$2: function(pattern, _match) {
    },
    $isMatch: true,
    static: {_MatchImplementation$: function(pattern, _match) {
        var t1 = new H._MatchImplementation(pattern, _match);
        t1._MatchImplementation$2(pattern, _match);
        return t1;
      }}
  },
  _AllMatchesIterable: {
    "": "IterableBase;_re,_string",
    get$iterator: function(_) {
      return new H._AllMatchesIterator(this._re, this._string, null);
    },
    $asIterableBase: function() {
      return [P.Match];
    },
    $asIterable: function() {
      return [P.Match];
    }
  },
  _AllMatchesIterator: {
    "": "Object;_regExp,_string,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      var t1, t2, index;
      if (this._string == null)
        return false;
      t1 = this.__js_helper$_current;
      if (t1 != null) {
        t1 = t1.__js_helper$_match;
        t2 = t1.index;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = J.get$length$asx(t1[0]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        index = t2 + t1;
        if (this.__js_helper$_current.__js_helper$_match.index === index)
          ++index;
      } else
        index = 0;
      t1 = this._regExp._execGlobal$2(this._string, index);
      this.__js_helper$_current = t1;
      if (t1 == null) {
        this._string = null;
        return false;
      }
      return true;
    }
  },
  StringMatch: {
    "": "Object;start,input,pattern",
    $index: function(_, g) {
      if (!J.$eq(g, 0))
        H.throwExpression(P.RangeError$value(g));
      return this.pattern;
    },
    $isMatch: true
  }
}],
["bot", "package:bot/bot.dart", , X, {
  CollectionUtil_allUnique: function(items) {
    var t1, i, j, j0;
    Y._metaRequireArgumentNotNullOrEmpty("items");
    for (t1 = J.getInterceptor$asx(items), i = 0; i < t1.get$length(items); i = j)
      for (j = i + 1, j0 = j; j0 < t1.get$length(items); ++j0)
        if (J.$eq(t1.elementAt$1(items, i), t1.elementAt$1(items, j0)))
          return false;
    return true;
  },
  CollectionUtil_count: function(source, test) {
    return source.fold$2(source, 0, new X.CollectionUtil_count_closure(test));
  },
  CollectionUtil_exclude: function(source, itemsToExclude) {
    Y._metaRequireArgumentNotNullOrEmpty("itemsToExclude");
    return X.$$(source.where$1(source, new X.CollectionUtil_exclude_closure(itemsToExclude)));
  },
  CollectionUtil_distinct: function(source, comparer) {
    var t1 = {};
    t1.comparer_0 = comparer;
    if (comparer == null)
      t1.comparer_0 = new X.CollectionUtil_distinct_closure();
    t1 = new X._FuncEnumerable(source, new X.CollectionUtil_distinct_closure0(t1));
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  CollectionUtil_toMap: function(source, valueFunc, keyFunc) {
    var map, t1, e, k;
    if (keyFunc == null)
      keyFunc = new X.CollectionUtil_toMap_closure();
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = source.get$iterator(source); t1.moveNext$0() === true;) {
      e = t1.get$current();
      k = keyFunc.call$1(e);
      if (map.containsKey$1(k))
        throw H.wrapException(P.UnsupportedError$("The key '" + H.S(k) + "' is duplicated"));
      map.$indexSet(map, k, valueFunc.call$1(e));
    }
    return map;
  },
  $$: function(source) {
    var t1 = J.getInterceptor(source);
    if (!!t1.$isEnumerable)
      return source;
    else {
      Y._metaRequireArgumentNotNullOrEmpty("source");
      t1 = new X._SimpleEnumerable(source);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    }
  },
  NumberEnumerable_NumberEnumerable$fromRange: function(start, count, $T) {
    var t1 = new P._GeneratorIterable(count, new X.NumberEnumerable_NumberEnumerable$fromRange_closure(start));
    H.setRuntimeTypeInfo(t1, [null]);
    Y._metaRequireArgumentNotNullOrEmpty("source");
    t1 = new X._SimpleNumEnumerable(t1);
    H.setRuntimeTypeInfo(t1, [$T]);
    return t1;
  },
  isValidNumber: function(value) {
    var t1;
    if (value != null) {
      t1 = J.getInterceptor$n(value);
      t1 = !t1.get$isInfinite(value) && !t1.get$isNaN(value);
    } else
      t1 = false;
    return t1;
  },
  Util_getHashCode: function(source) {
    var t1, hash, h, next;
    Y._metaRequireArgumentNotNullOrEmpty("source");
    if (source == null)
      H.throwExpression(Q.NullArgumentError$("source"));
    for (t1 = J.get$iterator$ax(source), hash = 0; t1.moveNext$0() === true;) {
      h = t1.get$current();
      next = h == null ? 0 : J.get$hashCode$(h);
      if (typeof next !== "number")
        return H.iae(next);
      hash = 536870911 & hash + next;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >>> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  Util_splitLines: function(input) {
    var t1;
    if (input == null)
      H.throwExpression(Q.NullArgumentError$("input"));
    t1 = new X._FuncEnumerable(input, new X.Util_splitLines_closure());
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  getDelayedResult: function(input) {
    var t1 = J.getInterceptor(input);
    if (typeof input === "object" && input !== null && !!t1.$isFunction)
      input = P.Future_Future(input, null);
    t1 = J.getInterceptor(input);
    if (typeof input === "object" && input !== null && !!t1.$isFuture)
      return input.then$1(new X.getDelayedResult_closure());
    else
      return P._Future$immediate(input, null);
  },
  Attachable: {
    "": "Object;name>",
    $isAttachable: true
  },
  AttachableObject: {
    "": "DisposableImpl;",
    disposeInternal$0: function() {
      X.DisposableImpl.prototype.disposeInternal$0.call(this);
      var t1 = this._eventHandlers;
      t1.forEach$1(t1, new X.AttachableObject_disposeInternal_closure());
      t1.clear$0(t1);
    },
    _getStream$1: function(property) {
      if (this._disposed)
        H.throwExpression(X.DisposedError$());
      return J.get$stream$x(this._eventHandlers.putIfAbsent$2(property, new X.AttachableObject__getStream_closure(this, property)));
    },
    _hasSubscribers$1: function(property) {
      var t1, handle;
      if (this._disposed)
        H.throwExpression(X.DisposedError$());
      t1 = this._eventHandlers;
      handle = t1.$index(t1, property);
      return handle != null && handle.get$hasListener();
    },
    _fireEvent$2: function(attachable, args) {
      var t1, handle;
      if (this._disposed)
        H.throwExpression(X.DisposedError$());
      t1 = this._eventHandlers;
      handle = t1.$index(t1, attachable);
      if (handle != null)
        J.add$1$ax(handle, args);
    },
    _bot$_set$2: function(key, value) {
      var t1;
      if (this._disposed)
        H.throwExpression(X.DisposedError$());
      t1 = this._propertyValues;
      t1.$indexSet(t1, key, value);
      this._fireChange$3(key, value, false);
    },
    _remove$1: function(key) {
      var t1 = this._disposed;
      if (t1)
        H.throwExpression(X.DisposedError$());
      if (t1)
        H.throwExpression(X.DisposedError$());
      t1 = this._propertyValues;
      if (t1.containsKey$1(key)) {
        t1.remove$1(t1, key);
        this._fireChange$3(key, null, true);
      }
    },
    _getValueOrUndefined$3: function(key, obj, ifAbsent) {
      var t1, value;
      t1 = this._disposed;
      if (t1)
        H.throwExpression(X.DisposedError$());
      if (t1)
        H.throwExpression(X.DisposedError$());
      t1 = this._propertyValues;
      if (t1.containsKey$1(key))
        return t1.$index(t1, key);
      else if (ifAbsent != null) {
        value = ifAbsent.call$1(obj);
        this._bot$_set$2(key, value);
        return value;
      } else
        return C.C__UndefinedValue;
    },
    _fireChange$3: function(key, value, isClear) {
      var t1, handle, t2;
      if (this._disposed)
        H.throwExpression(X.DisposedError$());
      t1 = this._eventHandlers;
      handle = t1.$index(t1, key);
      if (handle != null) {
        t1 = J.getInterceptor$ax(handle);
        if (isClear) {
          t2 = new X.PropertyChangedEventArgs(key, null, true);
          H.setRuntimeTypeInfo(t2, [null]);
          t1.add$1(handle, t2);
        } else {
          t2 = new X.PropertyChangedEventArgs(key, value, false);
          H.setRuntimeTypeInfo(t2, [null]);
          t1.add$1(handle, t2);
        }
      }
    }
  },
  AttachableObject_disposeInternal_closure: {
    "": "Closure;",
    call$2: function(a, e) {
      e.dispose$0();
    },
    $isFunction: true,
    $is_args2: true
  },
  AttachableObject__getStream_closure: {
    "": "Closure;this_0,property_1",
    call$0: function() {
      var t1 = new X.EventHandle(P.StreamController_StreamController$broadcast(new X.AttachableObject__getStream__closure(this.this_0, this.property_1), null, true, null), false);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    $isFunction: true,
    $is_void_: true
  },
  AttachableObject__getStream__closure: {
    "": "Closure;this_2,property_3",
    call$0: function() {
      var t1, t2, handle;
      t1 = this.this_2;
      t2 = this.property_3;
      if (!t1._disposed) {
        t1 = t1._eventHandlers;
        handle = t1.$index(t1, t2);
        if (!handle.get$hasListener()) {
          handle.dispose$0();
          t1.remove$1(t1, t2);
        }
      }
      return;
    },
    $isFunction: true,
    $is_void_: true
  },
  AttachedEvent: {
    "": "Attachable;name"
  },
  Property: {
    "": "Attachable;defaultValue,name",
    get$2: function(obj, ifAbsent) {
      var coreValue = obj._getValueOrUndefined$3(this, obj, ifAbsent);
      if (coreValue !== C.C__UndefinedValue)
        return coreValue;
      else
        return this.defaultValue;
    },
    get$1: function(obj) {
      return this.get$2(obj, null);
    },
    toString$0: function(_) {
      return "Property '" + this.name + "'";
    },
    $isProperty: true,
    static: {"": "Property_Undefined"}
  },
  _UndefinedValue: {
    "": "Object;"
  },
  PropertyChangedEventArgs: {
    "": "EventArgs;property,newValue,cleared",
    $isPropertyChangedEventArgs: true
  },
  Array2d: {
    "": "Sequence;width,height,_bot$_source",
    get$length: function(_) {
      return J.get$length$asx(this._bot$_source);
    },
    $index: function(_, index) {
      return J.$index$asx(this._bot$_source, index);
    },
    $indexSet: function(_, index, value) {
      J.$indexSet$ax(this._bot$_source, index, value);
    },
    getAdjacent$2: function(x, y) {
      var m = new H.MappedListIterable(this.getAdjacentIndices$2(x, y), new X.Array2d_getAdjacent_closure(this));
      H.setRuntimeTypeInfo(m, [null, null]);
      return P.List_List$from(m, true, H.getTypeArgumentByIndex(this, 0));
    },
    getAdjacentIndices$2: function(x, y) {
      var adj, k, t1, t2, t3, t4, t5, j, t6;
      adj = P.List_List(null, J.JSInt);
      for (k = P.max(0, y - 1), t1 = this.height, t2 = y + 2, t3 = x - 1, t4 = this.width, t5 = x + 2; k < P.min(t1, t2); ++k)
        for (j = P.max(0, t3), t6 = k !== y; j < P.min(t4, t5); ++j)
          if (j !== x || t6)
            adj.push(this._getIndex$2(j, k));
      return adj;
    },
    _getIndex$2: function(x, y) {
      var t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return x + y * t1;
    },
    Array2d$wrap$2: function(width, source, $T) {
      var t1, t2;
      Y._metaRequireArgumentNotNullOrEmpty("width");
      if (width == null)
        H.throwExpression(Q.NullArgumentError$("width"));
      Y._metaRequireArgumentNotNullOrEmpty("source");
      if (typeof width !== "number")
        return width.$ge();
      Y.requireArgument(true, "width", "width must be non-zero");
      t1 = this._bot$_source;
      if (width * this.height === 0)
        Y.requireArgument(J.get$length$asx(t1) === 0, "width", "width must be greater than zero if the source is non-empty");
      else {
        t2 = J.getInterceptor$asx(t1);
        Y.requireArgument(t2.get$length(t1) > 0, "source", "if width is non-zero, source must be non-empty");
        Y.requireArgument(C.JSInt_methods.$mod(t2.get$length(t1), width) === 0, "width", "width must evenly divide the source");
      }
    },
    Array2d$_skinny$1: function(height, $T) {
    },
    $asSequence: null,
    $asEnumerable: null,
    $asIterable: null,
    static: {Array2d_Array2d$readonlyFrom: function(width, source, $T) {
        var t1, list, s;
        Y._metaRequireArgumentNotNullOrEmpty("width");
        if (width == null)
          H.throwExpression(Q.NullArgumentError$("width"));
        Y._metaRequireArgumentNotNullOrEmpty("source");
        t1 = source == null;
        if (t1)
          H.throwExpression(Q.NullArgumentError$("source"));
        list = P.List_List$from(source, true, $T);
        if (t1)
          s = null;
        else {
          s = new X.ReadOnlyCollection(list);
          H.setRuntimeTypeInfo(s, [$T]);
        }
        s.toString;
        t1 = new X._SequenceList(s);
        H.setRuntimeTypeInfo(t1, [null]);
        return X.Array2d$wrap(width, t1, null);
      }, Array2d_Array2d: function(width, height, initialValue, $T) {
        var s, t1;
        Y._metaRequireArgumentNotNullOrEmpty("width");
        Y._metaRequireArgumentNotNullOrEmpty("height");
        Y.requireArgument(true, "width", null);
        Y.requireArgument(true, "height", null);
        s = P.List_List$filled(width * height, initialValue, $T);
        if (width === 0) {
          t1 = new X.Array2d(0, height, []);
          H.setRuntimeTypeInfo(t1, [null]);
          t1.Array2d$_skinny$1(height, null);
          return t1;
        }
        return X.Array2d$wrap(width, s, null);
      }, Array2d$wrap: function(width, source, $T) {
        var t1;
        if (width != null) {
          if (typeof width !== "number")
            return width.$gt();
          t1 = width > 0 && true;
        } else
          t1 = false;
        if (t1) {
          t1 = J.get$length$asx(source);
          if (typeof width !== "number")
            return H.iae(width);
          t1 = C.JSInt_methods.$tdiv(t1, width);
        } else
          t1 = 0;
        t1 = new X.Array2d(width, t1, source);
        H.setRuntimeTypeInfo(t1, [$T]);
        t1.Array2d$wrap$2(width, source, $T);
        return t1;
      }}
  },
  Array2d_getAdjacent_closure: {
    "": "Closure;this_0",
    call$1: function(i) {
      return J.$index$asx(this.this_0._bot$_source, i);
    },
    $isFunction: true,
    $is_args1: true
  },
  CollectionUtil_count_closure: {
    "": "Closure;test_0",
    call$2: function(previous, element) {
      if (this.test_0.call$1(element) === true)
        return J.$add$ns(previous, 1);
      else
        return previous;
    },
    $isFunction: true,
    $is_args2: true
  },
  CollectionUtil_exclude_closure: {
    "": "Closure;itemsToExclude_0",
    call$1: function(e) {
      return !C.JSArray_methods.contains$1(this.itemsToExclude_0, e);
    },
    $isFunction: true,
    $is_args1: true
  },
  CollectionUtil_distinct_closure: {
    "": "Closure;",
    call$2: function(a, b) {
      return J.$eq(a, b);
    },
    $isFunction: true,
    $is_args2: true
  },
  CollectionUtil_distinct_closure0: {
    "": "Closure;box_0",
    call$1: function(s) {
      var t1 = new X._DistinctIterator(J.get$iterator$ax(s), this.box_0.comparer_0, P.List_List(null, null), null);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    $isFunction: true,
    $is_args1: true
  },
  CollectionUtil_toMap_closure: {
    "": "Closure;",
    call$1: function(a) {
      return a;
    },
    $isFunction: true,
    $is_args1: true
  },
  _DistinctIterator: {
    "": "Object;_bot$_source,_comparer,_found,_bot$_current",
    _comparer$2: function(arg0, arg1) {
      return this._comparer.call$2(arg0, arg1);
    },
    get$current: function() {
      return this._bot$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      var t1, t2, candidate;
      for (t1 = this._bot$_source, t2 = this._found; t1.moveNext$0() === true;) {
        candidate = t1.get$current();
        if (!H.IterableMixinWorkaround_any(t2, new X._DistinctIterator_moveNext_closure(this, candidate))) {
          this._bot$_current = candidate;
          t2.push(candidate);
          return true;
        }
      }
      return false;
    }
  },
  _DistinctIterator_moveNext_closure: {
    "": "Closure;this_0,candidate_1",
    call$1: function(e) {
      return this.this_0._comparer$2(e, this.candidate_1);
    },
    $isFunction: true,
    $is_args1: true
  },
  _SequenceIterator: {
    "": "Object;_list,_bot$_length,_bot$_position,_bot$_current",
    moveNext$0: function() {
      var t1, t2, nextPosition;
      t1 = this._list;
      t2 = this._bot$_length;
      if (t1.get$length(t1) !== t2)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      nextPosition = this._bot$_position + 1;
      if (nextPosition < t2) {
        this._bot$_position = nextPosition;
        this._bot$_current = t1.$index(t1, nextPosition);
        return true;
      }
      this._bot$_current = null;
      return false;
    },
    get$current: function() {
      return this._bot$_current;
    },
    "+current": 0
  },
  Enumerable: {
    "": "IterableBase;",
    map$1: function(_, f) {
      return X.$$(P.IterableBase.prototype.map$1.call(this, this, f));
    },
    where$1: function(_, f) {
      return X.$$(P.IterableBase.prototype.where$1.call(this, this, f));
    },
    expand$1: function(_, f) {
      return X.$$(P.IterableBase.prototype.expand$1.call(this, this, f));
    },
    concat$1: function(source) {
      var t1 = X.$$([this, source]);
      return t1.expand$1(t1, new X.Enumerable_concat_closure());
    },
    forEachWithIndex$1: function(f) {
      var t1, i, i0;
      for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0() === true; i = i0) {
        i0 = i + 1;
        f.call$2(t1.get$current(), i);
      }
    },
    toString$0: function(_) {
      return "[" + this.join$1(this, ", ") + "]";
    },
    $isEnumerable: true,
    $asIterableBase: null,
    $asIterable: null
  },
  Enumerable_concat_closure: {
    "": "Closure;",
    call$1: function(e) {
      return e;
    },
    $isFunction: true,
    $is_args1: true
  },
  _SimpleEnumerable: {
    "": "Enumerable;_bot$_source",
    get$iterator: function(_) {
      return J.get$iterator$ax(this._bot$_source);
    },
    $asEnumerable: null,
    $asIterable: null
  },
  _FuncEnumerable: {
    "": "Enumerable;_bot$_source,_func",
    _func$1: function(arg0) {
      return this._func.call$1(arg0);
    },
    get$iterator: function(_) {
      return this._func$1(this._bot$_source);
    },
    $asEnumerable: function(TSource, TOutput) {
      return [TOutput];
    },
    $asIterable: function(TSource, TOutput) {
      return [TOutput];
    }
  },
  Grouping: {
    "": "Object;_values",
    containsKey$1: function(key) {
      return this._values.containsKey$1(key);
    },
    $index: function(_, key) {
      var t1 = this._values;
      return t1.$index(t1, key);
    },
    forEach$1: function(_, f) {
      var t1 = this._values;
      return t1.forEach$1(t1, f);
    },
    getValues$0: function() {
      var t1, t2;
      t1 = this._values;
      t1 = t1.get$values(t1);
      t2 = new H.ExpandIterable(t1, new X.Grouping_getValues_closure());
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
      return t2;
    },
    get$length: function(_) {
      return this._values._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._values._collection$_length === 0;
    },
    toString$0: function(_) {
      var t1 = this._values;
      return t1.toString$0(t1);
    },
    Grouping$2: function(source, keyFunc, $K, $V) {
      var t1, t2, value;
      if (keyFunc == null)
        keyFunc = new X.Grouping_closure();
      for (t1 = source.get$iterator(source), t2 = this._values; t1.moveNext$0() === true;) {
        value = t1.get$current();
        J.add$1$ax(t2.putIfAbsent$2(keyFunc.call$1(value), new X.Grouping_closure0($V)), value);
      }
    },
    static: {Grouping$: function(source, keyFunc, $K, $V) {
        var t1 = new X.Grouping(P.HashMap_HashMap(null, null, null, $K, [J.JSArray, $V]));
        H.setRuntimeTypeInfo(t1, [$K, $V]);
        t1.Grouping$2(source, keyFunc, $K, $V);
        return t1;
      }}
  },
  Grouping_closure: {
    "": "Closure;",
    call$1: function(v) {
      return v;
    },
    $isFunction: true,
    $is_args1: true
  },
  Grouping_closure0: {
    "": "Closure;V_0",
    call$0: function() {
      return P.List_List(null, this.V_0);
    },
    $isFunction: true,
    $is_void_: true
  },
  Grouping_getValues_closure: {
    "": "Closure;",
    call$1: function(a) {
      return a;
    },
    $isFunction: true,
    $is_args1: true
  },
  NumberEnumerable: {
    "": "IterableBase;",
    max$0: function(_) {
      return this.reduce$1(this, new X.NumberEnumerable_max_closure());
    },
    min$0: function(_) {
      return this.reduce$1(this, new X.NumberEnumerable_min_closure());
    },
    sum$0: function() {
      var t1, theSum, n;
      for (t1 = this.get$iterator(this), theSum = 0; t1.moveNext$0() === true;) {
        n = t1.get$current();
        if (n == null)
          throw H.wrapException(C.InvalidOperationError_61T);
        if (typeof n !== "number")
          return H.iae(n);
        theSum += n;
      }
      return theSum;
    },
    average$0: function() {
      var t1, theCount, theSum, n;
      for (t1 = this.get$iterator(this), theCount = 0, theSum = 0; t1.moveNext$0() === true;) {
        n = t1.get$current();
        if (n == null)
          throw H.wrapException(C.InvalidOperationError_61T);
        if (typeof n !== "number")
          return H.iae(n);
        theSum += n;
        ++theCount;
      }
      return theSum / theCount;
    },
    $asIterableBase: null,
    $asIterable: null
  },
  NumberEnumerable_NumberEnumerable$fromRange_closure: {
    "": "Closure;start_0",
    call$1: function(i) {
      return J.$add$ns(i, this.start_0);
    },
    $isFunction: true,
    $is_args1: true
  },
  NumberEnumerable_max_closure: {
    "": "Closure;",
    call$2: function(a, b) {
      return P.max(a, b);
    },
    $isFunction: true,
    $is_args2: true
  },
  NumberEnumerable_min_closure: {
    "": "Closure;",
    call$2: function(a, b) {
      return P.min(a, b);
    },
    $isFunction: true,
    $is_args2: true
  },
  _SimpleNumEnumerable: {
    "": "NumberEnumerable;_bot$_source",
    get$iterator: function(_) {
      return J.get$iterator$ax(this._bot$_source);
    },
    $asNumberEnumerable: null,
    $asIterable: null
  },
  ReadOnlyCollection: {
    "": "Sequence;_items",
    get$length: function(_) {
      return this._items.length;
    },
    $index: function(_, index) {
      var t1 = this._items;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asSequence: null,
    $asEnumerable: null,
    $asIterable: null
  },
  Sequence: {
    "": "Enumerable;",
    indexOf$2: function(_, value, start) {
      var i, t1;
      i = start;
      while (true) {
        t1 = this.get$length(this);
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < t1))
          break;
        if (J.$eq(this.$index(this, i), value))
          return i;
        ++i;
      }
      return -1;
    },
    indexOf$1: function($receiver, value) {
      return this.indexOf$2($receiver, value, 0);
    },
    lastIndexOf$2: function(_, value, start) {
      var i;
      if (start == null)
        start = this.get$length(this) - 1;
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$ge();
        if (!(i >= 0))
          break;
        if (J.$eq(this.$index(this, i), value))
          return i;
        --i;
      }
      return -1;
    },
    lastIndexOf$1: function($receiver, value) {
      return this.lastIndexOf$2($receiver, value, null);
    },
    elementAt$1: function(_, index) {
      return this.$index(this, index);
    },
    get$iterator: function(_) {
      var t1 = new X._SequenceIterator(this, this.get$length(this), -1, null);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    $asEnumerable: null,
    $asIterable: null
  },
  _SequenceList: {
    "": "Sequence_ListMixin;_bot$_source",
    $index: function(_, index) {
      var t1 = this._bot$_source;
      return t1.$index(t1, index);
    },
    get$length: function(_) {
      var t1 = this._bot$_source;
      return t1.get$length(t1);
    },
    sublist$2: function(_, start, end) {
      var t1, newLength, result, i;
      t1 = this._bot$_source;
      end = t1.get$length(t1);
      t1 = this._bot$_source;
      t1 = start > t1.get$length(t1);
      if (t1) {
        t1 = this._bot$_source;
        throw H.wrapException(P.RangeError$range(start, 0, t1.get$length(t1)));
      }
      if (typeof end !== "number")
        return end.$lt();
      if (end >= start) {
        t1 = this._bot$_source;
        t1 = end > t1.get$length(t1);
      } else
        t1 = true;
      if (t1) {
        t1 = this._bot$_source;
        throw H.wrapException(P.RangeError$range(end, start, t1.get$length(t1)));
      }
      newLength = end - start;
      result = Array(newLength);
      H.setRuntimeTypeInfo(result, [H.getTypeArgumentByIndex(this, 0)]);
      for (t1 = this._bot$_source, i = 0; i < newLength; ++i)
        result[i] = t1.$index(t1, start + i);
      return result;
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    $asList: null,
    $asEnumerable: null,
    $asIterable: null,
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true
  },
  Sequence_ListMixin: {
    "": "Sequence+ListMixin;",
    $asSequence: null,
    $asEnumerable: null,
    $asIterable: null,
    $asList: null,
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true
  },
  HslColor: {
    "": "Object;h<,s<,l<",
    toRgb$0: function() {
      var normH, t1, t2, b, g, r, t3, t4, temp2, temp1;
      normH = this.h / 360;
      t1 = this.s;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, 0)) {
        b = J.$mul$n(this.l, 255);
        g = b;
        r = g;
      } else {
        t3 = this.l;
        t4 = J.getInterceptor$n(t3);
        if (t4.$lt(t3, 0.5)) {
          if (typeof t1 !== "number")
            return H.iae(t1);
          temp2 = t4.$mul(t3, 1 + t1);
        } else
          temp2 = J.$sub$n(t4.$add(t3, t1), t2.$mul(t1, t3));
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof temp2 !== "number")
          return H.iae(temp2);
        temp1 = 2 * t3 - temp2;
        t1 = X.HslColor__hueToRgb(temp1, temp2, normH + 0.3333333333333333);
        if (typeof t1 !== "number")
          return H.iae(t1);
        r = 255 * t1;
        t1 = X.HslColor__hueToRgb(temp1, temp2, normH);
        if (typeof t1 !== "number")
          return H.iae(t1);
        g = 255 * t1;
        t1 = X.HslColor__hueToRgb(temp1, temp2, normH - 0.3333333333333333);
        if (typeof t1 !== "number")
          return H.iae(t1);
        b = 255 * t1;
      }
      return X.RgbColor_RgbColor(C.JSInt_methods.toInt$0(J.round$0$n(r)), C.JSInt_methods.toInt$0(J.round$0$n(g)), C.JSInt_methods.toInt$0(J.round$0$n(b)));
    },
    get$hashCode: function(_) {
      return X.Util_getHashCode([this.h, this.s, this.l]);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other.get$h() === this.h && J.$eq(other.get$s(), this.s) && J.$eq(other.get$l(), this.l);
    },
    toString$0: function(_) {
      return "{HslColor: " + H.S(this.h) + ", " + H.S(this.s) + ", " + H.S(this.l) + "}";
    },
    static: {HslColor_HslColor: function(h, s, l) {
        var t1, message;
        if (h != null) {
          t1 = J.getInterceptor$n(h);
          t1 = !t1.get$isInfinite(h) && !t1.get$isNaN(h);
        } else
          t1 = false;
        if (!t1)
          H.throwExpression(Q.DetailedArgumentError$("h", "hue value was not valid"));
        h = J.$mod$n(h, 360);
        if (s != null) {
          t1 = J.getInterceptor$n(s);
          t1 = !t1.get$isInfinite(s) && !t1.get$isNaN(s);
        } else
          t1 = false;
        if (!t1)
          H.throwExpression(Q.DetailedArgumentError$("s", "must be a valid number"));
        t1 = J.getInterceptor$n(s);
        t1 = t1.$ge(s, 0) && t1.$le(s, 1);
        message = "must be >= 0 && <= 1 but was " + H.S(s);
        if (!t1)
          H.throwExpression(Q.DetailedArgumentError$("s", message.length === 0 ? "value was invalid" : message));
        if (l != null) {
          t1 = J.getInterceptor$n(l);
          t1 = !t1.get$isInfinite(l) && !t1.get$isNaN(l);
        } else
          t1 = false;
        if (!t1)
          H.throwExpression(Q.DetailedArgumentError$("l", "must be a valid number"));
        t1 = J.getInterceptor$n(l);
        t1 = t1.$ge(l, 0) && t1.$le(l, 1);
        message = "must be >= 0 && <=1 but was " + H.S(l);
        if (!t1)
          H.throwExpression(Q.DetailedArgumentError$("l", message.length === 0 ? "value was invalid" : message));
        return new X.HslColor(h, s, l);
      }, HslColor__hueToRgb: function(v1, v2, vH) {
        var t1;
        vH = C.JSNumber_methods.$mod(vH, 1);
        if (6 * vH < 1) {
          t1 = J.$mul$n(J.$mul$n(J.$sub$n(v2, v1), 6), vH);
          if (typeof t1 !== "number")
            return H.iae(t1);
          return v1 + t1;
        } else if (2 * vH < 1)
          return v2;
        else if (3 * vH < 2) {
          t1 = J.$mul$n(J.$mul$n(J.$sub$n(v2, v1), 0.6666666666666666 - vH), 6);
          if (typeof t1 !== "number")
            return H.iae(t1);
          return v1 + t1;
        }
        return v1;
      }}
  },
  RgbColor: {
    "": "Object;r>,g<,b<",
    toHex$0: function() {
      var buffer = P.StringBuffer$("#");
      H.IterableMixinWorkaround_forEach([this.r, this.g, this.b], new X.RgbColor_toHex_closure(buffer));
      return buffer._contents;
    },
    toHsl$0: function() {
      var normR, normG, normB, max, min, l, h, t1, t2, t3, s;
      normR = J.$div$n(this.r, 255);
      normG = J.$div$n(this.g, 255);
      normB = J.$div$n(this.b, 255);
      max = P.max(normR, P.max(normG, normB));
      min = P.min(normR, P.min(normG, normB));
      l = 0.5 * (max + min);
      if (max !== min) {
        if (max === normR)
          h = 60 * (normG - normB) / (max - min);
        else if (max === normG)
          h = 60 * (normB - normR) / (max - min) + 120;
        else
          h = max === normB ? 60 * (normR - normG) / (max - min) + 240 : 0;
        t1 = 0 < l && l <= 0.5;
        t2 = 2 * l;
        t3 = max - min;
        s = t1 ? t3 / t2 : P.min(1, t3 / (2 - t2));
      } else {
        h = 0;
        s = 0;
      }
      return X.HslColor_HslColor(h, s, l);
    },
    get$hashCode: function(_) {
      return X.Util_getHashCode([this.r, this.g, this.b]);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return J.$eq(J.get$r$x(other), this.r) && J.$eq(other.get$g(), this.g) && J.$eq(other.get$b(), this.b);
    },
    toString$0: function(_) {
      return "{RgbColor: " + H.S(this.r) + ", " + H.S(this.g) + ", " + H.S(this.b) + "}";
    },
    $isRgbColor: true,
    static: {"": "RgbColor__validHexColorRe", RgbColor_RgbColor: function(r, g, b) {
        X.RgbColor__validateComponent(r, "r");
        X.RgbColor__validateComponent(g, "g");
        X.RgbColor__validateComponent(b, "b");
        return new X.RgbColor(r, g, b);
      }, RgbColor_RgbColor$fromHex: function(hexColor) {
        var t1;
        Y._metaRequireArgumentNotNullOrEmpty("hexColor");
        if (hexColor == null)
          H.throwExpression(Q.NullArgumentError$("hexColor"));
        t1 = $.get$RgbColor__validHexColorRe()._nativeRegExp;
        if (typeof hexColor !== "string")
          H.throwExpression(new P.ArgumentError(hexColor));
        Y.requireArgument(t1.test(hexColor), "hexColor", "'" + H.S(hexColor) + "' is not a valid hex color");
        hexColor = J.toLowerCase$0$s(hexColor);
        return X.RgbColor_RgbColor(H.Primitives_parseInt("0x" + C.JSString_methods.substring$2(hexColor, 1, 3), null, null), H.Primitives_parseInt("0x" + C.JSString_methods.substring$2(hexColor, 3, 5), null, null), H.Primitives_parseInt("0x" + C.JSString_methods.substring$2(hexColor, 5, 7), null, null));
      }, RgbColor__validateComponent: function(c, $name) {
        var t1;
        Y.requireArgument(X.isValidNumber(c), $name, null);
        t1 = J.getInterceptor$n(c);
        Y.requireArgument(t1.$ge(c, 0) && t1.$le(c, 255), $name, null);
      }}
  },
  RgbColor_toHex_closure: {
    "": "Closure;buffer_0",
    call$1: function(c) {
      var t1 = J.toRadixString$1$n(c, 16);
      if (t1.length === 1)
        t1 = "0" + t1;
      this.buffer_0.write$1(t1);
    },
    $isFunction: true,
    $is_args1: true
  },
  DisposedError: {
    "": "StateError;message",
    static: {DisposedError$: function() {
        return new X.DisposedError("Invalid operation on disposed object");
      }}
  },
  DisposableImpl: {
    "": "Object;",
    dispose$0: function() {
      if (this._disposed)
        H.throwExpression(X.DisposedError$());
      this._disposed = true;
      this.disposeInternal$0();
    },
    disposeInternal$0: function() {
      return;
    }
  },
  EventArgs: {
    "": "Object;",
    $isEventArgs: true,
    static: {"": "EventArgs_empty"}
  },
  EventHandle: {
    "": "Object;_bot$_controller,_disposed",
    add$1: function(_, $event) {
      var t1 = this._bot$_controller;
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1($event);
      return;
    },
    dispose$0: function() {
      if (this._disposed)
        throw H.wrapException(X.DisposedError$());
      this._disposed = true;
      var t1 = this._bot$_controller;
      t1.close$0(t1);
    },
    get$stream: function(_) {
      var t1, t2;
      t1 = this._bot$_controller;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2;
    },
    get$hasListener: function() {
      var t1 = this._bot$_controller;
      return t1._async$_next !== t1;
    },
    $isEventHandle: true
  },
  AffineTransform: {
    "": "Object;_scX<,_shY<,_shX<,_scY<,_tX<,_tY<",
    get$isIdentity: function() {
      return this._scX === 1 && this._shY === 0 && this._shX === 0 && this._scY === 1 && this._tX === 0 && this._tY === 0;
    },
    concatenate$1: function(tx) {
      var m0, m1, t1, t2, t3, t4, t5;
      m0 = this._scX;
      m1 = this._shX;
      t1 = tx._scX;
      t2 = tx._shY;
      this._scX = t1 * m0 + t2 * m1;
      t1 = tx._shX;
      t3 = tx._scY;
      this._shX = t1 * m0 + t3 * m1;
      t1 = this._tX;
      t4 = tx._tX;
      t5 = tx._tY;
      this._tX = t1 + (t4 * m0 + t5 * m1);
      m0 = this._shY;
      m1 = this._scY;
      this._shY = tx._scX * m0 + t2 * m1;
      this._scY = tx._shX * m0 + t3 * m1;
      this._tY = this._tY + (tx._tX * m0 + t5 * m1);
      return this;
    },
    translate$2: function(_, dx, dy) {
      this._tX = this._tX + (dx * this._scX + dy * this._shX);
      this._tY = this._tY + (dx * this._shY + dy * this._scY);
      return this;
    },
    setToRotation$3: function(theta, x, y) {
      var cos, sin;
      cos = Math.cos(theta);
      sin = Math.sin(theta);
      return this.setTransform$6(cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos);
    },
    setTransform$6: function(m00, m10, m01, m11, m02, m12) {
      this._scX = m00;
      this._shY = m10;
      this._shX = m01;
      this._scY = m11;
      this._tX = m02;
      this._tY = m12;
      return this;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this._scX === other.get$_scX() && this._shX === other.get$_shX() && this._tX === other.get$_tX() && this._shY === other.get$_shY() && this._scY === other.get$_scY() && this._tY === other.get$_tY();
    },
    get$hashCode: function(_) {
      return 0;
    },
    toString$0: function(_) {
      return C.JSArray_methods.join$1([this._scX, this._shY, this._shX, this._scY, this._tX, this._tY], ", ");
    },
    static: {AffineTransform$: function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
        return new X.AffineTransform(scaleX, shearY, shearX, scaleY, translateX, translateY);
      }}
  },
  Box: {
    "": "Rectangle;left,top,width,height",
    $asRectangle: null
  },
  Coordinate: {
    "": "Point;x,y",
    $sub: function(_, other) {
      return X.Coordinate_difference(this, other);
    },
    $add: function(_, other) {
      var t1 = J.getInterceptor$x(other);
      t1 = new X.Coordinate(J.$add$ns(this.x, t1.get$x(other)), J.$add$ns(this.y, t1.get$y(other)));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asPoint: null,
    static: {Coordinate_difference: function(a, b) {
        var t1 = J.getInterceptor$x(b);
        t1 = new X.Vector(J.$sub$n(a.x, t1.get$x(b)), J.$sub$n(a.y, t1.get$y(b)));
        H.setRuntimeTypeInfo(t1, [null]);
        return t1;
      }}
  },
  Vector: {
    "": "Coordinate;x,y",
    $add: function(_, other) {
      var t1 = J.getInterceptor$x(other);
      t1 = new X.Vector(J.$add$ns(this.x, t1.get$x(other)), J.$add$ns(this.y, t1.get$y(other)));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $mul: function(_, magnitude) {
      return this.scale$1(this, magnitude);
    },
    scale$1: function(_, magnitude) {
      var t1 = new X.Vector(J.$mul$n(this.x, magnitude), J.$mul$n(this.y, magnitude));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    rotate$1: function(_, angle) {
      var cos, sin, t1, t2, t3, t4;
      cos = Math.cos(angle);
      sin = Math.sin(angle);
      t1 = this.x;
      t2 = J.getInterceptor$n(t1);
      t3 = this.y;
      t4 = J.getInterceptor$n(t3);
      t1 = new X.Vector(J.$sub$n(t2.$mul(t1, cos), t4.$mul(t3, sin)), J.$add$ns(t4.$mul(t3, cos), t2.$mul(t1, sin)));
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    $asCoordinate: null,
    $asPoint: null
  },
  StringLineReader: {
    "": "Object;source,_bot$_position",
    readToEnd$0: function() {
      var t1, t2, t3, value;
      t1 = this._bot$_position;
      if (t1 == null)
        return;
      t2 = this.source;
      t3 = J.getInterceptor$asx(t2);
      value = t3.substring$2(t2, t1, t3.get$length(t2));
      this._bot$_position = null;
      return value;
    },
    _peekOrReadNextLine$1: function(updatePosition) {
      var t1, t2, t3, nextLF, value, isWinNL;
      t1 = this._bot$_position;
      if (t1 == null)
        return;
      t2 = this.source;
      t3 = J.getInterceptor$asx(t2);
      nextLF = t3.indexOf$2(t2, "\n", t1);
      if (nextLF < 0) {
        value = t3.substring$2(t2, this._bot$_position, t3.get$length(t2));
        if (updatePosition)
          this._bot$_position = null;
        return value;
      }
      isWinNL = nextLF > 0 && t3.substring$2(t2, nextLF - 1, nextLF) === "\r";
      t1 = this._bot$_position;
      value = isWinNL ? t3.substring$2(t2, t1, nextLF - 1) : t3.substring$2(t2, t1, nextLF);
      if (updatePosition)
        this._bot$_position = nextLF + 1;
      return value;
    }
  },
  _StringLineIterator: {
    "": "Iterator;_reader,_bot$_current",
    get$current: function() {
      return this._bot$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      var t1 = this._reader._peekOrReadNextLine$1(true);
      this._bot$_current = t1;
      return t1 != null;
    },
    $asIterator: function() {
      return [J.JSString];
    }
  },
  Tuple: {
    "": "Object;item1<,item2<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.item1 === other.get$item1() && this.item2 === other.get$item2();
    },
    toString$0: function(_) {
      return "{item1: " + H.S(this.item1) + ", item2: " + H.S(this.item2) + "}";
    },
    get$hashCode: function(_) {
      return X.Util_getHashCode([this.item1, this.item2]);
    }
  },
  Tuple3: {
    "": "Tuple;item3<,item1,item2",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.item1 === other.get$item1() && this.item2 === other.get$item2() && this.item3 === other.get$item3();
    },
    toString$0: function(_) {
      return "{item1: " + H.S(this.item1) + ", item2: " + H.S(this.item2) + ", item3: " + this.item3 + "}";
    },
    get$hashCode: function(_) {
      return X.Util_getHashCode([this.item1, this.item2, this.item3]);
    },
    $asTuple: function(T1, T2, T3) {
      return [T1, T2];
    }
  },
  Util_splitLines_closure: {
    "": "Closure;",
    call$1: function(v) {
      Y._metaRequireArgumentNotNullOrEmpty("source");
      if (v == null)
        H.throwExpression(Q.NullArgumentError$("source"));
      return new X._StringLineIterator(new X.StringLineReader(v, 0), null);
    },
    $isFunction: true,
    $is_args1: true
  },
  getDelayedResult_closure: {
    "": "Closure;",
    call$1: function(value) {
      return X.getDelayedResult(value);
    },
    $isFunction: true,
    $is_args1: true
  }
}],
["bot.errors", "package:bot/src/bot/errors.dart", , Q, {
  DetailedArgumentError: {
    "": "ArgumentError;argument,details,message",
    get$message: function(_) {
      return "Illegal argument: \"" + this.argument + "\" -- " + this.details;
    },
    toString$0: function(_) {
      return "Illegal argument: \"" + this.argument + "\" -- " + this.details;
    },
    DetailedArgumentError$2: function(argument, details) {
      var t1;
      if (this.argument.length === 0)
        throw H.wrapException(Q.InvalidOperationError$("That's just sad. Give me a valid argument"));
      t1 = this.details;
      if (t1 == null || t1.length === 0)
        throw H.wrapException(Q.InvalidOperationError$("That's just sad. I need details!"));
    },
    static: {DetailedArgumentError$: function(argument, details) {
        var t1 = new Q.DetailedArgumentError(argument, details, null);
        t1.DetailedArgumentError$2(argument, details);
        return t1;
      }}
  },
  InvalidOperationError: {
    "": "Object;message>",
    $isInvalidOperationError: true,
    static: {InvalidOperationError$: function(message) {
        return new Q.InvalidOperationError(message);
      }}
  },
  NullArgumentError: {
    "": "DetailedArgumentError;argument,details,message",
    $isNullArgumentError: true,
    static: {NullArgumentError$: function(argument) {
        var t1 = new Q.NullArgumentError(argument, "cannot be null", null);
        t1.DetailedArgumentError$2(argument, "cannot be null");
        return t1;
      }}
  }
}],
["bot.expand_stream", "package:bot/src/bot/expand_stream.dart", , N, {
  expandStream: function(source, convert, onDone) {
    var controller, t1, t2, obj;
    controller = P.StreamController_StreamController(null, null, null, null, false, null);
    t1 = P._Future$(null);
    t2 = new P._AsyncCompleter(t1);
    H.setRuntimeTypeInfo(t2, [null]);
    obj = new N._StreamForEachAsync(new N.expandStream_closure(convert, controller), P._StreamIteratorImpl$(source, null), t2);
    H.setRuntimeTypeInfo(obj, [null]);
    obj._moveNext$0();
    t1.then$1(new N.expandStream_closure0(onDone, controller)).then$1(new N.expandStream_closure1(controller));
    t1 = new P._ControllerStream(controller);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  expandStream_closure: {
    "": "Closure;convert_0,controller_1",
    call$1: function(item) {
      return this.controller_1.addStream$1(this.convert_0.call$1(item));
    },
    $isFunction: true,
    $is_args1: true
  },
  expandStream_closure0: {
    "": "Closure;onDone_2,controller_3",
    call$1: function(_) {
      var t1 = this.onDone_2;
      if (t1 != null)
        return this.controller_3.addStream$1(t1.call$0());
    },
    $isFunction: true,
    $is_args1: true
  },
  expandStream_closure1: {
    "": "Closure;controller_4",
    call$1: function(_) {
      var t1 = this.controller_4;
      return t1.close$0(t1);
    },
    $isFunction: true,
    $is_args1: true
  },
  _StreamForEachAsync: {
    "": "Object;_action,_expand_stream$_iterator,_completer",
    _action$1: function(arg0) {
      return this._action.call$1(arg0);
    },
    _moveNext$0: function() {
      this._expand_stream$_iterator.moveNext$0().then$2$onError(new N._StreamForEachAsync__moveNext_closure(this), new N._StreamForEachAsync__moveNext_closure0(this));
    }
  },
  _StreamForEachAsync__moveNext_closure: {
    "": "Closure;this_0",
    call$1: function(hasNext) {
      var t1;
      if (hasNext !== true) {
        t1 = this.this_0._completer.future;
        if (t1._state !== 0)
          H.throwExpression(new P.StateError("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      t1 = this.this_0;
      P.Future_Future(new N._StreamForEachAsync__moveNext__closure(t1), null).then$1(new N._StreamForEachAsync__moveNext__closure0(t1)).catchError$1(new N._StreamForEachAsync__moveNext__closure1(t1));
    },
    $isFunction: true,
    $is_args1: true
  },
  _StreamForEachAsync__moveNext__closure: {
    "": "Closure;this_1",
    call$0: function() {
      var t1 = this.this_1;
      return t1._action$1(t1._expand_stream$_iterator._async$_current);
    },
    $isFunction: true,
    $is_void_: true
  },
  _StreamForEachAsync__moveNext__closure0: {
    "": "Closure;this_2",
    call$1: function(_) {
      return this.this_2._moveNext$0();
    },
    $isFunction: true,
    $is_args1: true
  },
  _StreamForEachAsync__moveNext__closure1: {
    "": "Closure;this_3",
    call$2: function(error, stackTrace) {
      var t1 = this.this_3;
      P.Future_Future(t1._expand_stream$_iterator.get$cancel(), null).then$1(new N._StreamForEachAsync__moveNext___closure(t1, error, stackTrace));
    },
    $isFunction: true,
    $is_args2: true
  },
  _StreamForEachAsync__moveNext___closure: {
    "": "Closure;this_4,error_5,stackTrace_6",
    call$1: function(_) {
      return this.this_4._completer.completeError$2(this.error_5, this.stackTrace_6);
    },
    $isFunction: true,
    $is_args1: true
  },
  _StreamForEachAsync__moveNext_closure0: {
    "": "Closure;this_7",
    call$2: function(error, stack) {
      this.this_7._completer.completeError$2(error, stack);
    },
    $isFunction: true,
    $is_args2: true
  }
}],
["bot.graph", "package:bot/src/bot/graph.dart", , M, {
  stronglyConnectedComponents: function(graph) {
    var nodes, t1, t2, t3, t4, tarjan;
    Y._metaRequireArgumentNotNullOrEmpty("graph");
    nodes = M._Graph__Graph(graph, null);
    t1 = new P.Expando("index");
    H.setRuntimeTypeInfo(t1, [J.JSInt]);
    t2 = new P.Expando("link");
    H.setRuntimeTypeInfo(t2, [J.JSInt]);
    t3 = [M._GraphNode, null];
    t4 = new P.ListQueue(null, 0, 0, 0);
    H.setRuntimeTypeInfo(t4, [t3]);
    t4.ListQueue$1(null, t3);
    tarjan = new M._TarjanCycleDetect(t1, t2, t4, P.List_List(null, [J.JSArray, null]), nodes, 0);
    H.setRuntimeTypeInfo(tarjan, [null]);
    return tarjan.calculate$0();
  },
  topologicalSort: function(dependencies) {
    var graph, items, t1, targetCount, t2, t3, zeros;
    Y._metaRequireArgumentNotNullOrEmpty("dependencies");
    if (dependencies == null)
      H.throwExpression(Q.NullArgumentError$("dependencies"));
    graph = M._Graph__Graph(dependencies, null);
    items = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
    t1 = graph._graph$_map;
    targetCount = t1._collection$_length;
    for (; items._collection$_length < targetCount;) {
      t2 = t1.get$values(t1);
      t3 = new H.WhereIterable(t2, new M.topologicalSort_closure(items));
      t3.$builtinTypeInfo = [H.getRuntimeTypeArgument(t2, "IterableBase", 0)];
      t2 = H.MappedIterable_MappedIterable(t3, new M.topologicalSort_closure0(), H.getRuntimeTypeArgument(t3, "IterableBase", 0), null);
      zeros = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
      t2 = zeros.length;
      if (t2 === 0)
        throw H.wrapException(new P.ArgumentError("There is a loop in the map"));
      t2 = new H.ListIterator(zeros, t2, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(zeros, 0)];
      for (; t2.moveNext$0();)
        items.add$1(items, t2._dev$_current);
    }
    return items.toList$0(items);
  },
  _Graph: {
    "": "Object;_graph$_map",
    get$nodes: function(_) {
      var t1 = this._graph$_map;
      return t1.get$values(t1);
    },
    toString$0: function(_) {
      var sb, t1;
      sb = P.StringBuffer$("");
      sb.write$1("{");
      sb.write$1("\n");
      t1 = this._graph$_map;
      t1 = t1.get$values(t1);
      t1.forEach$1(t1, new M._Graph_toString_closure(this, sb));
      sb.write$1("}");
      sb.write$1("\n");
      return sb._contents;
    },
    static: {_Graph__Graph: function(items, $T) {
        var map, t1;
        map = P.LinkedHashMap_LinkedHashMap(null, null, null, $T, [M._GraphNode, $T]);
        items.forEach$1(items, new M._Graph__Graph_closure($T, new M._Graph__Graph_getNode($T, map)));
        t1 = new M._Graph(map);
        H.setRuntimeTypeInfo(t1, [null]);
        return t1;
      }}
  },
  _Graph__Graph_getNode: {
    "": "Closure;T_0,map_1",
    call$1: function(value) {
      return this.map_1.putIfAbsent$2(value, new M._Graph__Graph_getNode_closure(this.T_0, value));
    },
    $isFunction: true,
    $is_args1: true
  },
  _Graph__Graph_getNode_closure: {
    "": "Closure;T_2,value_3",
    call$0: function() {
      var t1, t2;
      t1 = this.T_2;
      t2 = new M._GraphNode(this.value_3, P.LinkedHashSet_LinkedHashSet(null, null, null, [M._GraphNode, t1]));
      H.setRuntimeTypeInfo(t2, [t1]);
      return t2;
    },
    $isFunction: true,
    $is_void_: true
  },
  _Graph__Graph_closure: {
    "": "Closure;T_4,getNode_5",
    call$2: function(item, outLinks) {
      var t1, node, t2, outLink, t3, newItem;
      if (outLinks == null)
        outLinks = [];
      t1 = this.getNode_5;
      node = t1.call$1(item);
      for (t2 = J.get$iterator$ax(outLinks); t2.moveNext$0() === true;) {
        outLink = t2.get$current();
        t3 = node.get$outNodes();
        newItem = t3.add$1(t3, t1.call$1(outLink));
        if (!newItem)
          H.throwExpression(Q.DetailedArgumentError$("items", "Outlinks must not contain dupes"));
      }
    },
    $isFunction: true,
    $is_args2: true
  },
  _Graph_toString_closure: {
    "": "Closure;this_0,sb_1",
    call$1: function(value) {
      var t1, outNodeStr;
      t1 = value.get$outNodes();
      t1 = H.MappedIterable_MappedIterable(t1, new M._Graph_toString__closure(), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
      outNodeStr = t1.join$1(t1, ", ");
      t1 = this.sb_1;
      t1.write$1("  " + H.S(J.get$value$x(value)) + " => {" + outNodeStr + "}");
      t1.write$1("\n");
    },
    $isFunction: true,
    $is_args1: true
  },
  _Graph_toString__closure: {
    "": "Closure;",
    call$1: function(gn) {
      return J.get$value$x(gn);
    },
    $isFunction: true,
    $is_args1: true
  },
  _GraphNode: {
    "": "Object;value>,outNodes<",
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = H.checkSubtype(other, "$is_GraphNode", [H.getTypeArgumentByIndex(this, 0)], null);
      return t1 && J.$eq(J.get$value$x(other), this.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    $is_GraphNode: true
  },
  _TarjanCycleDetect: {
    "": "Object;_indexExpando,_linkExpando,_stack,_scc,_graph$_list,_graph$_index",
    calculate$0: function() {
      var t1, t2, node, values, value;
      for (t1 = this._graph$_list._graph$_map, t1 = t1.get$values(t1), t2 = t1._iterable, t2 = new H.MappedIterator(null, t2.get$iterator(t2), t1._f), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]), t1 = this._indexExpando; t2.moveNext$0();) {
        node = t2._dev$_current;
        values = H.Primitives_getProperty(node, "expando$values");
        value = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
        if (J.$eq(value == null ? -1 : value, -1))
          this._tarjan$1(node);
      }
      return this._scc;
    },
    _tarjan$1: function(v) {
      var t1, t2, t3, t4, t5, t6, n, values, value, component;
      t1 = this._indexExpando;
      t1.$indexSet(t1, v, this._graph$_index);
      t2 = this._linkExpando;
      t2.$indexSet(t2, v, this._graph$_index);
      this._graph$_index = this._graph$_index + 1;
      t3 = this._stack;
      t4 = t3._head;
      t5 = t3._table;
      t6 = t5.length;
      t4 = (t4 - 1 & t6 - 1) >>> 0;
      t3._head = t4;
      if (t4 < 0 || t4 >= t6)
        return H.ioore(t5, t4);
      t5[t4] = v;
      if (t4 === t3._tail)
        t3._grow$0();
      t3._modificationCount = t3._modificationCount + 1;
      t4 = v.get$outNodes();
      t5 = new P.LinkedHashSetIterator(t4, t4._modifications, null, null);
      t5.$builtinTypeInfo = [null];
      t5._cell = t4._first;
      for (; t5.moveNext$0();) {
        n = t5._collection$_current;
        values = H.Primitives_getProperty(n, "expando$values");
        value = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
        if (J.$eq(value == null ? -1 : value, -1)) {
          this._tarjan$1(n);
          values = H.Primitives_getProperty(v, "expando$values");
          t4 = values == null ? null : H.Primitives_getProperty(values, t2._getKey$0());
          values = H.Primitives_getProperty(n, "expando$values");
          t2.$indexSet(t2, v, P.min(t4, values == null ? null : H.Primitives_getProperty(values, t2._getKey$0())));
        } else if (t3.contains$1(t3, n)) {
          values = H.Primitives_getProperty(v, "expando$values");
          t4 = values == null ? null : H.Primitives_getProperty(values, t2._getKey$0());
          values = H.Primitives_getProperty(n, "expando$values");
          value = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
          t2.$indexSet(t2, v, P.min(t4, value == null ? -1 : value));
        }
      }
      values = H.Primitives_getProperty(v, "expando$values");
      t2 = values == null ? null : H.Primitives_getProperty(values, t2._getKey$0());
      values = H.Primitives_getProperty(v, "expando$values");
      value = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
      if (J.$eq(t2, value == null ? -1 : value)) {
        component = P.List_List(null, H.getTypeArgumentByIndex(this, 0));
        do {
          n = t3.removeFirst$0();
          t1 = J.getInterceptor$x(n);
          component.push(t1.get$value(n));
        } while (!t1.$eq(n, v));
        this._scc.push(component);
      }
    }
  },
  topologicalSort_closure: {
    "": "Closure;items_0",
    call$1: function(node) {
      var t1, t2;
      t1 = this.items_0;
      if (!t1.contains$1(t1, J.get$value$x(node))) {
        t2 = node.get$outNodes();
        t1 = new H.WhereIterable(t2, new M.topologicalSort__closure(t1));
        H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "IterableBase", 0)]);
        t1 = !t1.get$iterator(t1).moveNext$0();
      } else
        t1 = false;
      return t1;
    },
    $isFunction: true,
    $is_args1: true
  },
  topologicalSort__closure: {
    "": "Closure;items_1",
    call$1: function(node) {
      var t1 = this.items_1;
      return !t1.contains$1(t1, J.get$value$x(node));
    },
    $isFunction: true,
    $is_args1: true
  },
  topologicalSort_closure0: {
    "": "Closure;",
    call$1: function(node) {
      return J.get$value$x(node);
    },
    $isFunction: true,
    $is_args1: true
  }
}],
["bot.require", "package:bot/src/bot/require.dart", , Y, {
  requireArgument: function(truth, argName, message) {
    if (argName.length === 0)
      H.throwExpression(Q.InvalidOperationError$("That's just sad. Give me a good argName"));
    if (!truth)
      throw H.wrapException(Q.DetailedArgumentError$(argName, message == null || message.length === 0 ? "value was invalid" : message));
  },
  _metaRequireArgumentNotNullOrEmpty: function(argName) {
    if (argName.length === 0)
      throw H.wrapException(Q.InvalidOperationError$("That's just sad. Give me a good argName"));
  }
}],
["bot.throttled_stream", "package:bot/src/bot/throttled_stream.dart", , Y, {
  ThrottledStream: {
    "": "Object;_asyncMethod,_throttled_stream$_controller,_throttled_stream$_source,_sendingSource,_outputValue,_outputFuture,_forceUpdate",
    _asyncMethod$1: function(arg0) {
      return this._asyncMethod.call$1(arg0);
    },
    _tryUpdate$0: function() {
      var t1, t2;
      if ((this._throttled_stream$_controller._state & 4) === 0)
        if (this._outputFuture == null) {
          t1 = this._throttled_stream$_source;
          t2 = this._sendingSource;
          t1 = (t1 == null ? t2 != null : t1 !== t2) || this._forceUpdate;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1) {
        this._sendingSource = this._throttled_stream$_source;
        this._outputFuture = P.Future_Future(new Y.ThrottledStream__tryUpdate_closure(this), null).then$1(new Y.ThrottledStream__tryUpdate_closure0(this)).catchError$1(new Y.ThrottledStream__tryUpdate_closure1(this)).whenComplete$1(new Y.ThrottledStream__tryUpdate_closure2(this));
      }
    }
  },
  ThrottledStream__tryUpdate_closure: {
    "": "Closure;this_0",
    call$0: function() {
      var t1 = this.this_0;
      return t1._asyncMethod$1(t1._sendingSource);
    },
    $isFunction: true,
    $is_void_: true
  },
  ThrottledStream__tryUpdate_closure0: {
    "": "Closure;this_1",
    call$1: function(output) {
      var t1 = this.this_1;
      t1._forceUpdate = false;
      t1._outputValue = output;
      t1 = t1._throttled_stream$_controller;
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(output);
    },
    $isFunction: true,
    $is_args1: true
  },
  ThrottledStream__tryUpdate_closure1: {
    "": "Closure;this_2",
    call$2: function(error, st) {
      var t1 = this.this_2._throttled_stream$_controller;
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendError$2(error, st);
    },
    $isFunction: true,
    $is_args2: true
  },
  ThrottledStream__tryUpdate_closure2: {
    "": "Closure;this_3",
    call$0: function() {
      var t1 = this.this_3;
      t1._outputFuture = null;
      t1._tryUpdate$0();
    },
    $isFunction: true,
    $is_void_: true
  }
}],
["bot_test", "package:bot_test/bot_test.dart", , Y, {
  EventWatcher: {
    "": "Object;_lastArgs,_eventCount",
    handler$1: function(args) {
      this._lastArgs = args;
      this._eventCount = this._eventCount + 1;
    },
    get$handler: function() {
      return new H.BoundClosure$1(this, Y.EventWatcher.prototype.handler$1, null, "handler$1");
    }
  },
  _Finishes: {
    "": "Matcher;_bot_test$_matcher",
    matches$2: function(_, item, matchState) {
      var t1, done;
      t1 = J.getInterceptor(item);
      if (typeof item !== "object" || item === null || !t1.$isFuture)
        return false;
      done = $.get$wrapAsync().call$1(new Y._Finishes_matches_closure());
      item.then$2$onError(new Y._Finishes_matches_closure0(this, done), new Y._Finishes_matches_closure1(done));
      return true;
    },
    describe$1: function(description) {
      description._out = description._out + "completes to a value that ";
      description.addDescriptionOf$1(this._bot_test$_matcher);
      return description;
    }
  },
  _Finishes_matches_closure: {
    "": "Closure;",
    call$1: function(fn) {
      return fn.call$0();
    },
    $isFunction: true,
    $is_args1: true
  },
  _Finishes_matches_closure0: {
    "": "Closure;this_0,done_1",
    call$1: function(value) {
      this.done_1.call$1(new Y._Finishes_matches__closure0(this.this_0, value));
    },
    $isFunction: true,
    $is_args1: true
  },
  _Finishes_matches__closure0: {
    "": "Closure;this_2,value_3",
    call$0: function() {
      O.expect(this.value_3, this.this_2._bot_test$_matcher, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  _Finishes_matches_closure1: {
    "": "Closure;done_4",
    call$2: function(error, stack) {
      this.done_4.call$1(new Y._Finishes_matches__closure(error, stack));
    },
    $isFunction: true,
    $is_args2: true
  },
  _Finishes_matches__closure: {
    "": "Closure;error_5,stack_6",
    call$0: function() {
      N._registerException(N.currentTestCase(), this.error_5, this.stack_6);
      return;
    },
    $isFunction: true,
    $is_void_: true
  },
  _InvalidOperationError: {
    "": "TypeMatcher;_matcher$_name",
    matches$2: function(_, item, matchState) {
      var t1 = J.getInterceptor(item);
      return typeof item === "object" && item !== null && !!t1.$isInvalidOperationError;
    }
  },
  _NullArgumentError: {
    "": "TypeMatcher;_matcher$_name",
    matches$2: function(_, item, matchState) {
      var t1 = J.getInterceptor(item);
      return typeof item === "object" && item !== null && !!t1.$isNullArgumentError;
    }
  }
}],
["dart._collection.dev", "dart:_collection-dev", , H, {
  Arrays_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  },
  Arrays_indexOf: function(a, element, startIndex, endIndex) {
    var t1, i;
    t1 = a.length;
    if (typeof startIndex !== "number")
      return startIndex.$ge();
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < endIndex; ++i) {
      if (i < 0 || i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0();)
      f.call$1(t1._dev$_current);
  },
  IterableMixinWorkaround_any: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0();)
      if (f.call$1(t1._dev$_current) === true)
        return true;
    return false;
  },
  IterableMixinWorkaround_reduce: function(iterable, combine) {
    var iterator, value;
    iterator = new H.ListIterator(iterable, iterable.length, 0, null);
    H.setRuntimeTypeInfo(iterator, [H.getTypeArgumentByIndex(iterable, 0)]);
    if (!iterator.moveNext$0())
      throw H.wrapException(new P.StateError("No elements"));
    value = iterator._dev$_current;
    for (; iterator.moveNext$0();)
      value = combine.call$2(value, iterator._dev$_current);
    return value;
  },
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i)
      if (t1[i] === iterable)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  IterableMixinWorkaround__rangeCheck: function(list, start, end) {
    if (start < 0 || start > list.length)
      throw H.wrapException(P.RangeError$range(start, 0, list.length));
    if (end < start || end > list.length)
      throw H.wrapException(P.RangeError$range(end, start, list.length));
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    if (skipCount + $length > from.length)
      throw H.wrapException(P.StateError$("Not enough elements"));
    H.Arrays_copy(from, skipCount, list, start, $length);
  },
  IterableMixinWorkaround_replaceRangeList: function(list, start, end, iterable) {
    var removeLength, insertEnd, t1, delta, newEnd, newLength;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    removeLength = end - start;
    insertEnd = start + 1;
    t1 = list.length;
    if (removeLength >= 1) {
      delta = removeLength - 1;
      newEnd = t1 - delta;
      t1 = !!list.immutable$list;
      if (t1)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(list, start, insertEnd, iterable, 0);
      if (delta !== 0) {
        if (t1)
          H.throwExpression(P.UnsupportedError$("set range"));
        H.IterableMixinWorkaround_setRangeList(list, insertEnd, newEnd, list, end);
        C.JSArray_methods.set$length(list, newEnd);
      }
    } else {
      newLength = t1 + (1 - removeLength);
      C.JSArray_methods.set$length(list, newLength);
      t1 = !!list.immutable$list;
      if (t1)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(list, insertEnd, newLength, list, end);
      if (t1)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(list, start, insertEnd, iterable, 0);
    }
  },
  IterableMixinWorkaround_insertAllList: function(list, index, iterable) {
    var insertionLength, t1, index0;
    if (index > list.length)
      throw H.wrapException(P.RangeError$range(index, 0, list.length));
    insertionLength = iterable.length;
    C.JSArray_methods.set$length(list, list.length + insertionLength);
    t1 = list.length;
    if (!!list.immutable$list)
      H.throwExpression(P.UnsupportedError$("set range"));
    H.IterableMixinWorkaround_setRangeList(list, index + insertionLength, t1, list, index);
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0(); index = index0) {
      index0 = index + 1;
      C.JSArray_methods.$indexSet(list, index, t1._dev$_current);
    }
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods.$tdiv(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  ListIterable: {
    "": "IterableBase;",
    get$iterator: function(_) {
      var t1 = new H.ListIterator(this, this.get$length(this), 0, null);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      return t1;
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(this, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$first: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.elementAt$1(this, 0);
    },
    get$last: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.elementAt$1(this, this.get$length(this) - 1);
    },
    contains$1: function(_, element) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq(this.elementAt$1(this, i), element))
          return true;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return false;
    },
    join$1: function(_, separator) {
      var $length, first, buffer, i, str;
      $length = this.get$length(this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(this.elementAt$1(this, 0));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
        buffer = P.StringBuffer$(first);
        for (i = 1; i < $length; ++i) {
          buffer._contents = buffer._contents + separator;
          str = this.elementAt$1(this, i);
          str = typeof str === "string" ? str : H.S(str);
          buffer._contents = buffer._contents + str;
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return buffer._contents;
      } else {
        buffer = P.StringBuffer$("");
        for (i = 0; i < $length; ++i) {
          str = this.elementAt$1(this, i);
          str = typeof str === "string" ? str : H.S(str);
          buffer._contents = buffer._contents + str;
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return buffer._contents;
      }
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    map$1: function(_, f) {
      var t1 = new H.MappedListIterable(this, f);
      H.setRuntimeTypeInfo(t1, [null, null]);
      return t1;
    },
    reduce$1: function(_, combine) {
      var value, i;
      if (this.get$length(this) === 0)
        throw H.wrapException(new P.StateError("No elements"));
      value = this.elementAt$1(this, 0);
      for (i = 1; i < this.get$length(this); ++i)
        value = combine.call$2(value, this.elementAt$1(this, i));
      return value;
    },
    fold$2: function(_, initialValue, combine) {
      var $length, value, i;
      $length = this.get$length(this);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.elementAt$1(this, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return value;
    },
    toList$1$growable: function(_, growable) {
      var result, i, t1;
      if (growable) {
        result = P.List_List(null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        result = Array(this.get$length(this));
        result.fixed$length = init;
        H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      }
      for (i = 0; i < this.get$length(this); ++i) {
        t1 = this.elementAt$1(this, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $asIterableBase: null,
    $asIterable: null,
    $isEfficientLength: true
  },
  SubListIterable: {
    "": "ListIterable;_iterable,_start,_endOrLength",
    get$_endIndex: function() {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return t1.$gt();
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2, t3;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$ge();
        t3 = t2 >= $length;
      } else
        t3 = true;
      if (t3)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var realIndex, t1;
      realIndex = this.get$_startIndex() + index;
      if (index >= 0) {
        t1 = this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1, t2;
      t1 = this._start;
      if (t1 < 0)
        throw H.wrapException(P.RangeError$value(t1));
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t2 < 0)
          throw H.wrapException(P.RangeError$value(t2));
        if (t1 > t2)
          throw H.wrapException(P.RangeError$range(t1, 0, t2));
      }
    },
    $asListIterable: null,
    $asIterable: null,
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = new H.SubListIterable(_iterable, _start, _endOrLength);
        H.setRuntimeTypeInfo(t1, [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "": "Object;_iterable,_dev$_length,_index,_dev$_current",
    get$current: function() {
      return this._dev$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this._dev$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._dev$_current = null;
        return false;
      }
      this._dev$_current = t2.elementAt$1(t1, t3);
      this._index = this._index + 1;
      return true;
    }
  },
  MappedIterable: {
    "": "IterableBase;_iterable,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.MappedIterator(null, t1.get$iterator(t1), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      var t1 = this._iterable;
      return t1.get$length(t1);
    },
    get$isEmpty: function(_) {
      var t1 = this._iterable;
      return t1.get$isEmpty(t1);
    },
    get$first: function(_) {
      var t1 = this._iterable;
      return this._f$1(t1.get$first(t1));
    },
    get$last: function(_) {
      var t1 = this._iterable;
      return this._f$1(t1.get$last(t1));
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        var t1;
        if (!!iterable.$isEfficientLength) {
          t1 = new H.EfficientLengthMappedIterable(iterable, $function);
          H.setRuntimeTypeInfo(t1, [$S, $T]);
          return t1;
        }
        t1 = new H.MappedIterable(iterable, $function);
        H.setRuntimeTypeInfo(t1, [$S, $T]);
        return t1;
      }}
  },
  EfficientLengthMappedIterable: {
    "": "MappedIterable;_iterable,_f",
    $asMappedIterable: null,
    $asIterable: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  MappedIterator: {
    "": "Iterator;_dev$_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0() === true) {
        this._dev$_current = this._f$1(t1.get$current());
        return true;
      }
      this._dev$_current = null;
      return false;
    },
    get$current: function() {
      return this._dev$_current;
    },
    "+current": 0,
    $asIterator: function($S, $T) {
      return [$T];
    }
  },
  MappedListIterable: {
    "": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asIterableBase: null,
    $asIterable: null
  },
  WhereIterator: {
    "": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0() === true;)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    },
    "+current": 0,
    $asIterator: null
  },
  ExpandIterable: {
    "": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  },
  ExpandIterator: {
    "": "Object;_iterator,_f,_currentExpansion,_dev$_current",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$current: function() {
      return this._dev$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      if (this._currentExpansion == null)
        return false;
      for (var t1 = this._iterator; this._currentExpansion.moveNext$0() !== true;) {
        this._dev$_current = null;
        if (t1.moveNext$0() === true) {
          this._currentExpansion = null;
          this._currentExpansion = J.get$iterator$ax(this._f$1(t1.get$current()));
        } else
          return false;
      }
      this._dev$_current = this._currentExpansion.get$current();
      return true;
    }
  },
  TakeWhileIterable: {
    "": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.TakeWhileIterator(J.get$iterator$ax(this._iterable), this._f, false);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asIterableBase: null,
    $asIterable: null
  },
  TakeWhileIterator: {
    "": "Iterator;_iterator,_f,_isFinished",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      if (this._isFinished)
        return false;
      var t1 = this._iterator;
      if (t1.moveNext$0() !== true || this._f$1(t1.get$current()) !== true) {
        this._isFinished = true;
        return false;
      }
      return true;
    },
    get$current: function() {
      if (this._isFinished)
        return;
      return this._iterator.get$current();
    },
    "+current": 0,
    $asIterator: null
  },
  SkipWhileIterable: {
    "": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.SkipWhileIterator(J.get$iterator$ax(this._iterable), this._f, false);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asIterableBase: null,
    $asIterable: null
  },
  SkipWhileIterator: {
    "": "Iterator;_iterator,_f,_hasSkipped",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      if (!this._hasSkipped) {
        this._hasSkipped = true;
        for (var t1 = this._iterator; t1.moveNext$0() === true;)
          if (this._f$1(t1.get$current()) !== true)
            return true;
      }
      return this._iterator.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    },
    "+current": 0,
    $asIterator: null
  },
  EmptyIterator: {
    "": "Object;",
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    },
    "+current": 0
  },
  FixedLengthListMixin: {
    "": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  },
  UnmodifiableListMixin: {
    "": "Object;",
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  UnmodifiableListBase: {
    "": "ListBase+UnmodifiableListMixin;",
    $asListBase: null,
    $asList: null,
    $asIterable: null,
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true
  },
  ReversedListIterable: {
    "": "ListIterable;_source",
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1, t2;
      t1 = this._source;
      t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    },
    $asListIterable: null,
    $asIterable: null
  },
  Symbol: {
    "": "Object;_name<",
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$isSymbol && J.$eq(this._name, other._name);
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 536870911 & 664597 * t1;
    },
    toString$0: function(_) {
      return "Symbol(\"" + H.S(this._name) + "\")";
    },
    $isSymbol: true,
    $isSymbol0: true,
    static: {"": "Symbol_validationPattern"}
  }
}],
["dart._js_mirrors", "dart:_js_mirrors", , H, {
  s: function($name) {
    if ($name == null)
      return;
    return new H.Symbol($name);
  },
  reflect: function(reflectee) {
    var t1 = J.getInterceptor(reflectee);
    if (typeof reflectee === "object" && reflectee !== null && !!t1.$isClosure)
      return new H.JsClosureMirror(reflectee);
    else
      return new H.JsInstanceMirror(reflectee);
  },
  reflectClassByMangledName: function(mangledName) {
    var t1, unmangledName;
    t1 = $.get$mangledGlobalNames();
    unmangledName = t1.$index(t1, mangledName);
    if (J.$eq(mangledName, "dynamic"))
      return $.get$JsMirrorSystem__dynamicType();
    return H.reflectClassByName(H.s(unmangledName == null ? mangledName : unmangledName), mangledName);
  },
  reflectClassByName: function(symbol, mangledName) {
    var t1, mirror, typeArgIndex, t2, constructorOrInterceptor, index, $constructor, descriptor, fields, fieldsMetadata, mixins, classMirror, typeVariables, typeArguments, i;
    t1 = $.classMirrors;
    if (t1 == null) {
      t1 = H.JsCache_allocate();
      $.classMirrors = t1;
    }
    mirror = t1[mangledName];
    if (mirror != null)
      return mirror;
    t1 = J.getInterceptor$asx(mangledName);
    typeArgIndex = t1.indexOf$1(mangledName, "<");
    if (typeArgIndex !== -1) {
      t2 = H.reflectClassByMangledName(t1.substring$2(mangledName, 0, typeArgIndex)).get$originalDeclaration();
      mirror = new H.JsTypeBoundClassMirror(t2, t1.substring$2(mangledName, typeArgIndex + 1, J.$sub$n(t1.get$length(mangledName), 1)), null, null, null, null, null, null, null, null, null, null, null, t2.get$simpleName());
      $.classMirrors[mangledName] = mirror;
      return mirror;
    }
    constructorOrInterceptor = H.Primitives_getConstructorOrInterceptor(mangledName);
    if (constructorOrInterceptor == null) {
      index = init.functionAliases[mangledName];
      if (index != null) {
        mirror = new H.JsTypedefMirror(mangledName, null, symbol);
        mirror.referent = new H.JsFunctionTypeMirror(init.metadata[index], null, null, null, mirror);
        $.classMirrors[mangledName] = mirror;
        return mirror;
      }
      throw H.wrapException(P.UnsupportedError$("Cannot find class for: " + H.S(symbol._name)));
    }
    t1 = J.getInterceptor(constructorOrInterceptor);
    $constructor = typeof constructorOrInterceptor === "object" && constructorOrInterceptor !== null && !!t1.$isInterceptor ? constructorOrInterceptor.constructor : constructorOrInterceptor;
    descriptor = $constructor["@"];
    if (descriptor == null) {
      fields = null;
      fieldsMetadata = null;
    } else {
      fields = descriptor[""];
      t1 = J.getInterceptor$asx(fields);
      if (typeof fields === "object" && fields !== null && (fields.constructor === Array || !!t1.$isList)) {
        t2 = t1.getRange$2(fields, 1, t1.get$length(fields));
        fieldsMetadata = t2.toList$0(t2);
        fields = t1.$index(fields, 0);
      } else
        fieldsMetadata = null;
      if (typeof fields !== "string")
        fields = "";
    }
    t1 = J.split$1$s(fields, ";");
    if (0 >= t1.length)
      return H.ioore(t1, 0);
    mixins = J.split$1$s(t1[0], "+");
    if (mixins.length > 1) {
      t1 = $.get$mangledGlobalNames();
      t1 = t1.$index(t1, mangledName) == null;
    } else
      t1 = false;
    if (t1)
      mirror = H.reflectMixinApplication(mixins, mangledName);
    else {
      classMirror = new H.JsClassMirror(mangledName, constructorOrInterceptor, fields, fieldsMetadata, H.JsCache_allocate(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, symbol);
      typeVariables = $constructor.prototype["<>"];
      if (typeVariables == null || typeVariables.length === 0)
        mirror = classMirror;
      else {
        for (t1 = typeVariables.length, typeArguments = "dynamic", i = 1; i < t1; ++i)
          typeArguments += ",dynamic";
        mirror = new H.JsTypeBoundClassMirror(classMirror, typeArguments, null, null, null, null, null, null, null, null, null, null, null, classMirror.simpleName);
      }
    }
    $.classMirrors[mangledName] = mirror;
    return mirror;
  },
  filterConstructors: function(methods) {
    var result, t1, method;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = new H.ListIterator(methods, methods.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(methods, 0)]); t1.moveNext$0();) {
      method = t1._dev$_current;
      if (method.get$isConstructor())
        result.$indexSet(result, method.get$simpleName(), method);
    }
    return result;
  },
  filterMembers: function(methods, variables) {
    var result, t1, method, $name, t2, t3;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    result.addAll$1(result, variables);
    for (t1 = new H.ListIterator(methods, methods.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(methods, 0)]); t1.moveNext$0();) {
      method = t1._dev$_current;
      if (method.get$isSetter()) {
        $name = method.get$simpleName()._name;
        t2 = J.getInterceptor$asx($name);
        t2 = result.$index(result, H.s(t2.substring$2($name, 0, J.$sub$n(t2.get$length($name), 1))));
        t3 = J.getInterceptor(t2);
        if (typeof t2 === "object" && t2 !== null && !!t3.$isVariableMirror)
          continue;
      }
      if (method.get$isConstructor())
        continue;
      result.putIfAbsent$2(method.get$simpleName(), new H.filterMembers_closure(method));
    }
    return result;
  },
  reflectMixinApplication: function(mixinNames, mangledName) {
    var mixins, t1, it, superclass;
    mixins = [];
    for (t1 = new H.ListIterator(mixinNames, mixinNames.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(mixinNames, 0)]); t1.moveNext$0();)
      mixins.push(H.reflectClassByMangledName(t1._dev$_current));
    it = new H.ListIterator(mixins, mixins.length, 0, null);
    H.setRuntimeTypeInfo(it, [H.getTypeArgumentByIndex(mixins, 0)]);
    it.moveNext$0();
    superclass = it._dev$_current;
    for (; it.moveNext$0();)
      superclass = new H.JsMixinApplication(superclass, it._dev$_current, null, H.s(mangledName));
    return superclass;
  },
  computeQualifiedName: function(owner, simpleName) {
    if (owner == null)
      return simpleName;
    return H.s(H.S(owner.get$qualifiedName()._name) + "." + H.S(simpleName._name));
  },
  parseCompactFieldSpecification: function(owner, fieldSpecification, isStatic, result) {
    var t1, fields, fieldsMetadata, t2, fieldNumber, field, fieldNumber0, metadata, mirror;
    t1 = J.getInterceptor$asx(fieldSpecification);
    if (typeof fieldSpecification === "object" && fieldSpecification !== null && (fieldSpecification.constructor === Array || !!t1.$isList)) {
      fields = H.splitFields(t1.$index(fieldSpecification, 0), ",");
      fieldsMetadata = t1.sublist$1(fieldSpecification, 1);
    } else {
      fields = typeof fieldSpecification === "string" ? H.splitFields(fieldSpecification, ",") : [];
      fieldsMetadata = null;
    }
    for (t1 = new H.ListIterator(fields, fields.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(fields, 0)]), t2 = fieldsMetadata != null, fieldNumber = 0; t1.moveNext$0();) {
      field = t1._dev$_current;
      if (t2) {
        fieldNumber0 = fieldNumber + 1;
        if (fieldNumber >= fieldsMetadata.length)
          return H.ioore(fieldsMetadata, fieldNumber);
        metadata = fieldsMetadata[fieldNumber];
        fieldNumber = fieldNumber0;
      } else
        metadata = null;
      mirror = H.JsVariableMirror_JsVariableMirror$from(field, metadata, owner, isStatic);
      if (mirror != null)
        result.push(mirror);
    }
  },
  splitFields: function(string, pattern) {
    var t1 = J.getInterceptor$asx(string);
    if (t1.get$isEmpty(string) === true) {
      t1 = [];
      H.setRuntimeTypeInfo(t1, [J.JSString]);
      return t1;
    }
    return t1.split$1(string, pattern);
  },
  isOperatorName: function($name) {
    switch ($name) {
      case "==":
      case "[]":
      case "*":
      case "/":
      case "%":
      case "~/":
      case "+":
      case "<<":
      case ">>":
      case ">=":
      case ">":
      case "<=":
      case "<":
      case "&":
      case "^":
      case "|":
      case "-":
      case "unary-":
      case "[]=":
      case "~":
        return true;
      default:
        return false;
    }
  },
  isReflectiveDataInPrototype: function(key) {
    var t1, firstChar;
    t1 = J.getInterceptor(key);
    if (t1.$eq(key, "") || t1.$eq(key, "$methodsWithOptionalArguments"))
      return true;
    firstChar = t1.$index(key, 0);
    t1 = J.getInterceptor(firstChar);
    return t1.$eq(firstChar, "*") || t1.$eq(firstChar, "+");
  },
  JsMirrorSystem: {
    "": "Object;_cachedLibraries,isolate",
    get$libraries: function() {
      var t1, result, t2, library;
      t1 = this._cachedLibraries;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = $.get$JsMirrorSystem_librariesByName(), t1 = t1.get$values(t1), t2 = t1._iterable, t2 = new H.MappedIterator(null, t2.get$iterator(t2), t1._f), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t2.moveNext$0();)
        for (t1 = J.get$iterator$ax(t2._dev$_current); t1.moveNext$0() === true;) {
          library = t1.get$current();
          result.$indexSet(result, library.get$uri(), library);
        }
      t1 = new H.UnmodifiableMapView(result);
      H.setRuntimeTypeInfo(t1, [P.Uri, P.LibraryMirror]);
      this._cachedLibraries = t1;
      return t1;
    },
    static: {"": "JsMirrorSystem__dynamicType,JsMirrorSystem__voidType,JsMirrorSystem_librariesByName", JsMirrorSystem_computeLibrariesByName: function() {
        var result, jsLibraries, t1, data, t2, $name, t3, uri, classes, functions, metadataFunction, fields, isRoot, globalObject, metadata;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, [J.JSArray, P.LibraryMirror]);
        jsLibraries = init.libraries;
        if (jsLibraries == null)
          return result;
        for (t1 = new H.ListIterator(jsLibraries, jsLibraries.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(jsLibraries, 0)]); t1.moveNext$0();) {
          data = t1._dev$_current;
          t2 = J.getInterceptor$asx(data);
          $name = t2.$index(data, 0);
          t3 = t2.$index(data, 1);
          uri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t3));
          classes = t2.$index(data, 2);
          functions = t2.$index(data, 3);
          metadataFunction = t2.$index(data, 4);
          fields = t2.$index(data, 5);
          isRoot = t2.$index(data, 6);
          globalObject = t2.$index(data, 7);
          metadata = metadataFunction == null ? C.List_empty : metadataFunction();
          J.add$1$ax(result.putIfAbsent$2($name, new H.JsMirrorSystem_computeLibrariesByName_closure()), new H.JsLibraryMirror(uri, classes, functions, metadata, fields, isRoot, globalObject, null, null, null, null, null, null, null, null, null, null, H.s($name)));
        }
        return result;
      }}
  },
  JsMirrorSystem_computeLibrariesByName_closure: {
    "": "Closure;",
    call$0: function() {
      var t1 = [];
      H.setRuntimeTypeInfo(t1, [P.LibraryMirror]);
      return t1;
    },
    $isFunction: true,
    $is_void_: true
  },
  JsMirror: {
    "": "Object;",
    toString$0: function(_) {
      return this.get$_prettyName();
    },
    _getField$1: function(receiver) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    $isMirror: true
  },
  JsIsolateMirror: {
    "": "JsMirror;_isolateContext",
    get$_prettyName: function() {
      return "Isolate";
    },
    $isMirror: true
  },
  JsDeclarationMirror: {
    "": "JsMirror;simpleName<",
    get$qualifiedName: function() {
      return H.computeQualifiedName(this.get$owner(), this.get$simpleName());
    },
    toString$0: function(_) {
      return this.get$_prettyName() + " on '" + H.S(this.get$simpleName()._name) + "'";
    },
    get$location: function(_) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsTypeVariableMirror: {
    "": "JsTypeMirror;owner<,_typeVariable,_cachedUpperBound,simpleName",
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other === "object" && other !== null && !!t1.$isJsTypeVariableMirror)
        if (J.$eq(this.simpleName, other.simpleName)) {
          t1 = this.owner;
          t1 = t1.$eq(t1, other.owner);
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(C.Type_AGr._typeName);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.owner;
      return (1073741823 & t1 ^ 17 * J.get$hashCode$(this.simpleName) ^ 19 * t2.get$hashCode(t2)) >>> 0;
    },
    get$_prettyName: function() {
      return "TypeVariableMirror";
    },
    $isJsTypeVariableMirror: true,
    $isTypeVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsTypeMirror: {
    "": "JsDeclarationMirror;simpleName",
    get$_prettyName: function() {
      return "TypeMirror";
    },
    get$owner: function() {
      return;
    },
    get$typeVariables: function() {
      return C.List_empty0;
    },
    get$originalDeclaration: function() {
      return this;
    },
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsLibraryMirror: {
    "": "JsDeclarationMirror_JsObjectMirror;uri<,_classes,_functions,_metadata,_compactFieldSpecification,_isRoot,_globalObject<,_cachedFunctionMirrors,_cachedFields,_cachedClasses,_cachedFunctions,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,simpleName",
    get$_prettyName: function() {
      return "LibraryMirror";
    },
    get$qualifiedName: function() {
      return this.simpleName;
    },
    get$_methods: function() {
      return this.get$_functionMirrors();
    },
    get$classes: function(_) {
      var t1, result, cls, t2;
      t1 = this._cachedClasses;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = J.get$iterator$ax(this._classes); t1.moveNext$0() === true;) {
        cls = H.reflectClassByMangledName(t1.get$current());
        t2 = J.getInterceptor(cls);
        if (typeof cls === "object" && cls !== null && !!t2.$isClassMirror) {
          cls = cls.get$originalDeclaration();
          if (!!cls.$isJsClassMirror) {
            result.$indexSet(result, cls.simpleName, cls);
            cls._owner = this;
          }
        }
      }
      t1 = new H.UnmodifiableMapView(result);
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.ClassMirror]);
      this._cachedClasses = t1;
      return t1;
    },
    getField$1: function(fieldName) {
      var t1, mirror;
      t1 = this.get$members().__js_mirrors$_source;
      mirror = t1.$index(t1, fieldName);
      if (mirror == null)
        throw H.wrapException(P.NoSuchMethodError$(this, fieldName, [], null, null));
      return H.reflect(mirror._getField$1(this));
    },
    get$_functionMirrors: function() {
      var t1, result, t2, t3, i, t4, $name, jsFunction, unmangledName, isConstructor, mirror;
      t1 = this._cachedFunctionMirrors;
      if (t1 != null)
        return t1;
      result = P.List_List(null, H.JsMethodMirror);
      t1 = this._functions;
      t2 = J.getInterceptor$asx(t1);
      t3 = this._globalObject;
      i = 0;
      while (true) {
        t4 = t2.get$length(t1);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        c$0: {
          $name = t2.$index(t1, i);
          jsFunction = t3[$name];
          t4 = $.get$mangledGlobalNames();
          unmangledName = t4.$index(t4, $name);
          if (unmangledName == null)
            break c$0;
          t4 = J.getInterceptor$s(unmangledName);
          isConstructor = t4.startsWith$1(unmangledName, "new ");
          if (isConstructor) {
            t4 = t4.substring$1(unmangledName, 4);
            unmangledName = H.stringReplaceAllUnchecked(t4, "$", ".");
          }
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
          result.push(mirror);
          mirror._owner = this;
        }
        ++i;
      }
      this._cachedFunctionMirrors = result;
      return result;
    },
    get$_fields: function() {
      var t1, result;
      t1 = this._cachedFields;
      if (t1 != null)
        return t1;
      result = [];
      H.setRuntimeTypeInfo(result, [P.VariableMirror]);
      H.parseCompactFieldSpecification(this, this._compactFieldSpecification, true, result);
      this._cachedFields = result;
      return result;
    },
    get$functions: function() {
      var t1, result, t2, mirror;
      t1 = this._cachedFunctions;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = this.get$_functionMirrors(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]); t2.moveNext$0();) {
        mirror = t2._dev$_current;
        if (!mirror.get$isConstructor())
          result.$indexSet(result, mirror.get$simpleName(), mirror);
      }
      t1 = new H.UnmodifiableMapView(result);
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.MethodMirror]);
      this._cachedFunctions = t1;
      return t1;
    },
    get$getters: function() {
      var t1 = this._cachedGetters;
      if (t1 != null)
        return t1;
      t1 = new H.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.MethodMirror]);
      this._cachedGetters = t1;
      return t1;
    },
    get$setters: function() {
      var t1 = this._cachedSetters;
      if (t1 != null)
        return t1;
      t1 = new H.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.MethodMirror]);
      this._cachedSetters = t1;
      return t1;
    },
    get$variables: function() {
      var t1, result, t2, mirror;
      t1 = this._cachedVariables;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = this.get$_fields(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]); t2.moveNext$0();) {
        mirror = t2._dev$_current;
        result.$indexSet(result, mirror.get$simpleName(), mirror);
      }
      t1 = new H.UnmodifiableMapView(result);
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.VariableMirror]);
      this._cachedVariables = t1;
      return t1;
    },
    get$members: function() {
      var t1, result, t2;
      t1 = this._cachedMembers;
      if (t1 != null)
        return t1;
      t1 = this.get$classes(this);
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      result.addAll$1(result, t1);
      t1 = new H.JsLibraryMirror_members_addToResult(result);
      t2 = this.get$functions().__js_mirrors$_source;
      t2.forEach$1(t2, t1);
      t2 = this.get$getters().__js_mirrors$_source;
      t2.forEach$1(t2, t1);
      t2 = this.get$setters().__js_mirrors$_source;
      t2.forEach$1(t2, t1);
      t2 = this.get$variables().__js_mirrors$_source;
      t2.forEach$1(t2, t1);
      t1 = new H.UnmodifiableMapView(result);
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.Mirror]);
      this._cachedMembers = t1;
      return t1;
    },
    get$declarations: function() {
      var t1, result;
      t1 = this._cachedDeclarations;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, P.DeclarationMirror);
      t1 = this.get$members().__js_mirrors$_source;
      t1.forEach$1(t1, new H.JsLibraryMirror_declarations_addToResult(result));
      t1 = new H.UnmodifiableMapView(result);
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.DeclarationMirror]);
      this._cachedDeclarations = t1;
      return t1;
    },
    get$owner: function() {
      return;
    },
    $isLibraryMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  JsDeclarationMirror_JsObjectMirror: {
    "": "JsDeclarationMirror+JsObjectMirror;",
    $isMirror: true
  },
  JsLibraryMirror_members_addToResult: {
    "": "Closure;result_0",
    call$2: function(key, value) {
      var t1 = this.result_0;
      t1.$indexSet(t1, key, value);
    },
    $isFunction: true,
    $is_args2: true
  },
  JsLibraryMirror_declarations_addToResult: {
    "": "Closure;result_0",
    call$2: function(key, value) {
      var t1 = this.result_0;
      t1.$indexSet(t1, key, value);
    },
    $isFunction: true,
    $is_args2: true
  },
  filterMembers_closure: {
    "": "Closure;method_0",
    call$0: function() {
      return this.method_0;
    },
    $isFunction: true,
    $is_void_: true
  },
  JsMixinApplication: {
    "": "JsTypeMirror_JsObjectMirror;superclass,mixin,_cachedSimpleName,simpleName",
    get$_prettyName: function() {
      return "ClassMirror";
    },
    get$simpleName: function() {
      var t1, superName;
      t1 = this._cachedSimpleName;
      if (t1 != null)
        return t1;
      superName = this.superclass.get$qualifiedName()._name;
      t1 = this.mixin;
      t1 = J.contains$1$asx(superName, " with ") === true ? H.s(H.S(superName) + ", " + H.S(t1.get$qualifiedName()._name)) : H.s(H.S(superName) + " with " + H.S(t1.get$qualifiedName()._name));
      this._cachedSimpleName = t1;
      return t1;
    },
    get$qualifiedName: function() {
      return this.get$simpleName();
    },
    get$declarations: function() {
      return this.mixin.get$declarations();
    },
    getField$1: function(fieldName) {
      throw H.wrapException(P.NoSuchMethodError$(this, fieldName, null, null, null));
    },
    get$originalDeclaration: function() {
      return this;
    },
    get$typeVariables: function() {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    $isClassMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  JsTypeMirror_JsObjectMirror: {
    "": "JsTypeMirror+JsObjectMirror;",
    $isMirror: true
  },
  JsObjectMirror: {
    "": "Object;",
    $isMirror: true
  },
  JsInstanceMirror: {
    "": "JsObjectMirror;reflectee",
    _invoke$4: function($name, type, reflectiveName, $arguments) {
      var cacheName, t1, cache, cacheEntry, t2, mangledName, argumentNames, invocation;
      cacheName = $.Primitives_mirrorInvokeCacheName;
      t1 = this.reflectee;
      cache = t1.constructor[cacheName];
      if (cache == null) {
        cache = H.JsCache_allocate();
        t1.constructor[cacheName] = cache;
      }
      cacheEntry = cache[reflectiveName];
      if (cacheEntry == null) {
        t2 = $.get$reflectiveNames();
        mangledName = t2.$index(t2, reflectiveName);
        if (type === 0) {
          t2 = H.SubListIterable$(J.split$1$s(reflectiveName, ":"), 3, null, null);
          argumentNames = t2.toList$0(t2);
        } else
          argumentNames = C.List_empty;
        invocation = new H.JSInvocationMirror($name, mangledName, type, $arguments, argumentNames, null);
        cacheEntry = invocation._getCachedInvocation$1(t1);
        cache[reflectiveName] = cacheEntry;
      } else
        invocation = null;
      if (cacheEntry.get$isNoSuchMethod()) {
        if (invocation == null) {
          t2 = $.get$reflectiveNames();
          invocation = new H.JSInvocationMirror($name, t2.$index(t2, reflectiveName), type, $arguments, [], null);
        }
        return H.reflect(cacheEntry.invokeOn$2(t1, invocation));
      } else
        return H.reflect(cacheEntry.invokeOn$2(t1, $arguments));
    },
    getField$1: function(fieldName) {
      return this._invoke$4(fieldName, 1, fieldName.get$_name(), []);
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other === "object" && other !== null && !!t1.$isJsInstanceMirror) {
        t1 = this.reflectee;
        t2 = other.reflectee;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return J.$xor$n(H.objectHashCode(this.reflectee), 909522486);
    },
    toString$0: function(_) {
      return "InstanceMirror on " + H.S(P.Error_safeToString(this.reflectee));
    },
    $isJsInstanceMirror: true,
    $isMirror: true
  },
  JsTypeBoundClassMirror: {
    "": "JsDeclarationMirror;_class,_typeArguments,_cachedTypeArguments,_cachedDeclarations,_cachedMembers,_cachedConstructors,_cachedVariables,_cachedGetters,_cachedSetters,_cachedMethodsMap,_cachedMethods,_superclass,_cachedSuperinterfaces,simpleName",
    get$_prettyName: function() {
      return "ClassMirror";
    },
    get$_methods: function() {
      var t1 = this._cachedMethods;
      if (t1 != null)
        return t1;
      t1 = this._class._getMethodsWithOwner$1(this);
      this._cachedMethods = t1;
      return t1;
    },
    get$constructors: function() {
      var t1 = this._cachedConstructors;
      if (t1 != null)
        return t1;
      t1 = new H.UnmodifiableMapView(H.filterConstructors(this.get$_methods()));
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.MethodMirror]);
      this._cachedConstructors = t1;
      return t1;
    },
    get$variables: function() {
      var t1, result, t2, mirror;
      t1 = this._cachedVariables;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = this._class._getFieldsWithOwner$1(this), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]); t2.moveNext$0();) {
        mirror = t2._dev$_current;
        result.$indexSet(result, mirror.get$simpleName(), mirror);
      }
      t1 = new H.UnmodifiableMapView(result);
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.VariableMirror]);
      this._cachedVariables = t1;
      return t1;
    },
    get$members: function() {
      var t1 = this._cachedMembers;
      if (t1 != null)
        return t1;
      t1 = new H.UnmodifiableMapView(H.filterMembers(this.get$_methods(), this.get$variables()));
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.DeclarationMirror]);
      this._cachedMembers = t1;
      return t1;
    },
    get$declarations: function() {
      var t1, result;
      t1 = this._cachedDeclarations;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, P.DeclarationMirror);
      result.addAll$1(result, this.get$members());
      result.addAll$1(result, this.get$constructors());
      J.forEach$1$ax(this._class.get$typeVariables(), new H.JsTypeBoundClassMirror_declarations_closure(result));
      t1 = new H.UnmodifiableMapView(result);
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.DeclarationMirror]);
      this._cachedDeclarations = t1;
      return t1;
    },
    getField$1: function(fieldName) {
      return this._class.getField$1(fieldName);
    },
    get$owner: function() {
      return this._class.get$owner();
    },
    get$originalDeclaration: function() {
      return this._class;
    },
    get$location: function(_) {
      var t1 = this._class;
      return t1.get$location(t1);
    },
    get$qualifiedName: function() {
      return this._class.get$qualifiedName();
    },
    get$simpleName: function() {
      return this._class.get$simpleName();
    },
    $isClassMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  JsTypeBoundClassMirror_declarations_closure: {
    "": "Closure;result_0",
    call$1: function(tv) {
      var t1 = this.result_0;
      t1.$indexSet(t1, tv.get$simpleName(), tv);
      return tv;
    },
    $isFunction: true,
    $is_args1: true
  },
  JsClassMirror: {
    "": "JsTypeMirror_JsObjectMirror0;_mangledName,_jsConstructorOrInterceptor,_fieldsDescriptor,_fieldsMetadata,_jsConstructorCache,_metadata,_superclass,_cachedMethods,_cachedFields,_cachedConstructors,_cachedMethodsMap,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,_cachedSuperinterfaces,_cachedTypeVariables,_owner,simpleName",
    get$_prettyName: function() {
      return "ClassMirror";
    },
    get$_jsConstructor: function() {
      var t1, t2;
      t1 = this._jsConstructorOrInterceptor;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isInterceptor)
        return t1.constructor;
      else
        return t1;
    },
    get$constructors: function() {
      var t1 = this._cachedConstructors;
      if (t1 != null)
        return t1;
      t1 = new H.UnmodifiableMapView(H.filterConstructors(this.get$_methods()));
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.MethodMirror]);
      this._cachedConstructors = t1;
      return t1;
    },
    _getMethodsWithOwner$1: function(methodOwner) {
      var $prototype, keys, result, t1, key, t2, simpleName, mirror, $length, i, mangledName, jsFunction, i0, reflectionName, isConstructor, unmangledName;
      $prototype = this.get$_jsConstructor().prototype;
      keys = H.extractKeys($prototype);
      result = [];
      H.setRuntimeTypeInfo(result, [H.JsMethodMirror]);
      for (t1 = new H.ListIterator(keys, keys.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(keys, 0)]); t1.moveNext$0();) {
        key = t1._dev$_current;
        if (H.isReflectiveDataInPrototype(key))
          continue;
        t2 = $.get$mangledNames();
        simpleName = t2.$index(t2, key);
        if (simpleName == null)
          continue;
        mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(simpleName, $prototype[key], false, false);
        result.push(mirror);
        mirror._owner = methodOwner;
      }
      keys = H.extractKeys(init.statics[this._mangledName]);
      $length = keys.length;
      for (i = 0; i < $length; ++i) {
        mangledName = keys[i];
        if (H.isReflectiveDataInPrototype(mangledName))
          continue;
        jsFunction = this.get$owner().get$_globalObject()[mangledName];
        i0 = i + 1;
        if (i0 < $length) {
          reflectionName = keys[i0];
          t1 = J.getInterceptor$s(reflectionName);
          if (t1.startsWith$1(reflectionName, "+")) {
            reflectionName = t1.substring$1(reflectionName, 1);
            isConstructor = C.JSString_methods.startsWith$1(reflectionName, "new ");
            if (isConstructor) {
              t1 = C.JSString_methods.substring$1(reflectionName, 4);
              reflectionName = H.stringReplaceAllUnchecked(t1, "$", ".");
            }
            i = i0;
          } else
            isConstructor = false;
          unmangledName = reflectionName;
        } else {
          unmangledName = mangledName;
          isConstructor = false;
        }
        mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
        result.push(mirror);
        mirror._owner = methodOwner;
      }
      return result;
    },
    get$_methods: function() {
      var t1 = this._cachedMethods;
      if (t1 != null)
        return t1;
      t1 = this._getMethodsWithOwner$1(this);
      this._cachedMethods = t1;
      return t1;
    },
    _getFieldsWithOwner$1: function(fieldOwner) {
      var result, t1, instanceFieldSpecfication, staticDescriptor;
      result = [];
      H.setRuntimeTypeInfo(result, [P.VariableMirror]);
      t1 = this._fieldsDescriptor.split(";");
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      instanceFieldSpecfication = t1[1];
      t1 = this._fieldsMetadata;
      if (t1 != null) {
        instanceFieldSpecfication = [instanceFieldSpecfication];
        C.JSArray_methods.addAll$1(instanceFieldSpecfication, t1);
      }
      H.parseCompactFieldSpecification(fieldOwner, instanceFieldSpecfication, false, result);
      staticDescriptor = init.statics[this._mangledName];
      if (staticDescriptor != null)
        H.parseCompactFieldSpecification(fieldOwner, staticDescriptor[""], true, result);
      return result;
    },
    get$_fields: function() {
      var t1 = this._cachedFields;
      if (t1 != null)
        return t1;
      t1 = this._getFieldsWithOwner$1(this);
      this._cachedFields = t1;
      return t1;
    },
    get$variables: function() {
      var t1, result, t2, mirror;
      t1 = this._cachedVariables;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = this.get$_fields(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]); t2.moveNext$0();) {
        mirror = t2._dev$_current;
        result.$indexSet(result, mirror.get$simpleName(), mirror);
      }
      t1 = new H.UnmodifiableMapView(result);
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.VariableMirror]);
      this._cachedVariables = t1;
      return t1;
    },
    get$members: function() {
      var t1 = this._cachedMembers;
      if (t1 != null)
        return t1;
      t1 = new H.UnmodifiableMapView(H.filterMembers(this.get$_methods(), this.get$variables()));
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.Mirror]);
      this._cachedMembers = t1;
      return t1;
    },
    get$declarations: function() {
      var t1, result, t2;
      t1 = this._cachedDeclarations;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, P.DeclarationMirror);
      t1 = new H.JsClassMirror_declarations_addToResult(result);
      t2 = this.get$members().__js_mirrors$_source;
      t2.forEach$1(t2, t1);
      t2 = this.get$constructors().__js_mirrors$_source;
      t2.forEach$1(t2, t1);
      J.forEach$1$ax(this.get$typeVariables(), new H.JsClassMirror_declarations_closure(result));
      t1 = new H.UnmodifiableMapView(result);
      H.setRuntimeTypeInfo(t1, [P.Symbol0, P.DeclarationMirror]);
      this._cachedDeclarations = t1;
      return t1;
    },
    getField$1: function(fieldName) {
      var t1, mirror, jsName;
      t1 = this.get$variables().__js_mirrors$_source;
      mirror = t1.$index(t1, fieldName);
      if (mirror != null && mirror.get$isStatic()) {
        jsName = mirror.get$_jsName();
        if (!(jsName in $))
          throw H.wrapException(H.RuntimeError$("Cannot find \"" + jsName + "\" in current isolate."));
        if (jsName in init.lazies)
          return H.reflect($[init.lazies[jsName]]());
        else
          return H.reflect($[jsName]);
      }
      throw H.wrapException(P.NoSuchMethodError$(this, fieldName, null, null, null));
    },
    get$owner: function() {
      var t1, t2;
      t1 = this._owner;
      if (t1 == null) {
        t1 = this._jsConstructorOrInterceptor;
        t2 = J.getInterceptor(t1);
        if (typeof t1 === "object" && t1 !== null && !!t2.$isInterceptor)
          this._owner = H.reflectClassByMangledName(C.Type_HqF._typeName).get$owner();
        else {
          t1 = $.get$JsMirrorSystem_librariesByName();
          t1 = t1.get$values(t1);
          t2 = t1._iterable;
          t2 = new H.MappedIterator(null, t2.get$iterator(t2), t1._f);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)];
          for (; t2.moveNext$0();)
            for (t1 = J.get$iterator$ax(t2._dev$_current); t1.moveNext$0() === true;)
              J.get$classes$x(t1.get$current());
        }
        t1 = this._owner;
        if (t1 == null)
          throw H.wrapException(P.StateError$("Class \"" + H.S(this.simpleName._name) + "\" has no owner"));
      }
      return t1;
    },
    get$originalDeclaration: function() {
      return this;
    },
    get$typeVariables: function() {
      var t1, result, typeVariables, i, typeVariable;
      t1 = this._cachedTypeVariables;
      if (t1 != null)
        return t1;
      result = P.List_List(null, null);
      typeVariables = this.get$_jsConstructor().prototype["<>"];
      if (typeVariables == null)
        return result;
      for (i = 0; i < typeVariables.length; ++i) {
        typeVariable = init.metadata[typeVariables[i]];
        result.push(new H.JsTypeVariableMirror(this, typeVariable, null, H.s(J.get$name$x(typeVariable))));
      }
      t1 = new P.UnmodifiableListView(result);
      H.setRuntimeTypeInfo(t1, [null]);
      this._cachedTypeVariables = t1;
      return t1;
    },
    $isJsClassMirror: true,
    $isClassMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  JsTypeMirror_JsObjectMirror0: {
    "": "JsTypeMirror+JsObjectMirror;",
    $isMirror: true
  },
  JsClassMirror_declarations_addToResult: {
    "": "Closure;result_0",
    call$2: function(key, value) {
      var t1 = this.result_0;
      t1.$indexSet(t1, key, value);
    },
    $isFunction: true,
    $is_args2: true
  },
  JsClassMirror_declarations_closure: {
    "": "Closure;result_1",
    call$1: function(tv) {
      var t1 = this.result_1;
      t1.$indexSet(t1, tv.get$simpleName(), tv);
      return tv;
    },
    $isFunction: true,
    $is_args1: true
  },
  JsVariableMirror: {
    "": "JsDeclarationMirror;_jsName<,isFinal,isStatic<,_metadataFunction,_owner,_type,_metadata,simpleName",
    get$_prettyName: function() {
      return "VariableMirror";
    },
    get$owner: function() {
      return this._owner;
    },
    _getField$1: function(receiver) {
      return $[this._jsName];
    },
    $isVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true,
    static: {JsVariableMirror_JsVariableMirror$from: function(descriptor, metadataFunction, owner, isStatic) {
        var fieldInformation, t1, field, $length, t2, code, isFinal, jsName, divider, accessorName, unmangledName, setterName;
        fieldInformation = J.split$1$s(descriptor, "-");
        t1 = fieldInformation.length;
        if (t1 === 1)
          return;
        if (0 >= t1)
          return H.ioore(fieldInformation, 0);
        field = fieldInformation[0];
        t1 = J.getInterceptor$asx(field);
        $length = t1.get$length(field);
        t2 = J.getInterceptor$n($length);
        code = H.JsVariableMirror_fieldCode(t1.codeUnitAt$1(field, t2.$sub($length, 1)));
        if (code === 0)
          return;
        isFinal = C.JSInt_methods.$shr(code, 2) === 0;
        jsName = t1.substring$2(field, 0, t2.$sub($length, 1));
        divider = t1.indexOf$1(field, ":");
        if (divider > 0) {
          accessorName = C.JSString_methods.substring$2(jsName, 0, divider);
          jsName = t1.substring$1(field, divider + 1);
        } else
          accessorName = jsName;
        if (isStatic) {
          t1 = $.get$mangledGlobalNames();
          unmangledName = t1.$index(t1, accessorName);
        } else {
          t1 = $.get$mangledNames();
          unmangledName = t1.$index(t1, "get$" + accessorName);
        }
        if (unmangledName == null)
          unmangledName = accessorName;
        if (isFinal) {
          setterName = H.s(H.S(unmangledName) + "=");
          t1 = owner.get$_methods();
          t2 = new H.ListIterator(t1, t1.length, 0, null);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
          for (; isFinal = true, t2.moveNext$0();)
            if (J.$eq(t2._dev$_current.get$simpleName(), setterName)) {
              isFinal = false;
              break;
            }
        }
        if (1 >= fieldInformation.length)
          return H.ioore(fieldInformation, 1);
        return new H.JsVariableMirror(jsName, isFinal, isStatic, metadataFunction, owner, H.Primitives_parseInt(fieldInformation[1], null, null), null, H.s(unmangledName));
      }, JsVariableMirror_fieldCode: function(code) {
        if (code >= 60 && code <= 64)
          return code - 59;
        if (code >= 123 && code <= 126)
          return code - 117;
        if (code >= 37 && code <= 43)
          return code - 27;
        return 0;
      }}
  },
  JsClosureMirror: {
    "": "JsInstanceMirror;reflectee",
    toString$0: function(_) {
      return "ClosureMirror on '" + H.S(P.Error_safeToString(this.reflectee)) + "'";
    },
    $isMirror: true
  },
  JsMethodMirror: {
    "": "JsDeclarationMirror;_jsFunction,_parameterCount,isGetter,isSetter<,isStatic<,isConstructor<,isOperator,_owner,_metadata,_returnType,_parameters,simpleName",
    get$_prettyName: function() {
      return "MethodMirror";
    },
    get$owner: function() {
      return this._owner;
    },
    _getField$1: function(receiver) {
      var t1;
      if (this.isGetter) {
        t1 = [];
        if (!this.isStatic && !this.isConstructor)
          H.throwExpression(H.RuntimeError$("Cannot invoke instance method without receiver."));
        if (!J.$eq(this._parameterCount, 0) || this._jsFunction == null)
          H.throwExpression(P.NoSuchMethodError$(this.get$owner(), this.simpleName, t1, null, null));
        return this._jsFunction.apply($, P.List_List$from(t1, true, null));
      } else
        throw H.wrapException(P.UnimplementedError$("getField on " + H.S(receiver)));
    },
    $isJsMethodMirror: true,
    $isMethodMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true,
    static: {JsMethodMirror_JsMethodMirror$fromUnmangledName: function($name, jsFunction, isStatic, isConstructor) {
        var info, isOperator, isSetter, t1, requiredParameterCount, isGetter, optionalParameterCount;
        info = J.split$1$s($name, ":");
        if (0 >= info.length)
          return H.ioore(info, 0);
        $name = info[0];
        isOperator = H.isOperatorName($name);
        isSetter = !isOperator && J.endsWith$1$s($name, "=");
        t1 = info.length;
        if (t1 === 1) {
          if (isSetter) {
            requiredParameterCount = 1;
            isGetter = false;
          } else {
            requiredParameterCount = 0;
            isGetter = true;
          }
          optionalParameterCount = 0;
        } else {
          if (1 >= t1)
            return H.ioore(info, 1);
          requiredParameterCount = H.Primitives_parseInt(info[1], null, null);
          if (2 >= info.length)
            return H.ioore(info, 2);
          optionalParameterCount = H.Primitives_parseInt(info[2], null, null);
          isGetter = false;
        }
        t1 = H.s($name);
        return new H.JsMethodMirror(jsFunction, J.$add$ns(requiredParameterCount, optionalParameterCount), isGetter, isSetter, isStatic, isConstructor, isOperator, null, null, null, null, t1);
      }}
  },
  JsTypedefMirror: {
    "": "JsDeclarationMirror;_mangledName,referent,simpleName",
    get$value: function(_) {
      return this.referent;
    },
    get$_prettyName: function() {
      return "TypedefMirror";
    },
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsFunctionTypeMirror: {
    "": "Object;_typeData,_cachedToString,_cachedReturnType,_cachedParameters,owner<",
    toString$0: function(_) {
      var t1, t2, t3, s, sep, argument, $name;
      t1 = this._cachedToString;
      if (t1 != null)
        return t1;
      t1 = this._typeData;
      if ("args" in t1)
        for (t2 = t1.args, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(t2, 0)]), s = "FunctionTypeMirror on '(", sep = ""; t3.moveNext$0(); sep = ", ") {
          argument = t3._dev$_current;
          s = C.JSString_methods.$add(s + sep, H.runtimeTypeToString(argument, null));
        }
      else {
        s = "FunctionTypeMirror on '(";
        sep = "";
      }
      if ("opt" in t1) {
        s += sep + "[";
        for (t2 = t1.opt, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(t2, 0)]), sep = ""; t3.moveNext$0(); sep = ", ") {
          argument = t3._dev$_current;
          s = C.JSString_methods.$add(s + sep, H.runtimeTypeToString(argument, null));
        }
        s += "]";
      }
      if ("named" in t1) {
        s += sep + "{";
        for (t2 = H.extractKeys(t1.named), t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(t2, 0)]), sep = ""; t3.moveNext$0(); sep = ", ") {
          $name = t3._dev$_current;
          s = C.JSString_methods.$add(s + sep + (H.S($name) + ": "), H.runtimeTypeToString(t1.named[$name], null));
        }
        s += "}";
      }
      s += ") -> ";
      if (!!t1.void)
        s += "void";
      else
        s = "ret" in t1 ? C.JSString_methods.$add(s, H.runtimeTypeToString(t1.ret, null)) : s + "dynamic";
      t1 = s + "'";
      this._cachedToString = t1;
      return t1;
    },
    $isClassMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  UnmodifiableMapView: {
    "": "Object;__js_mirrors$_source",
    get$length: function(_) {
      return this.__js_mirrors$_source._collection$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_mirrors$_source._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.__js_mirrors$_source._collection$_length !== 0;
    },
    $index: function(_, key) {
      var t1 = this.__js_mirrors$_source;
      return t1.$index(t1, key);
    },
    containsKey$1: function(key) {
      return this.__js_mirrors$_source.containsKey$1(key);
    },
    forEach$1: function(_, f) {
      var t1 = this.__js_mirrors$_source;
      return t1.forEach$1(t1, f);
    },
    get$keys: function() {
      var t1, t2;
      t1 = this.__js_mirrors$_source;
      t2 = new P.LinkedHashMapKeyIterable(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2;
    },
    get$values: function(_) {
      var t1 = this.__js_mirrors$_source;
      return t1.get$values(t1);
    },
    $indexSet: function(_, key, value) {
      return H.UnmodifiableMapView__throw();
    },
    $isMap: true,
    static: {UnmodifiableMapView__throw: function() {
        throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable Map"));
      }}
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  computeMangledNames: function(jsMangledNames, isGlobal) {
    var keys, result, t1, t2, key, value, t3;
    keys = H.extractKeys(jsMangledNames);
    result = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    H.setRuntimeTypeInfo(result, [J.JSString, J.JSString]);
    for (t1 = new H.ListIterator(keys, keys.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(keys, 0)]), t2 = !isGlobal; t1.moveNext$0();) {
      key = t1._dev$_current;
      value = jsMangledNames[key];
      result.$indexSet(result, key, value);
      if (t2) {
        t3 = J.getInterceptor$s(key);
        if (t3.startsWith$1(key, "get$"))
          result.$indexSet(result, "set$" + t3.substring$1(key, 4), value + "=");
      }
    }
    return result;
  },
  computeReflectiveNames: function(map) {
    var result = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    H.setRuntimeTypeInfo(result, [J.JSString, J.JSString]);
    map.forEach$1(map, new H.computeReflectiveNames_closure(result));
    return result;
  },
  extractKeys: function(victim) {
    var t1 = (function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(victim, Object.prototype.hasOwnProperty);
    H.setRuntimeTypeInfo(t1, [null]);
    t1.fixed$length = init;
    return t1;
  },
  computeReflectiveNames_closure: {
    "": "Closure;result_0",
    call$2: function(mangledName, reflectiveName) {
      var t1 = this.result_0;
      t1.$indexSet(t1, reflectiveName, mangledName);
    },
    $isFunction: true,
    $is_args2: true
  }
}],
["dart.async", "dart:async", , P, {
  _invokeErrorHandler: function(errorHandler, error, stackTrace) {
    var t1 = J.getInterceptor(errorHandler);
    if (!!t1.$is_args2)
      return errorHandler.call$2(error, stackTrace);
    else
      return errorHandler.call$1(error);
  },
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = J.getInterceptor(errorHandler);
    zone.toString;
    if (!!t1.$is_args2)
      return errorHandler;
    else
      return errorHandler;
  },
  Future_Future: function(computation, $T) {
    var result = P._Future$($T);
    P.Timer_Timer(C.Duration_0, new P.Future_Future_closure(computation, result));
    return result;
  },
  Future_Future$sync: function(computation, $T) {
    var result, T0, error, stackTrace, t1, exception;
    try {
      result = computation.call$0();
      t1 = P._Future$immediate(result, T0);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      error = t1;
      stackTrace = new H._StackTrace(exception, null);
      return P._Future$immediateError(error, stackTrace, T0);
    }

  },
  Future_Future$delayed: function(duration, computation, $T) {
    var t1, completer;
    t1 = P._Future$(null);
    completer = new P._SyncCompleter(t1);
    H.setRuntimeTypeInfo(completer, [null]);
    P.Timer_Timer(duration, new P.Future_Future$delayed_closure(completer));
    return t1;
  },
  Future_wait: function(futures, eagerError) {
    var t1, t2, t3, future, pos, values, completer;
    t1 = {};
    t1.completer_0 = null;
    t1.values_1 = null;
    t1.remaining_2 = 0;
    t1.error_3 = null;
    t1.stackTrace_4 = null;
    t2 = new P.Future_wait_handleError(t1, eagerError);
    for (t3 = new H.ListIterator(futures, futures.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(futures, 0)]); t3.moveNext$0();) {
      future = t3._dev$_current;
      pos = t1.remaining_2;
      t1.remaining_2 = pos + 1;
      future.then$2$onError(new P.Future_wait_closure(t1, eagerError, pos), t2);
    }
    t2 = t1.remaining_2;
    if (t2 === 0)
      return P._Future$immediate(C.List_empty, null);
    values = Array(t2);
    values.fixed$length = init;
    t1.values_1 = values;
    t2 = J.JSArray;
    t3 = P._Future$(t2);
    completer = new P._AsyncCompleter(t3);
    H.setRuntimeTypeInfo(completer, [t2]);
    t1.completer_0 = completer;
    return t3;
  },
  Future_forEach: function(input, f) {
    var doneSignal, iterator;
    doneSignal = P._Future$(null);
    iterator = new H.ListIterator(input, input.length, 0, null);
    H.setRuntimeTypeInfo(iterator, [H.getTypeArgumentByIndex(input, 0)]);
    new P.Future_forEach_nextElement(f, doneSignal, iterator).call$1(null);
    return doneSignal;
  },
  _asyncRunCallback: function() {
    var callback, t1, exception, milliseconds;
    for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
      callback = t1.removeFirst$0();
      try {
        callback.call$0();
      } catch (exception) {
        H.unwrapException(exception);
        milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
        H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
        throw exception;
      }

    }
    $._callbacksAreEnqueued = false;
  },
  _scheduleAsyncCallback: function(callback) {
    $.get$_asyncCallbacks()._add$1(callback);
    if (!$._callbacksAreEnqueued) {
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, callback);
      return;
    }
    P._rootScheduleMicrotask(t1, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  Stream_Stream$fromIterable: function(data, $T) {
    var t1 = new P._GeneratedStreamImpl(new P.Stream_Stream$fromIterable_closure($T, data), false);
    H.setRuntimeTypeInfo(t1, [$T]);
    return t1;
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    var t1;
    if (onCancel == null)
      return sync ? new P._NoCallbackSyncStreamController(null, 0, null) : new P._NoCallbackAsyncStreamController(null, 0, null);
    if (sync) {
      t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
      H.setRuntimeTypeInfo(t1, [$T]);
    } else {
      t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
      H.setRuntimeTypeInfo(t1, [$T]);
    }
    return t1;
  },
  StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
    var t1;
    if (sync) {
      t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
      H.setRuntimeTypeInfo(t1, [$T]);
      t1._async$_previous = t1;
      t1._async$_next = t1;
    } else {
      t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
      H.setRuntimeTypeInfo(t1, [$T]);
      t1._async$_previous = t1;
      t1._async$_next = t1;
    }
    return t1;
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, t1, t2, exception;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      t1 = result;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(t1, null, t1, e, s);
    }

  },
  _AddStreamState_makeErrorHandler: function(controller) {
    return new P._AddStreamState_makeErrorHandler_closure(controller);
  },
  _nullDataHandler: function(value) {
  },
  _nullErrorHandler: function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
  },
  _nullDoneHandler: function() {
    return;
  },
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture, t1;
    cancelFuture = subscription.cancel$0();
    t1 = J.getInterceptor(cancelFuture);
    if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture, t1;
    cancelFuture = subscription.cancel$0();
    t1 = J.getInterceptor(cancelFuture);
    if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreateTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreateTimer(t1, null, t1, duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1, t2;
    t1 = $.Zone__current;
    t2 = zone;
    if (t1 == null ? t2 == null : t1 === t2)
      return f.call$0();
    old = t1;
    try {
      $.Zone__current = zone;
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1, t2;
    t1 = $.Zone__current;
    t2 = zone;
    if (t1 == null ? t2 == null : t1 === t2)
      return f.call$1(arg);
    old = t1;
    try {
      $.Zone__current = zone;
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1, t2;
    t1 = $.Zone__current;
    t2 = zone;
    if (t1 == null ? t2 == null : t1 === t2)
      return f.call$2(arg1, arg2);
    old = t1;
    try {
      $.Zone__current = zone;
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  },
  _rootCreateTimer: function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  },
  _AsyncError: {
    "": "Object;error>,stackTrace<",
    error$2: function($receiver, arg0, arg1) {
      return this.error.call$2(arg0, arg1);
    },
    error$1: function($receiver, arg0) {
      return this.error.call$1(arg0);
    },
    $isError: true
  },
  _BroadcastStream: {
    "": "_ControllerStream;_async$_controller",
    $as_ControllerStream: null,
    $asStream: null
  },
  _BroadcastSubscription: {
    "": "_ControllerSubscription;_eventState@,_async$_next@,_async$_previous@,_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    get$_async$_controller: function() {
      return this._async$_controller;
    },
    _expectsEvent$1: function(eventId) {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) === eventId;
    },
    _toggleEventId$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$xor();
      this._eventState = t1 ^ 1;
    },
    get$_isFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    _setRemoveAfterFiring$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$or();
      this._eventState = t1 | 4;
    },
    get$_removeAfterFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    _onPause$0: function() {
      return;
    },
    get$_onPause: function() {
      return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onPause$0, null, "_onPause$0");
    },
    _onResume$0: function() {
      return;
    },
    get$_onResume: function() {
      return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onResume$0, null, "_onResume$0");
    },
    $as_ControllerSubscription: null,
    $asStreamSubscription: null,
    static: {"": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING"}
  },
  _BroadcastStreamController: {
    "": "Object;_onListen<,_onCancel<,_async$_next@,_async$_previous@",
    get$stream: function(_) {
      var t1 = new P._BroadcastStream(this);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$hasListener: function() {
      return this._async$_next !== this;
    },
    get$_isFiring: function() {
      return (this._state & 2) !== 0;
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 != null)
        return t1;
      t1 = P._Future$(null);
      this._doneFuture = t1;
      return t1;
    },
    _removeListener$1: function(subscription) {
      var previous, next;
      previous = subscription.get$_async$_previous();
      next = subscription.get$_async$_next();
      previous.set$_async$_next(next);
      next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription;
      if ((this._state & 4) !== 0)
        throw H.wrapException(new P.StateError("Subscribing to closed stream"));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t1, t2, null, null);
      subscription.$builtinTypeInfo = this.$builtinTypeInfo;
      subscription._async$_previous = subscription;
      subscription._async$_next = subscription;
      t2 = this._async$_previous;
      subscription._async$_previous = t2;
      subscription._async$_next = this;
      t2.set$_async$_next(subscription);
      this._async$_previous = subscription;
      subscription._eventState = this._state & 1;
      if (this._async$_next === subscription)
        P._runGuarded(this._onListen);
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      if (subscription.get$_async$_next() === subscription)
        return;
      if (subscription.get$_isFiring())
        subscription._setRemoveAfterFiring$0();
      else {
        this._removeListener$1(subscription);
        if ((this._state & 2) === 0 && this._async$_next === this)
          this._callOnCancel$0();
      }
    },
    _recordPause$1: function(subscription) {
    },
    _recordResume$1: function(subscription) {
    },
    _addEventError$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add new events after calling close");
      return new P.StateError("Cannot add new events while doing an addStream");
    },
    add$1: function(_, data) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendData$1(data);
    },
    get$add: function(_receiver) {
      return new P.BoundClosure$i1(this, P._BroadcastStreamController.prototype.add$1, _receiver, "add$1");
    },
    addError$2: function(error, stackTrace) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendError$2(error, stackTrace);
    },
    get$addError: function() {
      return new P.BoundClosure$2(this, P._BroadcastStreamController.prototype.addError$2, null, "addError$2");
    },
    close$0: function(_) {
      var t1, doneFuture;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._doneFuture;
      if (t1 >= 4)
        throw H.wrapException(this._addEventError$0());
      this._state = t1 | 4;
      doneFuture = this._ensureDoneFuture$0();
      this._sendDone$0();
      return doneFuture;
    },
    _async$_add$1: function(data) {
      this._sendData$1(data);
    },
    _addError$2: function(error, stackTrace) {
      this._sendError$2(error, stackTrace);
    },
    _close$0: function() {
      var addState = this._addStreamState;
      this._addStreamState = null;
      this._state = this._state & 4294967287;
      addState.addStreamFuture._asyncComplete$1(null);
    },
    _forEachListener$1: function(action) {
      var t1, link, id, link0;
      t1 = this._state;
      if ((t1 & 2) !== 0)
        throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
      link = this._async$_next;
      if (link === this)
        return;
      id = t1 & 1;
      this._state = t1 ^ 3;
      for (; link !== this;)
        if (link._expectsEvent$1(id)) {
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$or();
          link.set$_eventState(t1 | 2);
          action.call$1(link);
          link._toggleEventId$0();
          link0 = link.get$_async$_next();
          if (link.get$_removeAfterFiring())
            this._removeListener$1(link);
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$and();
          link.set$_eventState(t1 & 4294967293);
          link = link0;
        } else
          link = link.get$_async$_next();
      this._state = this._state & 4294967293;
      if (this._async$_next === this)
        this._callOnCancel$0();
    },
    _callOnCancel$0: function() {
      if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
        this._doneFuture._asyncComplete$1(null);
      P._runGuarded(this._onCancel);
    }
  },
  _SyncBroadcastStreamController: {
    "": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
    _sendData$1: function(data) {
      if (this._async$_next === this)
        return;
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
    },
    _sendError$2: function(error, stackTrace) {
      if (this._async$_next === this)
        return;
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0: function() {
      if (this._async$_next !== this)
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
      else
        this._doneFuture._asyncComplete$1(null);
    },
    $as_BroadcastStreamController: null
  },
  _SyncBroadcastStreamController__sendData_closure: {
    "": "Closure;this_0,data_1",
    call$1: function(subscription) {
      subscription._async$_add$1(this.data_1);
    },
    $isFunction: true,
    $is_args1: true
  },
  _SyncBroadcastStreamController__sendError_closure: {
    "": "Closure;this_0,error_1,stackTrace_2",
    call$1: function(subscription) {
      subscription._addError$2(this.error_1, this.stackTrace_2);
    },
    $isFunction: true,
    $is_args1: true
  },
  _SyncBroadcastStreamController__sendDone_closure: {
    "": "Closure;this_0",
    call$1: function(subscription) {
      subscription._close$0();
    },
    $isFunction: true,
    $is_args1: true
  },
  _AsyncBroadcastStreamController: {
    "": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
    _sendData$1: function(data) {
      var link, t1;
      for (link = this._async$_next; link !== this; link = link.get$_async$_next()) {
        t1 = new P._DelayedData(data, null);
        t1.$builtinTypeInfo = [null];
        link._addPending$1(t1);
      }
    },
    _sendError$2: function(error, stackTrace) {
      var link;
      for (link = this._async$_next; link !== this; link = link.get$_async$_next())
        link._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _sendDone$0: function() {
      var link = this._async$_next;
      if (link !== this)
        for (; link !== this; link = link.get$_async$_next())
          link._addPending$1(C.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    },
    $as_BroadcastStreamController: null
  },
  Future: {
    "": "Object;",
    $isFuture: true
  },
  Future_Future_closure: {
    "": "Closure;computation_0,result_1",
    call$0: function() {
      var e, s, exception, t1;
      try {
        this.result_1._complete$1(this.computation_0.call$0());
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.result_1._completeError$2(e, s);
      }

    },
    $isFunction: true,
    $is_void_: true
  },
  Future_Future$delayed_closure0: {
    "": "Closure;computation_0",
    call$1: function(ignored) {
      return this.computation_0.call$0();
    },
    $isFunction: true,
    $is_args1: true
  },
  Future_Future$delayed_closure: {
    "": "Closure;completer_1",
    call$0: function() {
      var t1 = this.completer_1.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._complete$1(null);
    },
    $isFunction: true,
    $is_void_: true
  },
  Future_wait_handleError: {
    "": "Closure;box_0,eagerError_1",
    call$2: function(theError, theStackTrace) {
      var t1, t2, remaining;
      t1 = this.box_0;
      t2 = t1.values_1;
      t1.values_1 = null;
      remaining = t1.remaining_2 - 1;
      t1.remaining_2 = remaining;
      if (t2 != null)
        if (remaining === 0 || this.eagerError_1)
          t1.completer_0.completeError$2(theError, theStackTrace);
        else {
          t1.error_3 = theError;
          t1.stackTrace_4 = theStackTrace;
        }
      else if (remaining === 0 && !this.eagerError_1)
        t1.completer_0.completeError$2(t1.error_3, t1.stackTrace_4);
    },
    $isFunction: true,
    $is_args2: true
  },
  Future_wait_closure: {
    "": "Closure;box_0,eagerError_2,pos_3",
    call$1: function(value) {
      var t1, remaining, t2, t3;
      t1 = this.box_0;
      remaining = t1.remaining_2 - 1;
      t1.remaining_2 = remaining;
      t2 = t1.values_1;
      if (t2 != null) {
        t3 = this.pos_3;
        if (t3 < 0 || t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3] = value;
        if (remaining === 0) {
          t1 = t1.completer_0.future;
          if (t1._state !== 0)
            H.throwExpression(new P.StateError("Future already completed"));
          t1._asyncComplete$1(t2);
        }
      } else if (remaining === 0 && !this.eagerError_2)
        t1.completer_0.completeError$2(t1.error_3, t1.stackTrace_4);
    },
    $isFunction: true,
    $is_args1: true
  },
  Future_forEach_nextElement: {
    "": "Closure;f_0,doneSignal_1,iterator_2",
    call$1: function(_) {
      var t1, t2;
      t1 = this.iterator_2;
      t2 = this.doneSignal_1;
      if (t1.moveNext$0())
        P.Future_Future$sync(new P.Future_forEach_nextElement_closure(this.f_0, t1), null).then$2$onError(this, t2.get$_completeError());
      else
        t2._complete$1(null);
    },
    $isFunction: true,
    $is_args1: true
  },
  Future_forEach_nextElement_closure: {
    "": "Closure;f_3,iterator_4",
    call$0: function() {
      return this.f_3.call$1(this.iterator_4._dev$_current);
    },
    $isFunction: true,
    $is_void_: true
  },
  _Completer: {
    "": "Object;"
  },
  _AsyncCompleter: {
    "": "_Completer;future",
    complete$1: function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(new P.StateError("Future already completed"));
      t1._asyncComplete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    },
    completeError$2: function(error, stackTrace) {
      var t1;
      if (error == null)
        throw H.wrapException(new P.ArgumentError("Error must not be null"));
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(error, stackTrace);
    },
    $as_Completer: null
  },
  _SyncCompleter: {
    "": "_Completer;future",
    complete$1: function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(new P.StateError("Future already completed"));
      t1._complete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    },
    $as_Completer: null
  },
  _Future: {
    "": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    get$_onValue: function() {
      return this._state === 2 ? null : this._onValueCallback;
    },
    _onValue$1: function(arg0) {
      return this.get$_onValue().call$1(arg0);
    },
    get$_errorTest: function() {
      return this._state === 2 ? null : this._errorTestCallback;
    },
    get$_onError: function() {
      return this._state === 2 ? null : this._onErrorCallback;
    },
    get$_whenCompleteAction: function() {
      return this._state === 2 ? null : this._whenCompleteActionCallback;
    },
    _whenCompleteAction$0: function() {
      return this.get$_whenCompleteAction().call$0();
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null);
      H.setRuntimeTypeInfo(result, [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    catchError$2$test: function(onError, test) {
      var t1, t2, result;
      t1 = $.Zone__current;
      t2 = P._registerErrorHandler(onError, t1);
      $.Zone__current.toString;
      result = new P._Future(0, t1, null, null, null, test, t2, null);
      H.setRuntimeTypeInfo(result, [null]);
      this._addListener$1(result);
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, null, null, null, action);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_async$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(t1, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener.set$_nextListener(this._resultOrListeners);
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current.set$_nextListener(prev);
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (typeof value === "object" && value !== null && !!t1.$isFuture) {
        P._Future__chainFutures(value, this);
        return;
      }
      listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$1: function(error) {
      return this._completeError$2(error, null);
    },
    get$_completeError: function() {
      return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
    },
    _asyncComplete$1: function(value) {
      var t1, t2;
      t1 = J.getInterceptor(value);
      t2 = typeof value === "object" && value !== null && !!t1.$isFuture;
      if (t2)
        ;
      if (t2)
        t1 = typeof value !== "object" || value === null || !t1.$is_Future || value._state < 4;
      else
        t1 = false;
      if (t1) {
        this._complete$1(value);
        return;
      }
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      if (this._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    _async$_Future$immediateError$2: function(error, stackTrace, $T) {
      this._asyncCompleteError$2(error, stackTrace);
    },
    _async$_Future$immediate$1: function(value, $T) {
      this._asyncComplete$1(value);
    },
    $is_Future: true,
    $isFuture: true,
    static: {"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
        H.setRuntimeTypeInfo(t1, [$T]);
        return t1;
      }, _Future$immediate: function(value, $T) {
        var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
        H.setRuntimeTypeInfo(t1, [$T]);
        t1._async$_Future$immediate$1(value, $T);
        return t1;
      }, _Future$immediateError: function(error, stackTrace, $T) {
        var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
        H.setRuntimeTypeInfo(t1, [$T]);
        t1._async$_Future$immediateError$2(error, stackTrace, $T);
        return t1;
      }, _Future__chainFutures: function(source, target) {
        var t1;
        target.set$_isChained(true);
        t1 = J.getInterceptor(source);
        if (typeof source === "object" && source !== null && !!t1.$is_Future)
          if (source._state >= 4)
            P._Future__propagateToListeners(source, target);
          else
            source._addListener$1(target);
        else
          source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners.set$_nextListener(null);
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (; true;) {
          t2 = {};
          if (!t1.source_4.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            asyncError = t1.source_4.get$_error();
            t2 = t1.source_4.get$_zone();
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners.get$_nextListener() != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          if (hasError) {
            t3 = t1.source_4.get$_zone();
            t4 = listeners.get$_zone();
            t3.toString;
            t4.toString;
            t3 = t4 == null ? t3 != null : t4 !== t3;
          } else
            t3 = false;
          if (t3) {
            asyncError = t1.source_4.get$_error();
            t2 = t1.source_4.get$_zone();
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          t3 = $.Zone__current;
          t4 = listeners.get$_zone();
          if (t3 == null ? t4 != null : t3 !== t4) {
            t2 = listeners.get$_zone();
            t2.toString;
            P._rootRun(t2, null, t2, new P._Future__propagateToListeners_closure(t1, listeners));
            return;
          }
          t2.listenerHasValue_1 = null;
          t2.listenerValueOrError_2 = null;
          t2.isPropagationAborted_3 = false;
          t3 = listeners.get$_zone();
          t3.toString;
          P._rootRun(t3, null, t3, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
          if (t2.isPropagationAborted_3)
            return;
          t3 = t2.listenerHasValue_1 === true;
          if (t3) {
            t4 = t2.listenerValueOrError_2;
            t5 = J.getInterceptor(t4);
            t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
            t4 = t5;
          } else
            t4 = false;
          if (t4) {
            chainSource = t2.listenerValueOrError_2;
            t2 = J.getInterceptor(chainSource);
            if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
              listeners.set$_isChained(true);
              t1.source_4 = chainSource;
              continue;
            }
            P._Future__chainFutures(chainSource, listeners);
            return;
          }
          if (t3) {
            listeners0 = listeners._removeListeners$0();
            listeners._setValue$1(t2.listenerValueOrError_2);
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t2.listenerValueOrError_2;
            listeners._setError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
          }
          t1.source_4 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "": "Closure;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    },
    $isFunction: true,
    $is_void_: true
  },
  _Future__chainFutures_closure: {
    "": "Closure;target_0",
    call$1: function(value) {
      this.target_0._complete$1(value);
    },
    $isFunction: true,
    $is_args1: true
  },
  _Future__chainFutures_closure0: {
    "": "Closure;target_1",
    call$2: function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    $isFunction: true,
    $is_args2: true,
    $is_args1: true
  },
  _Future__asyncComplete_closure: {
    "": "Closure;this_0,value_1",
    call$0: function() {
      this.this_0._complete$1(this.value_1);
    },
    $isFunction: true,
    $is_void_: true
  },
  _Future__asyncCompleteError_closure: {
    "": "Closure;this_0,error_1,stackTrace_2",
    call$0: function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    },
    $isFunction: true,
    $is_void_: true
  },
  _Future__propagateToListeners_closure: {
    "": "Closure;box_2,listener_3",
    call$0: function() {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
    },
    $isFunction: true,
    $is_void_: true
  },
  _Future__propagateToListeners_closure0: {
    "": "Closure;box_2,box_1,hasError_4,listener_5",
    call$0: function() {
      var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, t5, completeResult, exception;
      t1 = {};
      try {
        t2 = this.box_2;
        if (!this.hasError_4) {
          value = t2.source_4.get$_async$_value();
          t3 = this.listener_5;
          t4 = this.box_1;
          if (t3.get$_onValue() != null) {
            t4.listenerValueOrError_2 = t3._onValue$1(value);
            t4.listenerHasValue_1 = true;
          } else {
            t4.listenerValueOrError_2 = value;
            t4.listenerHasValue_1 = true;
          }
        } else {
          asyncError = t2.source_4.get$_error();
          t3 = this.listener_5;
          test = t3.get$_errorTest();
          matchesTest = true;
          if (test != null)
            matchesTest = test.call$1(J.get$error$x(asyncError));
          t4 = matchesTest === true && t3.get$_onError() != null;
          t5 = this.box_1;
          if (t4) {
            errorCallback = t3.get$_onError();
            t5.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
            t5.listenerHasValue_1 = true;
          } else {
            t5.listenerValueOrError_2 = asyncError;
            t5.listenerHasValue_1 = false;
          }
          t4 = t5;
        }
        if (t3.get$_whenCompleteAction() != null) {
          completeResult = t3._whenCompleteAction$0();
          t1.completeResult_0 = completeResult;
          t5 = J.getInterceptor(completeResult);
          if (typeof completeResult === "object" && completeResult !== null && !!t5.$isFuture) {
            t3.set$_isChained(true);
            t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(t2, t3), new P._Future__propagateToListeners__closure0(t1, t3));
            t4.isPropagationAborted_3 = true;
          }
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        if (this.hasError_4) {
          t1 = J.get$error$x(this.box_2.source_4.get$_error());
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this.box_1;
        if (t1)
          t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t2.listenerValueOrError_2 = new P._AsyncError(e, s);
        t2.listenerHasValue_1 = false;
      }

    },
    $isFunction: true,
    $is_void_: true
  },
  _Future__propagateToListeners__closure: {
    "": "Closure;box_2,listener_6",
    call$1: function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
    },
    $isFunction: true,
    $is_args1: true
  },
  _Future__propagateToListeners__closure0: {
    "": "Closure;box_0,listener_7",
    call$2: function(error, stackTrace) {
      var t1, t2, t3, completeResult;
      t1 = this.box_0;
      t2 = t1.completeResult_0;
      t3 = J.getInterceptor(t2);
      if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    $isFunction: true,
    $is_args2: true,
    $is_args1: true
  },
  Stream: {
    "": "Object;",
    map$1: function(_, convert) {
      var t1 = new P._MapStream(convert, this);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
      return t1;
    },
    reduce$1: function(_, combine) {
      var t1, result;
      t1 = {};
      result = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.seenFirst_0 = false;
      t1.value_1 = null;
      t1.subscription_2 = null;
      t1.subscription_2 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_reduce_closure(t1, this, combine, result), true, new P.Stream_reduce_closure0(t1, result), result.get$_completeError());
      return result;
    },
    contains$1: function(_, needle) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
      return future;
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
      future.$builtinTypeInfo = [J.JSInt];
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var result, future;
      result = [];
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
      return future;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    },
    get$last: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.result_0 = null;
      t1.foundResult_1 = false;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
      return future;
    },
    $isStream: true
  },
  Stream_Stream$fromIterable_closure: {
    "": "Closure;T_0,data_1",
    call$0: function() {
      var t1, t2;
      t1 = this.data_1;
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      t2 = new P._IterablePendingEvents(t2, 0);
      H.setRuntimeTypeInfo(t2, [this.T_0]);
      return t2;
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_reduce_closure: {
    "": "Closure;box_0,this_1,combine_2,result_3",
    call$1: function(element) {
      var t1 = this.box_0;
      if (t1.seenFirst_0)
        P._runUserCode(new P.Stream_reduce__closure(t1, this.combine_2, element), new P.Stream_reduce__closure0(t1, this.this_1), P._cancelAndErrorClosure(t1.subscription_2, this.result_3));
      else {
        t1.value_1 = element;
        t1.seenFirst_0 = true;
      }
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_reduce__closure: {
    "": "Closure;box_0,combine_4,element_5",
    call$0: function() {
      return this.combine_4.call$2(this.box_0.value_1, this.element_5);
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_reduce__closure0: {
    "": "Closure;box_0,this_6",
    call$1: function(newValue) {
      this.box_0.value_1 = newValue;
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_reduce_closure0: {
    "": "Closure;box_0,result_7",
    call$0: function() {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.result_7;
      if (!t1.seenFirst_0)
        t2._completeError$1(new P.StateError("No elements"));
      else
        t2._complete$1(t1.value_1);
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_contains_closure: {
    "": "Closure;box_0,this_1,needle_2,future_3",
    call$1: function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_contains__closure: {
    "": "Closure;needle_4,element_5",
    call$0: function() {
      return J.$eq(this.element_5, this.needle_4);
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_contains__closure0: {
    "": "Closure;box_0,future_6",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_contains_closure0: {
    "": "Closure;future_7",
    call$0: function() {
      this.future_7._complete$1(false);
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_forEach_closure: {
    "": "Closure;box_0,this_1,action_2,future_3",
    call$1: function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_forEach__closure: {
    "": "Closure;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_forEach__closure0: {
    "": "Closure;",
    call$1: function(_) {
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_forEach_closure0: {
    "": "Closure;future_6",
    call$0: function() {
      this.future_6._complete$1(null);
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_length_closure: {
    "": "Closure;box_0",
    call$1: function(_) {
      var t1 = this.box_0;
      t1.count_0 = t1.count_0 + 1;
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_length_closure0: {
    "": "Closure;box_0,future_1",
    call$0: function() {
      this.future_1._complete$1(this.box_0.count_0);
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_isEmpty_closure: {
    "": "Closure;box_0,future_1",
    call$1: function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_isEmpty_closure0: {
    "": "Closure;future_2",
    call$0: function() {
      this.future_2._complete$1(true);
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_toList_closure: {
    "": "Closure;this_0,result_1",
    call$1: function(data) {
      this.result_1.push(data);
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_toList_closure0: {
    "": "Closure;result_2,future_3",
    call$0: function() {
      this.future_3._complete$1(this.result_2);
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_first_closure: {
    "": "Closure;box_0,this_1,future_2",
    call$1: function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_first_closure0: {
    "": "Closure;future_3",
    call$0: function() {
      this.future_3._completeError$1(new P.StateError("No elements"));
    },
    $isFunction: true,
    $is_void_: true
  },
  Stream_last_closure: {
    "": "Closure;box_0,this_1",
    call$1: function(value) {
      var t1 = this.box_0;
      t1.foundResult_1 = true;
      t1.result_0 = value;
    },
    $isFunction: true,
    $is_args1: true
  },
  Stream_last_closure0: {
    "": "Closure;box_0,future_2",
    call$0: function() {
      var t1 = this.box_0;
      if (t1.foundResult_1) {
        this.future_2._complete$1(t1.result_0);
        return;
      }
      this.future_2._completeError$1(new P.StateError("No elements"));
    },
    $isFunction: true,
    $is_void_: true
  },
  StreamSubscription: {
    "": "Object;",
    $isStreamSubscription: true
  },
  _StreamController: {
    "": "Object;",
    get$stream: function(_) {
      var t1 = new P._ControllerStream(this);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    get$hasListener: function() {
      return (this._state & 1) !== 0;
    },
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      var t1, state;
      if ((this._state & 8) === 0) {
        t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      state = this._varData;
      if (state.get$varData() == null)
        state.set$varData(new P._StreamImplEvents(null, null, 0));
      return state.get$varData();
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    addStream$2$cancelOnError: function(source, cancelOnError) {
      var t1, t2, t3, t4, addState;
      t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 2) !== 0)
        return P._Future$immediate(null, null);
      t1 = this._varData;
      t2 = P._Future$(null);
      t3 = this.get$_async$_add();
      t4 = cancelOnError ? P._AddStreamState_makeErrorHandler(this) : this.get$_addError();
      t4 = source.listen$4$cancelOnError$onDone$onError(t3, cancelOnError, this.get$_close(), t4);
      addState = new P._StreamControllerAddStreamState(t1, t2, t4);
      H.setRuntimeTypeInfo(addState, [null]);
      t1 = this._state;
      if ((t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0)
        t4.pause$0(t4);
      this._varData = addState;
      this._state = this._state | 8;
      return t2;
    },
    addStream$1: function(source) {
      return this.addStream$2$cancelOnError(source, true);
    },
    add$1: function(_, value) {
      if (this._state >= 4)
        throw H.wrapException(this._badEventState$0());
      this._async$_add$1(value);
    },
    get$add: function(_receiver) {
      return new P.BoundClosure$i1(this, P._StreamController.prototype.add$1, _receiver, "add$1");
    },
    close$0: function(_) {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._doneFuture;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      t1 |= 4;
      this._state = t1;
      if (this._doneFuture == null) {
        t2 = P._Future$(null);
        this._doneFuture = t2;
        if ((t1 & 2) !== 0)
          t2._complete$1(null);
      }
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0) {
        t1 = this._ensurePendingEvents$0();
        t1.add$1(t1, C.C__DelayedDone);
      }
      return this._doneFuture;
    },
    get$close: function(_receiver) {
      return new H.BoundClosure$i0(this, P._StreamController.prototype.close$0, _receiver, "close$0");
    },
    _async$_add$1: function(value) {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0) {
        t1 = this._ensurePendingEvents$0();
        t2 = new P._DelayedData(value, null);
        H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "_StreamController", 0)]);
        t1.add$1(t1, t2);
      }
    },
    get$_async$_add: function() {
      return new H.BoundClosure$1(this, P._StreamController.prototype._async$_add$1, null, "_async$_add$1");
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0) {
        t1 = this._ensurePendingEvents$0();
        t1.add$1(t1, new P._DelayedError(error, stackTrace, null));
      }
    },
    get$_addError: function() {
      return new P.BoundClosure$20(this, P._StreamController.prototype._addError$2, null, "_addError$2");
    },
    _close$0: function() {
      var addState = this._varData;
      this._varData = addState.get$varData();
      this._state = this._state & 4294967287;
      addState.complete$0(addState);
    },
    get$_close: function() {
      return new P.BoundClosure$0(this, P._StreamController.prototype._close$0, null, "_close$0");
    },
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(new P.StateError("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
      H.setRuntimeTypeInfo(subscription, [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state | 1;
      this._state = t2;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var t1, future;
      if ((this._state & 8) !== 0)
        this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      t1 = new P._StreamController__recordCancel_complete(this);
      future = P._runGuarded(this.get$_onCancel());
      if (future != null)
        future = future.whenComplete$1(t1);
      else
        t1.call$0();
      return future;
    },
    _recordPause$1: function(subscription) {
      var addState;
      if ((this._state & 8) !== 0) {
        addState = this._varData;
        addState.pause$0(addState);
      }
      P._runGuarded(this.get$_onPause());
    },
    _recordResume$1: function(subscription) {
      if ((this._state & 8) !== 0)
        this._varData.resume$0();
      P._runGuarded(this.get$_onResume());
    }
  },
  _StreamController__subscribe_closure: {
    "": "Closure;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    },
    $isFunction: true,
    $is_void_: true
  },
  _StreamController__recordCancel_complete: {
    "": "Closure;this_0",
    call$0: function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    },
    $isFunction: true,
    $is_void_: true
  },
  _SyncStreamControllerDispatch: {
    "": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  },
  _AsyncStreamControllerDispatch: {
    "": "Object;",
    _sendData$1: function(data) {
      var t1, t2;
      t1 = this.get$_subscription();
      t2 = new P._DelayedData(data, null);
      H.setRuntimeTypeInfo(t2, [null]);
      t1._addPending$1(t2);
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  },
  _AsyncStreamController: {
    "": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "": "_StreamController+_AsyncStreamControllerDispatch;",
    $as_StreamController: null
  },
  _SyncStreamController: {
    "": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__SyncStreamControllerDispatch: {
    "": "_StreamController+_SyncStreamControllerDispatch;",
    $as_StreamController: null
  },
  _NoCallbacks: {
    "": "Object;",
    get$_onListen: function() {
      return;
    },
    get$_onPause: function() {
      return;
    },
    get$_onResume: function() {
      return;
    },
    get$_onCancel: function() {
      return;
    }
  },
  _NoCallbackAsyncStreamController: {
    "": "_StreamController__AsyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
  },
  _StreamController__AsyncStreamControllerDispatch0: {
    "": "_StreamController+_AsyncStreamControllerDispatch;",
    $as_StreamController: null
  },
  _NoCallbackSyncStreamController: {
    "": "_StreamController__SyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
  },
  _StreamController__SyncStreamControllerDispatch0: {
    "": "_StreamController+_SyncStreamControllerDispatch;",
    $as_StreamController: null
  },
  _ControllerStream: {
    "": "_StreamImpl;_async$_controller",
    _createSubscription$1: function(cancelOnError) {
      return this._async$_controller._subscribe$1(cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true,
    $as_StreamImpl: null,
    $asStream: null
  },
  _ControllerSubscription: {
    "": "_BufferingStreamSubscription;_async$_controller<,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this.get$_async$_controller()._recordCancel$1(this);
    },
    get$_onCancel: function() {
      return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onCancel$0, null, "_onCancel$0");
    },
    _onPause$0: function() {
      this.get$_async$_controller()._recordPause$1(this);
    },
    get$_onPause: function() {
      return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
    },
    _onResume$0: function() {
      this.get$_async$_controller()._recordResume$1(this);
    },
    get$_onResume: function() {
      return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
    },
    $as_BufferingStreamSubscription: null,
    $asStreamSubscription: null
  },
  _AddStreamState: {
    "": "Object;",
    pause$0: function(_) {
      var t1 = this.addSubscription;
      t1.pause$0(t1);
    },
    resume$0: function() {
      this.addSubscription.resume$0();
    },
    cancel$0: function() {
      this.addSubscription.cancel$0();
      this.addStreamFuture._asyncComplete$1(null);
    },
    complete$0: function(_) {
      this.addStreamFuture._asyncComplete$1(null);
    }
  },
  _AddStreamState_makeErrorHandler_closure: {
    "": "Closure;controller_0",
    call$2: function(e, s) {
      var t1 = this.controller_0;
      t1._addError$2(e, s);
      t1._close$0();
    },
    $isFunction: true,
    $is_args2: true
  },
  _StreamControllerAddStreamState: {
    "": "_AddStreamState;varData@,addStreamFuture,addSubscription",
    $as_AddStreamState: null
  },
  _EventSink: {
    "": "Object;"
  },
  _BufferingStreamSubscription: {
    "": "Object;_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (J.get$isEmpty$asx(pendingEvents) !== true) {
        this._state = (this._state | 64) >>> 0;
        this._pending.schedule$1(this);
      }
    },
    onData$1: function(handleData) {
      $.Zone__current.toString;
      this._onData = handleData;
    },
    onError$1: function(_, handleError) {
      if (handleError == null)
        handleError = P._nullErrorHandler$closure;
      this._onError = P._registerErrorHandler(handleError, $.Zone__current);
    },
    onDone$1: function(handleDone) {
      if (handleDone == null)
        handleDone = P._nullDoneHandler$closure;
      $.Zone__current.toString;
      this._onDone = handleDone;
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && J.get$isEmpty$asx(this._pending) !== true)
            this._pending.schedule$1(this);
          else {
            t1 = (this._state & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    get$_isInputPaused: function() {
      return (this._state & 4) !== 0;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else {
        t1 = new P._DelayedData(data, null);
        H.setRuntimeTypeInfo(t1, [null]);
        this._addPending$1(t1);
      }
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: function() {
    },
    get$_onPause: function() {
      return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
    },
    _onResume$0: function() {
    },
    get$_onResume: function() {
      return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
    },
    _onCancel$0: function() {
    },
    get$_onCancel: function() {
      return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onCancel$0, null, "_onCancel$0");
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      J.add$1$ax(pending, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2, t3;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        t3 = J.getInterceptor(t1);
        if (typeof t1 === "object" && t1 !== null && !!t3.$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2, t3;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      t3 = J.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused;
      if ((this._state & 64) !== 0 && J.get$isEmpty$asx(this._pending) === true) {
        t1 = (this._state & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = this._pending;
            t1 = t1 == null || J.get$isEmpty$asx(t1) === true;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._state = (this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = this._state;
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        this._state = (this._state & 4294967263) >>> 0;
      }
      t1 = this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    $isStreamSubscription: true,
    static: {"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "": "Closure;this_0,error_1,stackTrace_2",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._zone;
      t3 = $.Zone__current;
      t2.toString;
      t3.toString;
      if (t3 == null ? t2 != null : t3 !== t2)
        P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
      else {
        t3 = t1._onError;
        t4 = J.getInterceptor(t3);
        t5 = this.error_1;
        if (!!t4.$is_args2)
          t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
        else
          t2.runUnaryGuarded$2(t3, t5);
      }
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $isFunction: true,
    $is_void_: true
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "": "Closure;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $isFunction: true,
    $is_void_: true
  },
  _StreamImpl: {
    "": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(subscription, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    _onListen$1: function(subscription) {
    },
    get$_onListen: function() {
      return new H.BoundClosure$1(this, P._StreamImpl.prototype._onListen$1, null, "_onListen$1");
    },
    $asStream: null
  },
  _GeneratedStreamImpl: {
    "": "_StreamImpl;_pending,_isUsed",
    _pending$0: function() {
      return this._pending.call$0();
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2, subscription;
      if (this._isUsed)
        throw H.wrapException(new P.StateError("Stream has already been listened to."));
      this._isUsed = true;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
      H.setRuntimeTypeInfo(subscription, [null]);
      subscription._setPendingEvents$1(this._pending$0());
      return subscription;
    },
    $as_StreamImpl: null,
    $asStream: null
  },
  _IterablePendingEvents: {
    "": "_PendingEvents;_async$_iterator,_state",
    get$isEmpty: function(_) {
      return this._async$_iterator == null;
    },
    handleNext$1: function(dispatch) {
      var isDone, e, s, t1, exception;
      t1 = this._async$_iterator;
      if (t1 == null)
        throw H.wrapException(new P.StateError("No events pending."));
      isDone = null;
      try {
        isDone = !t1.moveNext$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this._async$_iterator = null;
        dispatch._sendError$2(e, s);
        return;
      }

      if (isDone !== true)
        dispatch._sendData$1(this._async$_iterator._dev$_current);
      else {
        this._async$_iterator = null;
        dispatch._sendDone$0();
      }
    }
  },
  _DelayedEvent: {
    "": "Object;next@"
  },
  _DelayedData: {
    "": "_DelayedEvent;value>,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "": "_DelayedEvent;error>,stackTrace<,next",
    error$2: function($receiver, arg0, arg1) {
      return this.error.call$2(arg0, arg1);
    },
    error$1: function($receiver, arg0) {
      return this.error.call$1(arg0);
    },
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(new P.StateError("No events after a done."));
    }
  },
  _PendingEvents: {
    "": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "": "Closure;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    },
    $isFunction: true,
    $is_void_: true
  },
  _StreamImplEvents: {
    "": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _StreamIteratorImpl: {
    "": "Object;_subscription,_async$_current,_futureOrPrefetch,_state",
    get$current: function() {
      return this._async$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      var t1, prefetch;
      t1 = this._state;
      if (t1 === 1)
        return P._Future$immediate(false, J.JSBool);
      if (t1 === 2)
        throw H.wrapException(new P.StateError("Already waiting for next."));
      if (t1 === 0) {
        this._state = 2;
        t1 = P._Future$(J.JSBool);
        this._futureOrPrefetch = t1;
        return t1;
      } else
        switch (t1) {
          case 3:
            this._state = 0;
            this._async$_current = this._futureOrPrefetch;
            this._futureOrPrefetch = null;
            this._subscription.resume$0();
            return P._Future$immediate(true, J.JSBool);
          case 4:
            prefetch = this._futureOrPrefetch;
            this._clear$0();
            return P._Future$immediateError(prefetch, null, J.JSBool);
          case 5:
            this._clear$0();
            return P._Future$immediate(false, J.JSBool);
          default:
        }
    },
    _clear$0: function() {
      this._subscription = null;
      this._futureOrPrefetch = null;
      this._async$_current = null;
      this._state = 1;
    },
    cancel$0: function() {
      var subscription, hasNext;
      subscription = this._subscription;
      if (this._state === 2) {
        hasNext = this._futureOrPrefetch;
        this._clear$0();
        hasNext._complete$1(false);
      } else
        this._clear$0();
      return subscription.cancel$0();
    },
    get$cancel: function() {
      return new P.BoundClosure$0(this, P._StreamIteratorImpl.prototype.cancel$0, null, "cancel$0");
    },
    _onData$1: function(data) {
      var hasNext, t1;
      if (this._state === 2) {
        this._async$_current = data;
        hasNext = this._futureOrPrefetch;
        this._futureOrPrefetch = null;
        this._state = 0;
        hasNext._complete$1(true);
        return;
      }
      t1 = this._subscription;
      t1.pause$0(t1);
      this._futureOrPrefetch = data;
      this._state = 3;
    },
    get$_onData: function() {
      return new H.BoundClosure$1(this, P._StreamIteratorImpl.prototype._onData$1, null, "_onData$1");
    },
    _onError$2: function(error, stackTrace) {
      var hasNext, t1;
      if (this._state === 2) {
        hasNext = this._futureOrPrefetch;
        this._clear$0();
        hasNext._completeError$2(error, stackTrace);
        return;
      }
      t1 = this._subscription;
      t1.pause$0(t1);
      this._futureOrPrefetch = error;
      this._state = 4;
    },
    get$_onError: function() {
      return new P.BoundClosure$2(this, P._StreamIteratorImpl.prototype._onError$2, null, "_onError$2");
    },
    _onDone$0: function() {
      var hasNext, t1;
      if (this._state === 2) {
        hasNext = this._futureOrPrefetch;
        this._clear$0();
        hasNext._complete$1(false);
        return;
      }
      t1 = this._subscription;
      t1.pause$0(t1);
      this._futureOrPrefetch = null;
      this._state = 5;
    },
    get$_onDone: function() {
      return new P.BoundClosure$0(this, P._StreamIteratorImpl.prototype._onDone$0, null, "_onDone$0");
    },
    _StreamIteratorImpl$1: function(stream, $T) {
      var t1, t2;
      t1 = this.get$_onData();
      t2 = this.get$_onError();
      this._subscription = stream.listen$4$cancelOnError$onDone$onError(t1, true, this.get$_onDone(), t2);
    },
    static: {"": "_StreamIteratorImpl__STATE_FOUND,_StreamIteratorImpl__STATE_DONE,_StreamIteratorImpl__STATE_MOVING,_StreamIteratorImpl__STATE_EXTRA_DATA,_StreamIteratorImpl__STATE_EXTRA_ERROR,_StreamIteratorImpl__STATE_EXTRA_DONE", _StreamIteratorImpl$: function(stream, $T) {
        var t1 = new P._StreamIteratorImpl(null, null, null, 0);
        H.setRuntimeTypeInfo(t1, [$T]);
        t1._StreamIteratorImpl$1(stream, $T);
        return t1;
      }}
  },
  _cancelAndError_closure: {
    "": "Closure;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    },
    $isFunction: true,
    $is_void_: true
  },
  _cancelAndErrorClosure_closure: {
    "": "Closure;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    },
    $isFunction: true,
    $is_args2: true
  },
  _cancelAndValue_closure: {
    "": "Closure;future_0,value_1",
    call$0: function() {
      return this.future_0._complete$1(this.value_1);
    },
    $isFunction: true,
    $is_void_: true
  },
  _ForwardingStream: {
    "": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4, result;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      result = new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null);
      H.setRuntimeTypeInfo(result, [t1, t2]);
      result._ForwardingStreamSubscription$2(this, cancelOnError, t1, t2);
      result.onData$1(onData);
      result.onError$1(result, onError);
      result.onDone$1(onDone);
      return result;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "": "_BufferingStreamSubscription;_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(t1);
    },
    get$_onPause: function() {
      return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
    },
    _onResume$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    },
    get$_onResume: function() {
      return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
    },
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    get$_onCancel: function() {
      return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onCancel$0, null, "_onCancel$0");
    },
    _handleData$1: function(data) {
      this._stream._handleData$2(data, this);
    },
    get$_handleData: function() {
      return new H.BoundClosure$1(this, P._ForwardingStreamSubscription.prototype._handleData$1, null, "_handleData$1");
    },
    _handleError$2: function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    },
    get$_handleError: function() {
      return new P.BoundClosure$20(this, P._ForwardingStreamSubscription.prototype._handleError$2, null, "_handleError$2");
    },
    _handleDone$0: function() {
      this._close$0();
    },
    get$_handleDone: function() {
      return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._handleDone$0, null, "_handleDone$0");
    },
    _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    },
    $asStreamSubscription: function($S, $T) {
      return [$T];
    }
  },
  _MapStream: {
    "": "_ForwardingStream;_transform,_async$_source",
    _transform$1: function(arg0) {
      return this._transform.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception, t1;
      outputEvent = null;
      try {
        outputEvent = this._transform$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
        return;
      }

      sink._async$_add$1(outputEvent);
    },
    $as_ForwardingStream: null,
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _BaseZone: {
    "": "Object;",
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        t1 = this.runBinary$3(f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    }
  },
  _BaseZone_bindCallback_closure: {
    "": "Closure;this_0,registered_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.registered_1);
    },
    $isFunction: true,
    $is_void_: true
  },
  _BaseZone_bindCallback_closure0: {
    "": "Closure;this_2,registered_3",
    call$0: function() {
      return this.this_2.run$1(this.registered_3);
    },
    $isFunction: true,
    $is_void_: true
  },
  _BaseZone_bindUnaryCallback_closure: {
    "": "Closure;this_0,registered_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    },
    $isFunction: true,
    $is_args1: true
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "": "Closure;this_2,registered_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    },
    $isFunction: true,
    $is_args1: true
  },
  _rootHandleUncaughtError_closure: {
    "": "Closure;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    },
    $isFunction: true,
    $is_void_: true
  },
  _rootHandleUncaughtError__closure: {
    "": "Closure;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace, t2;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null) {
        t2 = J.getInterceptor(t1);
        t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
      } else
        t2 = false;
      if (t2)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    },
    $isFunction: true,
    $is_void_: true
  },
  _RootZone: {
    "": "_BaseZone;",
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      return P._rootRunBinary(this, null, this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  _defaultEquals: function(a, b) {
    return J.$eq(a, b);
  },
  _defaultHashCode: function(a) {
    return J.get$hashCode$(a);
  },
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    var t1 = new P._HashMap(0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$K, $V]);
    return t1;
  },
  HashSet_HashSet$identity: function($E) {
    var t1 = new P._IdentityHashSet(0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$E]);
    return t1;
  },
  _iterableToString: function(iterable) {
    var parts, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, iterable))
      return "(...)";
    t1 = $.get$_toStringVisiting();
    t1.add$1(t1, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  },
  _iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (it.moveNext$0() !== true)
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (it.moveNext$0() !== true) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (it.moveNext$0() !== true) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0() === true; penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
    H.setRuntimeTypeInfo(t1, [$K, $V]);
    return t1;
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
    H.setRuntimeTypeInfo(t1, [$E]);
    return t1;
  },
  Maps_mapToString: function(m) {
    var t1, result, i, t2;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i)
      if (t2[i] === m)
        return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      var t1 = new P.HashMapKeyIterable(this);
      H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      return t1;
    },
    get$values: function(_) {
      var t1 = new P.HashMapKeyIterable(this);
      H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, rest;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    },
    $index: function(_, key) {
      var strings, t1, entry, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      }
    },
    $indexSet: function(_, key, value) {
      var strings, table, nums, rest, hash, bucket, t1, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          if (table == null)
            table["<non-identifier-key>"] = table;
          else
            table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        if (strings[key] == null) {
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
        if (value == null)
          strings[key] = strings;
        else
          strings[key] = value;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          if (table == null)
            table["<non-identifier-key>"] = table;
          else
            table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        if (nums[key] == null) {
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
        if (value == null)
          nums[key] = nums;
        else
          nums[key] = value;
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          if (table == null)
            table["<non-identifier-key>"] = table;
          else
            table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          t1 = [key, value];
          if (t1 == null)
            rest[hash] = rest;
          else
            rest[hash] = t1;
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            this._collection$_length = this._collection$_length + 1;
            this._keys = null;
          }
        }
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value;
      if (this.containsKey$1(key))
        return this.$index(this, key);
      value = ifAbsent.call$0();
      this.$indexSet(this, key, value);
      return value;
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(this, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true
  },
  _HashMap_values_closure: {
    "": "Closure;this_0",
    call$1: function(each) {
      var t1 = this.this_0;
      return t1.$index(t1, each);
    },
    $isFunction: true,
    $is_args1: true
  },
  HashMapKeyIterable: {
    "": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $asIterableBase: null,
    $asIterable: null,
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      var t1 = new P.LinkedHashMapKeyIterable(this);
      H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      return t1;
    },
    get$values: function(_) {
      var t1 = new P.LinkedHashMapKeyIterable(this);
      H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, rest;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    },
    addAll$1: function(_, other) {
      other.forEach$1(other, new P._LinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_value();
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$_value();
      }
    },
    $indexSet: function(_, key, value) {
      var strings, table, cell, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        cell = strings[key];
        if (cell == null)
          strings[key] = this._newLinkedCell$2(key, value);
        else
          cell.set$_value(value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        cell = nums[key];
        if (cell == null)
          nums[key] = this._newLinkedCell$2(key, value);
        else
          cell.set$_value(value);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$2(key, value)];
        else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$_value(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value;
      if (this.containsKey$1(key))
        return this.$index(this, key);
      value = ifAbsent.call$0();
      this.$indexSet(this, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var rest, bucket, index, cell;
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.get$_value();
      }
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell.get$_value());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      this._collection$_length = this._collection$_length - 1;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true
  },
  _LinkedHashMap_values_closure: {
    "": "Closure;this_0",
    call$1: function(each) {
      var t1 = this.this_0;
      return t1.$index(t1, each);
    },
    $isFunction: true,
    $is_args1: true
  },
  _LinkedHashMap_addAll_closure: {
    "": "Closure;this_0",
    call$2: function(key, value) {
      var t1 = this.this_0;
      t1.$indexSet(t1, key, value);
    },
    $isFunction: true,
    $is_args2: true
  },
  LinkedHashMapCell: {
    "": "Object;_key<,_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.get$_next();
      }
    },
    $asIterableBase: null,
    $asIterable: null,
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _HashSet: {
    "": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_elements",
    _newSet$0: function() {
      var t1 = new P._HashSet(0, null, null, null, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$iterator: function(_) {
      var t1 = new P.HashSetIterator(this, this._computeElements$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(this, object) ? object : null;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var strings, table, nums, rest, hash, bucket;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [element];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(element);
        }
        this._collection$_length = this._collection$_length + 1;
        this._elements = null;
        return true;
      }
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = objects.get$iterator(objects); t1.moveNext$0();)
        this.add$1(this, t1.get$current());
    },
    remove$1: function(_, object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = 0;
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $as_HashSetBase: null,
    $asSet: null,
    $asIterable: null,
    $isSet: true,
    $isEfficientLength: true,
    $isIterable: true
  },
  _IdentityHashSet: {
    "": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
    _newSet$0: function() {
      var t1 = new P._IdentityHashSet(0, null, null, null, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    },
    $as_HashSet: null,
    $asSet: null,
    $asIterable: null
  },
  HashSetIterator: {
    "": "Object;_set,_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    _newSet$0: function() {
      var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      H.setRuntimeTypeInfo(t1, [null]);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(this, object) ? object : null;
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_element();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    get$first: function(_) {
      var t1 = this._first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return t1.get$_element();
    },
    get$last: function(_) {
      var t1 = this._last;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return t1.get$_element();
    },
    add$1: function(_, element) {
      var strings, table, nums, rest, hash, bucket;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._newLinkedCell$1(element));
        }
        return true;
      }
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
        this.add$1(this, t1.get$current());
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_element(), element))
          return i;
      return -1;
    },
    $as_HashSetBase: null,
    $asSet: null,
    $asIterable: null,
    $isSet: true,
    $isEfficientLength: true,
    $isIterable: true
  },
  LinkedHashSetCell: {
    "": "Object;_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_element();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  UnmodifiableListView: {
    "": "UnmodifiableListBase;_collection$_source",
    get$length: function(_) {
      return this._collection$_source.length;
    },
    $index: function(_, index) {
      var t1 = this._collection$_source;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asUnmodifiableListBase: null,
    $asList: null,
    $asIterable: null
  },
  _HashSetBase: {
    "": "IterableBase;",
    union$1: function(other) {
      var t1 = this._newSet$0();
      t1.addAll$1(t1, this);
      t1.addAll$1(t1, other);
      return t1;
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i, element, i0;
      if (growable) {
        result = P.List_List(null, H.getTypeArgumentByIndex(this, 0));
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        result = Array(this.get$length(this));
        result.fixed$length = init;
        H.setRuntimeTypeInfo(result, [H.getTypeArgumentByIndex(this, 0)]);
      }
      for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
        element = t1.get$current();
        i0 = i + 1;
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = element;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    $asIterableBase: null,
    $asSet: null,
    $asIterable: null,
    $isSet: true,
    $isEfficientLength: true,
    $isIterable: true
  },
  IterableBase: {
    "": "Object;",
    map$1: function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    },
    where$1: function(_, f) {
      var t1 = new H.WhereIterable(this, f);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "IterableBase", 0)]);
      return t1;
    },
    expand$1: function(_, f) {
      var t1 = new H.ExpandIterable(this, f);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "IterableBase", 0), null]);
      return t1;
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
        if (J.$eq(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
    },
    reduce$1: function(_, combine) {
      var iterator, value;
      iterator = this.get$iterator(this);
      if (iterator.moveNext$0() !== true)
        throw H.wrapException(new P.StateError("No elements"));
      value = iterator.get$current();
      for (; iterator.moveNext$0() === true;)
        value = combine.call$2(value, iterator.get$current());
      return value;
    },
    fold$2: function(_, initialValue, combine) {
      var t1, value;
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0() === true;)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    join$1: function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (iterator.moveNext$0() !== true)
        return "";
      buffer = P.StringBuffer$("");
      if (separator === "")
        do {
          t1 = H.S(iterator.get$current());
          buffer._contents = buffer._contents + t1;
        } while (iterator.moveNext$0() === true);
      else {
        buffer.write$1(H.S(iterator.get$current()));
        for (; iterator.moveNext$0() === true;) {
          buffer._contents = buffer._contents + separator;
          t1 = H.S(iterator.get$current());
          buffer._contents = buffer._contents + t1;
        }
      }
      return buffer._contents;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0() === true;)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return this.get$iterator(this).moveNext$0() !== true;
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    skipWhile$1: function(_, test) {
      var t1 = new H.SkipWhileIterable(this, test);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "IterableBase", 0)]);
      return t1;
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (it.moveNext$0() !== true)
        throw H.wrapException(P.StateError$("No elements"));
      return it.get$current();
    },
    get$last: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (it.moveNext$0() !== true)
        throw H.wrapException(P.StateError$("No elements"));
      do
        result = it.get$current();
      while (it.moveNext$0() === true);
      return result;
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (it.moveNext$0() !== true)
        throw H.wrapException(new P.StateError("No elements"));
      result = it.get$current();
      if (it.moveNext$0() === true)
        throw H.wrapException(new P.StateError("More than one element"));
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element;
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
        element = t1.get$current();
        if (remaining === 0)
          return element;
        --remaining;
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P._iterableToString(this);
    },
    $isIterable: true,
    $asIterable: null
  },
  ListBase: {
    "": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  ListMixin: {
    "": "Object;",
    get$iterator: function(receiver) {
      var t1 = new H.ListIterator(receiver, this.get$length(receiver), 0, null);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      return t1;
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    contains$1: function(receiver, element) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    join$1: function(receiver, separator) {
      var $length, first, buffer, i, str;
      $length = this.get$length(receiver);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(this.$index(receiver, 0));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
        buffer = P.StringBuffer$(first);
        for (i = 1; i < $length; ++i) {
          buffer._contents = buffer._contents + separator;
          str = this.$index(receiver, i);
          str = typeof str === "string" ? str : H.S(str);
          buffer._contents = buffer._contents + str;
          if ($length !== this.get$length(receiver))
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        return buffer._contents;
      } else {
        buffer = P.StringBuffer$("");
        for (i = 0; i < $length; ++i) {
          str = this.$index(receiver, i);
          str = typeof str === "string" ? str : H.S(str);
          buffer._contents = buffer._contents + str;
          if ($length !== this.get$length(receiver))
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        return buffer._contents;
      }
    },
    where$1: function(receiver, test) {
      var t1 = new H.WhereIterable(receiver, test);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      return t1;
    },
    map$1: function(receiver, f) {
      var t1 = new H.MappedListIterable(receiver, f);
      H.setRuntimeTypeInfo(t1, [null, null]);
      return t1;
    },
    expand$1: function(receiver, f) {
      var t1 = new H.ExpandIterable(receiver, f);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0), null]);
      return t1;
    },
    reduce$1: function(receiver, combine) {
      var value, i;
      if (this.get$length(receiver) === 0)
        throw H.wrapException(new P.StateError("No elements"));
      value = this.$index(receiver, 0);
      for (i = 1; i < this.get$length(receiver); ++i)
        value = combine.call$2(value, this.$index(receiver, i));
      return value;
    },
    fold$2: function(receiver, initialValue, combine) {
      var $length, value, i;
      $length = this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    takeWhile$1: function(receiver, test) {
      var t1 = new H.TakeWhileIterable(receiver, test);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      return t1;
    },
    toList$1$growable: function(receiver, growable) {
      var result, i, t1;
      if (growable) {
        result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else {
        result = Array(this.get$length(receiver));
        result.fixed$length = init;
        H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      }
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    sort$1: function(receiver, compare) {
      H.Sort__doSort(receiver, 0, this.get$length(receiver) - 1, compare);
    },
    _rangeCheck$2: function(receiver, start, end) {
      if (start > this.get$length(receiver))
        throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver)));
      if (typeof end !== "number")
        return end.$lt();
      if (end < start || end > this.get$length(receiver))
        throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver)));
    },
    sublist$2: function(receiver, start, end) {
      var $length, result, i, t1;
      end = this.get$length(receiver);
      this._rangeCheck$2(receiver, start, end);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i) {
        t1 = this.$index(receiver, start + i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    getRange$2: function(receiver, start, end) {
      this._rangeCheck$2(receiver, start, end);
      return H.SubListIterable$(receiver, start, end, null);
    },
    indexOf$2: function(receiver, element, startIndex) {
      var t1, i;
      t1 = this.get$length(receiver);
      if (typeof startIndex !== "number")
        return startIndex.$ge();
      if (startIndex >= t1)
        return -1;
      if (startIndex < 0)
        startIndex = 0;
      for (i = startIndex; i < this.get$length(receiver); ++i)
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    get$reversed: function(receiver) {
      var t1 = new H.ReversedListIterable(receiver);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    toString$0: function(receiver) {
      var result, t1;
      t1 = $.get$_toStringVisiting();
      if (t1.contains$1(t1, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        t1 = $.get$_toStringVisiting();
        t1.add$1(t1, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        t1 = $.get$_toStringVisiting();
        t1.remove$1(t1, receiver);
      }
      return result.get$_contents();
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  Maps_mapToString_closure: {
    "": "Closure;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    },
    $isFunction: true,
    $is_args2: true
  },
  ListQueue: {
    "": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first: function(_) {
      var t1, t2;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    get$last: function(_) {
      var t1, t2, t3;
      t1 = this._head;
      t2 = this._tail;
      if (t1 === t2)
        throw H.wrapException(P.StateError$("No elements"));
      t1 = this._table;
      t3 = t1.length;
      t2 = (t2 - 1 & t3 - 1) >>> 0;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      this._modificationCount = this._modificationCount + 1;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      this._modificationCount = this._modificationCount + 1;
    },
    _grow$0: function() {
      var newTable, t1, t2, split;
      newTable = Array(this._table.length * 2);
      newTable.fixed$length = init;
      H.setRuntimeTypeInfo(newTable, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1;
      if (typeof 8 !== "number")
        return H.iae(8);
      t1 = Array(8);
      t1.fixed$length = init;
      H.setRuntimeTypeInfo(t1, [$E]);
      this._table = t1;
    },
    $asIterableBase: null,
    $asIterable: null,
    $isEfficientLength: true,
    $isIterable: true,
    static: {"": "ListQueue__INITIAL_CAPACITY"}
  },
  _ListQueueIterator: {
    "": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    "+current": 0,
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  }
}],
["dart.convert", "dart:convert", , P, {
  Codec: {
    "": "Object;"
  },
  Converter: {
    "": "Object;"
  },
  Encoding: {
    "": "Codec;",
    $asCodec: function() {
      return [J.JSString, [J.JSArray, J.JSInt]];
    }
  },
  HtmlEscapeMode: {
    "": "Object;_convert$_name,escapeLtGt,escapeQuot,escapeApos,escapeSlash",
    toString$0: function(_) {
      return this._convert$_name;
    },
    static: {"": "HtmlEscapeMode_UNKNOWN,HtmlEscapeMode_ATTRIBUTE,HtmlEscapeMode_ELEMENT"}
  },
  HtmlEscape: {
    "": "Converter;mode",
    _convert$3: function(text, start, end) {
      var t1, t2, t3, t4, t5, i, result, ch, replace, t6, str;
      if (typeof end !== "number")
        return H.iae(end);
      t1 = J.getInterceptor$asx(text);
      t2 = this.mode;
      t3 = t2.escapeSlash;
      t4 = t2.escapeLtGt;
      t5 = t2.escapeApos;
      t2 = t2.escapeQuot;
      i = start;
      result = null;
      for (; i < end; ++i) {
        ch = t1.$index(text, i);
        switch (ch) {
          case "&":
            replace = "&amp;";
            break;
          case "\u00a0":
            replace = "&nbsp;";
            break;
          case "\"":
            replace = t2 ? "&quot;" : null;
            break;
          case "'":
            replace = t5 ? "&#x27;" : null;
            break;
          case "<":
            replace = t4 ? "&lt;" : null;
            break;
          case ">":
            replace = t4 ? "&gt;" : null;
            break;
          case "/":
            replace = t3 ? "&#x2F;" : null;
            break;
          default:
            replace = null;
        }
        if (replace != null) {
          if (result == null) {
            t6 = t1.substring$2(text, start, i);
            result = new P.StringBuffer("");
            result._contents = t6;
          }
          result.toString;
          str = typeof replace === "string" ? replace : replace;
          result._contents = result._contents + str;
        } else if (result != null)
          result.write$1(ch);
      }
      return result != null ? J.toString$0(result) : null;
    },
    $asConverter: function() {
      return [J.JSString, J.JSString];
    }
  },
  Utf8Codec: {
    "": "Encoding;_allowMalformed",
    get$name: function(_) {
      return "utf-8";
    },
    get$encoder: function() {
      return new P.Utf8Encoder();
    }
  },
  Utf8Encoder: {
    "": "Converter;",
    $asConverter: function() {
      return [J.JSString, [J.JSArray, J.JSInt]];
    }
  },
  _Utf8Encoder: {
    "": "Object;_carry,_bufferIndex,_buffer",
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, t4, t5;
      t1 = this._buffer;
      t2 = this._bufferIndex;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = (240 | rune >>> 18) >>> 0;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = C.JSInt_methods.$shr(leadingSurrogate, 12);
        t5 = t1.length;
        if (t2 >= t5)
          return H.ioore(t1, t2);
        t1[t2] = (224 | t4) >>> 0;
        t4 = t3 + 1;
        this._bufferIndex = t4;
        t2 = C.JSInt_methods.$shr(leadingSurrogate, 6);
        if (t3 >= t5)
          return H.ioore(t1, t3);
        t1[t3] = 128 | t2 & 63;
        this._bufferIndex = t4 + 1;
        if (t4 >= t5)
          return H.ioore(t1, t4);
        t1[t4] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5, t6;
      if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = this._buffer, t2 = t1.length, t3 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        if (stringIndex >= t3)
          H.throwExpression(P.RangeError$value(stringIndex));
        codeUnit = str.charCodeAt(stringIndex);
        if (codeUnit <= 127) {
          t4 = this._bufferIndex;
          if (t4 >= t2)
            break;
          this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (stringIndex0 >= t3)
            H.throwExpression(P.RangeError$value(stringIndex0));
          if (this._writeSurrogate$2(codeUnit, str.charCodeAt(stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t4 = this._bufferIndex;
          t5 = t4 + 1;
          if (t5 >= t2)
            break;
          this._bufferIndex = t5;
          t6 = C.JSInt_methods.$shr(codeUnit, 6);
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = (192 | t6) >>> 0;
          this._bufferIndex = t5 + 1;
          t1[t5] = 128 | codeUnit & 63;
        } else {
          t4 = this._bufferIndex;
          if (t4 + 2 >= t2)
            break;
          t5 = t4 + 1;
          this._bufferIndex = t5;
          t6 = C.JSInt_methods.$shr(codeUnit, 12);
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = (224 | t6) >>> 0;
          t6 = t5 + 1;
          this._bufferIndex = t6;
          t4 = C.JSInt_methods.$shr(codeUnit, 6);
          if (t5 >= t2)
            return H.ioore(t1, t5);
          t1[t5] = 128 | t4 & 63;
          this._bufferIndex = t6 + 1;
          if (t6 >= t2)
            return H.ioore(t1, t6);
          t1[t6] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    },
    static: {"": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE"}
  },
  Utf8Decoder: {
    "": "Converter;_allowMalformed",
    convert$1: function(codeUnits) {
      var buffer, t1, decoder;
      buffer = P.StringBuffer$("");
      t1 = this._allowMalformed;
      decoder = new P._Utf8Decoder(t1, buffer, true, 0, 0, 0);
      decoder.convert$3(codeUnits, 0, codeUnits.length);
      if (decoder._expectedUnits > 0) {
        if (t1 !== true)
          H.throwExpression(P.FormatException$("Unfinished UTF-8 octet sequence"));
        buffer.write$1(P.String_String$fromCharCode(65533));
        decoder._convert$_value = 0;
        decoder._expectedUnits = 0;
        decoder._extraUnits = 0;
      }
      return buffer._contents;
    },
    $asConverter: function() {
      return [[J.JSArray, J.JSInt], J.JSString];
    }
  },
  _Utf8Decoder: {
    "": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
    convert$3: function(codeUnits, startIndex, endIndex) {
      var value, expectedUnits, extraUnits, t1, t2, i, t3, unit, charCodes, i0;
      value = this._convert$_value;
      expectedUnits = this._expectedUnits;
      extraUnits = this._extraUnits;
      this._convert$_value = 0;
      this._expectedUnits = 0;
      this._extraUnits = 0;
      $loop$0:
        for (t1 = this._stringSink, t2 = this._allowMalformed !== true, i = startIndex; true; i = i0) {
          $multibyte$2: {
            if (expectedUnits > 0) {
              t3 = codeUnits.length;
              do {
                if (i === endIndex)
                  break $loop$0;
                if (i < 0 || i >= t3)
                  return H.ioore(codeUnits, i);
                unit = codeUnits[i];
                if ((unit & 192) !== 128) {
                  if (t2)
                    throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSInt_methods.toRadixString$1(unit, 16)));
                  this._isFirstCharacter = false;
                  charCodes = P.List_List$filled(1, 65533, J.JSInt);
                  t3 = H.Primitives_stringFromCharCodes(charCodes);
                  t1._contents = t1._contents + t3;
                  expectedUnits = 0;
                  break $multibyte$2;
                } else {
                  value = (value << 6 | unit & 63) >>> 0;
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t3 = extraUnits - 1;
              if (t3 < 0 || t3 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t3);
              if (value <= C.List_127_2047_65535_1114111[t3]) {
                if (t2)
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              if (value > 1114111) {
                if (t2)
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
                value = 65533;
              }
              if (!this._isFirstCharacter || value !== 65279) {
                charCodes = P.List_List$filled(1, value, J.JSInt);
                t3 = H.Primitives_stringFromCharCodes(charCodes);
                t1._contents = t1._contents + t3;
              }
              this._isFirstCharacter = false;
            }
          }
          for (; i < endIndex; i = i0) {
            i0 = i + 1;
            if (i < 0 || i >= codeUnits.length)
              return H.ioore(codeUnits, i);
            unit = codeUnits[i];
            if (unit < 0) {
              if (t2)
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + C.JSInt_methods.toRadixString$1(-unit, 16)));
              charCodes = P.List_List$filled(1, 65533, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t1._contents = t1._contents + t3;
            } else if (unit <= 127) {
              this._isFirstCharacter = false;
              charCodes = P.List_List$filled(1, unit, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t1._contents = t1._contents + t3;
            } else {
              if ((unit & 224) === 192) {
                value = unit & 31;
                expectedUnits = 1;
                extraUnits = 1;
                continue $loop$0;
              }
              if ((unit & 240) === 224) {
                value = unit & 15;
                expectedUnits = 2;
                extraUnits = 2;
                continue $loop$0;
              }
              if ((unit & 248) === 240 && unit < 245) {
                value = unit & 7;
                expectedUnits = 3;
                extraUnits = 3;
                continue $loop$0;
              }
              if (t2)
                throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSInt_methods.toRadixString$1(unit, 16)));
              this._isFirstCharacter = false;
              charCodes = P.List_List$filled(1, 65533, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t1._contents = t1._contents + t3;
              value = 65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
          }
          break $loop$0;
        }
      if (expectedUnits > 0) {
        this._convert$_value = value;
        this._expectedUnits = expectedUnits;
        this._extraUnits = extraUnits;
      }
    },
    static: {"": "_Utf8Decoder__LIMITS"}
  }
}],
["dart.core", "dart:core", , P, {
  Comparable_compare: function(a, b) {
    return J.compareTo$1$ns(a, b);
  },
  Error_safeToString: function(object) {
    var buffer, t1, i, codeUnit, t2, charCodes;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10)
            buffer._contents = buffer._contents + "\\n";
          else if (codeUnit === 13)
            buffer._contents = buffer._contents + "\\r";
          else if (codeUnit === 9)
            buffer._contents = buffer._contents + "\\t";
          else {
            t2 = buffer._contents + "\\x";
            buffer._contents = t2;
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
            charCodes = P.List_List$filled(1, t2, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            buffer._contents = buffer._contents + t2;
          }
        else if (codeUnit === 92)
          buffer._contents = buffer._contents + "\\\\";
        else if (codeUnit === 34)
          buffer._contents = buffer._contents + "\\\"";
        else {
          charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      }
      t1 = buffer._contents + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: function(a, b) {
    return a == null ? b == null : a === b;
  },
  identityHashCode: function(object) {
    return H.objectHashCode(object);
  },
  List_List: function($length, $E) {
    var t1;
    if ($length == null) {
      t1 = [];
      t1.$builtinTypeInfo = [$E];
      return t1;
    }
    if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
      H.throwExpression(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
    t1 = new Array($length);
    t1.$builtinTypeInfo = [$E];
    t1.fixed$length = init;
    return t1;
  },
  List_List$filled: function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if (!J.$eq($length, 0) && fill != null)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  },
  List_List$from: function(other, growable, $E) {
    var list, t1, $length, fixedList, i;
    list = P.List_List(null, $E);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0() === true;)
      list.push(t1.get$current());
    if (growable)
      return list;
    $length = list.length;
    fixedList = Array($length);
    fixedList.fixed$length = init;
    H.setRuntimeTypeInfo(fixedList, [$E]);
    for (t1 = list.length, i = 0; i < $length; ++i) {
      if (i >= t1)
        return H.ioore(list, i);
      fixedList[i] = list[i];
    }
    return fixedList;
  },
  List_List$generate: function($length, generator, growable, $E) {
    var result, i, t1;
    if (growable) {
      result = [];
      H.setRuntimeTypeInfo(result, [$E]);
      C.JSArray_methods.set$length(result, $length);
    } else {
      result = Array($length);
      result.fixed$length = init;
      H.setRuntimeTypeInfo(result, [$E]);
    }
    for (i = 0; i < $length; ++i) {
      t1 = generator.call$1(i);
      if (i >= result.length)
        return H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  String_String$fromCharCode: function(charCode) {
    var charCodes = P.List_List$filled(1, charCode, J.JSInt);
    return H.Primitives_stringFromCharCodes(charCodes);
  },
  NoSuchMethodError_toString_closure: {
    "": "Closure;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(key.get$_name());
      t1.sb_0.write$1(": ");
      t1.sb_0.write$1(P.Error_safeToString(value));
      t1.i_1 = t1.i_1 + 1;
    },
    $isFunction: true,
    $is_args2: true
  },
  bool: {
    "": "Object;",
    toString$0: function(_) {
      return this ? "true" : "false";
    },
    $isbool: true
  },
  Comparable: {
    "": "Object;"
  },
  DateTime: {
    "": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, t2, t3, y, m, d, h, min, sec, ms;
      t1 = new P.DateTime_toString_twoDigits();
      t2 = this.isUtc;
      t3 = t2 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0;
      y = new P.DateTime_toString_fourDigits().call$1(t3);
      m = t1.call$1(t2 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = t1.call$1(t2 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = t1.call$1(t2 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = t1.call$1(t2 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = t1.call$1(t2 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      t1 = t2 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0;
      ms = new P.DateTime_toString_threeDigits().call$1(t1);
      if (t2)
        return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
      else
        return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
    },
    DateTime$_now$0: function() {
      H.Primitives_lazyAsJsDate(this);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
    },
    $isDateTime: true,
    static: {"": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime$_now: function() {
        var t1 = new P.DateTime(Date.now(), false);
        t1.DateTime$_now$0();
        return t1;
      }}
  },
  DateTime_toString_fourDigits: {
    "": "Closure;",
    call$1: function(n) {
      var t1, absN, sign;
      t1 = J.getInterceptor$n(n);
      absN = t1.abs$0(n);
      sign = t1.$lt(n, 0) ? "-" : "";
      if (absN >= 1000)
        return H.S(n);
      if (absN >= 100)
        return sign + "0" + H.S(absN);
      if (absN >= 10)
        return sign + "00" + H.S(absN);
      return sign + "000" + H.S(absN);
    },
    $isFunction: true,
    $is_args1: true
  },
  DateTime_toString_threeDigits: {
    "": "Closure;",
    call$1: function(n) {
      var t1 = J.getInterceptor$n(n);
      if (t1.$ge(n, 100))
        return H.S(n);
      if (t1.$ge(n, 10))
        return "0" + H.S(n);
      return "00" + H.S(n);
    },
    $isFunction: true,
    $is_args1: true
  },
  DateTime_toString_twoDigits: {
    "": "Closure;",
    call$1: function(n) {
      if (J.$ge$n(n, 10))
        return H.S(n);
      return "0" + H.S(n);
    },
    $isFunction: true,
    $is_args1: true
  },
  Duration: {
    "": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $le: function(_, other) {
      return C.JSNumber_methods.$le(this._duration, other.get$_duration());
    },
    $ge: function(_, other) {
      return this._duration >= other.get$_duration();
    },
    get$inMilliseconds: function() {
      return C.JSNumber_methods.$tdiv(this._duration, 1000);
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
      twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
      return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "": "Closure;",
    call$1: function(n) {
      var t1 = J.getInterceptor$n(n);
      if (t1.$ge(n, 100000))
        return H.S(n);
      if (t1.$ge(n, 10000))
        return "0" + H.S(n);
      if (t1.$ge(n, 1000))
        return "00" + H.S(n);
      if (t1.$ge(n, 100))
        return "000" + H.S(n);
      if (t1.$gt(n, 10))
        return "0000" + H.S(n);
      return "00000" + H.S(n);
    },
    $isFunction: true,
    $is_args1: true
  },
  Duration_toString_twoDigits: {
    "": "Closure;",
    call$1: function(n) {
      if (J.$ge$n(n, 10))
        return H.S(n);
      return "0" + H.S(n);
    },
    $isFunction: true,
    $is_args1: true
  },
  Error: {
    "": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "": "Error;message>",
    toString$0: function(_) {
      var t1 = this.get$message(this);
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    $isArgumentError: true,
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
      }}
  },
  NoSuchMethodError: {
    "": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
    toString$0: function(_) {
      var t1, t2, t3, t4, str;
      t1 = {};
      t1.sb_0 = P.StringBuffer$("");
      t1.i_1 = 0;
      t2 = this._core$_arguments;
      if (t2 != null)
        for (; t3 = t1.i_1, t3 < t2.length; t1.i_1 = t1.i_1 + 1) {
          if (t3 > 0) {
            t4 = t1.sb_0;
            t4._contents = t4._contents + ", ";
          }
          t4 = t1.sb_0;
          str = P.Error_safeToString(t2[t3]);
          str = typeof str === "string" ? str : H.S(str);
          t4._contents = t4._contents + str;
        }
      t2 = this._namedArguments;
      if (t2 != null)
        t2.forEach$1(t2, new P.NoSuchMethodError_toString_closure(t1));
      return "NoSuchMethodError : method not found: '" + H.S(this._memberName) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + H.S(t1.sb_0) + "]";
    },
    static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      }}
  },
  UnsupportedError: {
    "": "Error;message>",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    $isUnsupportedError: true,
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "": "Error;message>",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isUnsupportedError: true,
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "": "Error;message>",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  StackOverflowError: {
    "": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "": "Object;message>",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "": "Object;message>",
    toString$0: function(_) {
      return "FormatException: " + H.S(this.message);
    },
    $isFormatException: true,
    static: {FormatException$: function(message) {
        return new P.FormatException(message);
      }}
  },
  Expando: {
    "": "Object;name>",
    toString$0: function(_) {
      return "Expando:" + this.name;
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "": "Object;",
    $isFunction: true
  },
  Iterable: {
    "": "Object;",
    $isIterable: true,
    $asIterable: null
  },
  _GeneratorIterable: {
    "": "IterableBase;_count,_generator",
    get$iterator: function(_) {
      var t1 = new P._GeneratorIterator(this._count, this._generator, 0, null);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    get$length: function(_) {
      return this._count;
    },
    $asIterableBase: null,
    $asIterable: null,
    $isEfficientLength: true
  },
  _GeneratorIterator: {
    "": "Object;_count,_generator,_core$_index,_core$_current",
    _generator$1: function(arg0) {
      return this._generator.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._core$_index;
      if (t1 < this._count) {
        this._core$_current = this._generator$1(t1);
        this._core$_index = this._core$_index + 1;
        return true;
      } else {
        this._core$_current = null;
        return false;
      }
    },
    get$current: function() {
      return this._core$_current;
    },
    "+current": 0
  },
  Iterator: {
    "": "Object;"
  },
  Map: {
    "": "Object;",
    $isMap: true
  },
  Null: {
    "": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  Object: {
    "": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    },
    noSuchMethod$1: function(_, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    },
    get$runtimeType: function(_) {
      return new H.TypeImpl(H.getRuntimeTypeString(this), null);
    },
    $isObject: true
  },
  Match: {
    "": "Object;",
    $isMatch: true
  },
  Set: {
    "": "IterableBase;",
    $isSet: true,
    $asIterableBase: null,
    $asIterable: null,
    $isEfficientLength: true
  },
  StackTrace: {
    "": "Object;",
    $isStackTrace: true
  },
  StringBuffer: {
    "": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._contents.length !== 0;
    },
    write$1: function(obj) {
      var str = typeof obj === "string" ? obj : H.S(obj);
      this._contents = this._contents + str;
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (iterator.moveNext$0() !== true)
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        } while (iterator.moveNext$0() === true);
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0() === true;) {
          this._contents = this._contents + separator;
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        }
      }
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol0: {
    "": "Object;",
    $isSymbol0: true
  },
  Uri: {
    "": "Object;_host,_port,_path,scheme,userInfo,query,fragment,_pathSegments,_queryParameters",
    get$host: function(_) {
      var t1, t2;
      t1 = this._host;
      if (t1 != null && J.startsWith$1$s(t1, "[")) {
        t2 = J.getInterceptor$asx(t1);
        return t2.substring$2(t1, 1, J.$sub$n(t2.get$length(t1), 1));
      }
      return t1;
    },
    get$port: function(_) {
      var t1, t2;
      if (J.$eq(this._port, 0)) {
        t1 = this.scheme;
        t2 = J.getInterceptor(t1);
        if (t2.$eq(t1, "http"))
          return 80;
        if (t2.$eq(t1, "https"))
          return 443;
      }
      return this._port;
    },
    get$path: function(_) {
      return this._path;
    },
    query$1: function($receiver, arg0) {
      return this.query.call$1(arg0);
    },
    _makePath$2: function(path, pathSegments) {
      var t1, result;
      t1 = path == null;
      if (t1 && pathSegments == null)
        return "";
      t1 = !t1;
      if (t1 && pathSegments != null)
        throw H.wrapException(new P.ArgumentError("Both path and pathSegments specified"));
      if (t1)
        result = P.Uri__normalize(path);
      else {
        pathSegments.toString;
        t1 = new H.MappedListIterable(pathSegments, new P.Uri__makePath_closure());
        H.setRuntimeTypeInfo(t1, [null, null]);
        result = t1.join$1(t1, "/");
      }
      if (!J.$eq(this.get$host(this), "") || J.$eq(this.scheme, "file")) {
        t1 = J.getInterceptor$asx(result);
        t1 = t1.get$isNotEmpty(result) && !t1.startsWith$1(result, "/");
      } else
        t1 = false;
      if (t1)
        return "/" + H.S(result);
      return result;
    },
    toString$0: function(_) {
      var sb, t1;
      sb = P.StringBuffer$("");
      t1 = this.scheme;
      if ("" !== t1) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      if (!J.$eq(this.get$host(this), "") || J.$eq(t1, "file")) {
        sb.write$1("//");
        t1 = this.userInfo;
        if ("" !== t1) {
          sb.write$1(t1);
          sb.write$1("@");
        }
        t1 = this._host;
        sb.write$1(t1 == null ? "null" : t1);
        if (!J.$eq(this._port, 0)) {
          sb.write$1(":");
          sb.write$1(J.toString$0(this._port));
        }
      }
      sb.write$1(this._path);
      t1 = this.query;
      if ("" !== t1) {
        sb.write$1("?");
        sb.write$1(t1);
      }
      t1 = this.fragment;
      if ("" !== t1) {
        sb.write$1("#");
        sb.write$1(t1);
      }
      return sb._contents;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor$x(other);
      if (typeof other !== "object" || other === null || !t1.$isUri)
        return false;
      return J.$eq(this.scheme, other.scheme) && J.$eq(this.userInfo, other.userInfo) && J.$eq(this.get$host(this), t1.get$host(other)) && J.$eq(this.get$port(this), t1.get$port(other)) && J.$eq(this._path, other._path) && J.$eq(this.query, other.query) && J.$eq(this.fragment, other.fragment);
    },
    get$hashCode: function(_) {
      var t1 = new P.Uri_hashCode_combine();
      return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.get$host(this), t1.call$2(this.get$port(this), t1.call$2(this._path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
    },
    Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
      var t1 = J.getInterceptor(scheme);
      if (t1.$eq(scheme, "http") && J.$eq(port, 80))
        this._port = 0;
      else if (t1.$eq(scheme, "https") && J.$eq(port, 443))
        this._port = 0;
      else
        this._port = port;
      this._path = this._makePath$2(path, pathSegments);
    },
    $isUri: true,
    static: {"": "Uri__splitRe,Uri__COMPONENT_SCHEME,Uri__COMPONENT_USER_INFO,Uri__COMPONENT_HOST,Uri__COMPONENT_HOST_IPV6,Uri__COMPONENT_PORT,Uri__COMPONENT_PATH,Uri__COMPONENT_QUERY_DATA,Uri__COMPONENT_FRAGMENT,Uri__DOUBLE_QUOTE,Uri__PERCENT,Uri__ASTERISK,Uri__PLUS,Uri__SLASH,Uri__ZERO,Uri__NINE,Uri__COLON,Uri__LESS,Uri__GREATER,Uri__QUESTION,Uri__AT_SIGN,Uri__UPPER_CASE_A,Uri__UPPER_CASE_F,Uri__UPPER_CASE_Z,Uri__LEFT_BRACKET,Uri__BACKSLASH,Uri__RIGHT_BRACKET,Uri__LOWER_CASE_A,Uri__LOWER_CASE_F,Uri__LOWER_CASE_Z,Uri__BAR,Uri__unreservedTable,Uri__unreserved2396Table,Uri__encodeFullTable,Uri__schemeTable,Uri__schemeLowerTable,Uri__subDelimitersTable,Uri__pathCharTable,Uri__queryCharTable", Uri$_fromMatch: function(m) {
        var t1, t2, t3, t4, t5, t6, t7, t8;
        t1 = m.__js_helper$_match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        t2 = t1[1];
        t2 = P.Uri__makeScheme(t2 != null ? t2 : "");
        t3 = t1.length;
        if (2 >= t3)
          return H.ioore(t1, 2);
        t4 = t1[2];
        t4 = t4 != null ? t4 : "";
        if (3 >= t3)
          return H.ioore(t1, 3);
        t5 = t1[3];
        if (4 >= t3)
          return H.ioore(t1, 4);
        t5 = P.Uri__eitherOf(t5, t1[4]);
        if (5 >= t3)
          return H.ioore(t1, 5);
        t3 = P.Uri__parseIntOrZero(t1[5]);
        t6 = t1.length;
        if (6 >= t6)
          return H.ioore(t1, 6);
        t7 = t1[6];
        t7 = t7 != null ? t7 : "";
        if (7 >= t6)
          return H.ioore(t1, 7);
        t8 = t1[7];
        t8 = t8 != null ? t8 : "";
        if (8 >= t6)
          return H.ioore(t1, 8);
        t1 = t1[8];
        t1 = t1 != null ? t1 : "";
        t6 = P.Uri__makeScheme(t2);
        t6 = new P.Uri(P.Uri__makeHost(t5), null, null, t6, t4, P.Uri__makeQuery(t8, null), P.Uri__makeFragment(t1), null, null);
        t6.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(t1, t5, t7, null, t3, t8, null, t2, t4);
        return t6;
      }, Uri$: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
        var t1 = P.Uri__makeScheme(scheme);
        t1 = new P.Uri(P.Uri__makeHost(host), null, null, t1, userInfo, P.Uri__makeQuery(query, queryParameters), P.Uri__makeFragment(fragment), null, null);
        t1.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo);
        return t1;
      }, Uri__makeHost: function(host) {
        var t1, i, t2;
        if (host == null || J.get$isEmpty$asx(host) === true)
          return host;
        t1 = J.getInterceptor$s(host);
        if (t1.codeUnitAt$1(host, 0) === 91) {
          if (t1.codeUnitAt$1(host, J.$sub$n(t1.get$length(host), 1)) !== 93)
            throw H.wrapException(P.FormatException$("Missing end `]` to match `[` in host"));
          P.Uri_parseIPv6Address(t1.substring$2(host, 1, J.$sub$n(t1.get$length(host), 1)));
          return host;
        }
        i = 0;
        while (true) {
          t2 = t1.get$length(host);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          if (t1.codeUnitAt$1(host, i) === 58) {
            P.Uri_parseIPv6Address(host);
            return "[" + H.S(host) + "]";
          }
          ++i;
        }
        return host;
      }, Uri__makeScheme: function(scheme) {
        var t1, t2, t3, $length, allLowercase, i, codeUnit, t4;
        t1 = new P.Uri__makeScheme_isSchemeLowerCharacter();
        t2 = new P.Uri__makeScheme_isSchemeCharacter();
        if (scheme == null)
          return "";
        t3 = J.getInterceptor$asx(scheme);
        $length = t3.get$length(scheme);
        if (typeof $length !== "number")
          return H.iae($length);
        allLowercase = true;
        i = 0;
        for (; i < $length; ++i) {
          codeUnit = t3.codeUnitAt$1(scheme, i);
          if (i === 0) {
            if (!(codeUnit >= 97 && codeUnit <= 122))
              t4 = codeUnit >= 65 && codeUnit <= 90;
            else
              t4 = true;
            t4 = !t4;
          } else
            t4 = false;
          if (t4)
            throw H.wrapException(new P.ArgumentError("Illegal scheme: " + H.S(scheme)));
          if (t1.call$1(codeUnit) !== true) {
            if (t2.call$1(codeUnit) === true)
              ;
            else
              throw H.wrapException(new P.ArgumentError("Illegal scheme: " + H.S(scheme)));
            allLowercase = false;
          }
        }
        return allLowercase ? scheme : t3.toLowerCase$0(scheme);
      }, Uri__makeQuery: function(query, queryParameters) {
        var t1, t2, result;
        t1 = {};
        t2 = query == null;
        if (t2 && true)
          return "";
        t2 = !t2;
        if (t2)
          ;
        if (t2)
          return P.Uri__normalize(query);
        result = P.StringBuffer$("");
        t1.first_0 = true;
        C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
        return result._contents;
      }, Uri__makeFragment: function(fragment) {
        if (fragment == null)
          return "";
        return P.Uri__normalize(fragment);
      }, Uri__normalize: function(component) {
        var t1, t2, t3, t4, t5, t6, $length, t7, t8, codeUnit1, codeUnit2, decodedCodeUnit, t9, charCodes, index;
        t1 = {};
        t2 = new P.Uri__normalize_isNormalizedHexDigit();
        t3 = new P.Uri__normalize_isUnreserved();
        t4 = new P.Uri__normalize_normalizeHexDigit(component, t2, new P.Uri__normalize_isLowerCaseHexDigit());
        t5 = new P.Uri__normalize_decodeHexDigitPair(component);
        t1.result_0 = null;
        t6 = J.getInterceptor$asx(component);
        $length = t6.get$length(component);
        t1.index_1 = 0;
        t1.prevIndex_2 = 0;
        t7 = new P.Uri__normalize_fillResult(t1, component);
        if (typeof $length !== "number")
          return H.iae($length);
        for (; t8 = t1.index_1, t8 < $length;)
          if (t6.codeUnitAt$1(component, t8) === 37) {
            t8 = t1.index_1;
            if ($length < t8 + 2)
              throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + H.S(component)));
            codeUnit1 = t6.codeUnitAt$1(component, t8 + 1);
            codeUnit2 = t6.codeUnitAt$1(component, t1.index_1 + 2);
            decodedCodeUnit = t5.call$1(t1.index_1 + 1);
            if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true)
              t1.index_1 = t1.index_1 + 3;
            else {
              t7.call$0();
              t8 = t3.call$1(decodedCodeUnit);
              t9 = t1.result_0;
              if (t8 === true) {
                t9.toString;
                charCodes = P.List_List$filled(1, decodedCodeUnit, J.JSInt);
                t8 = H.Primitives_stringFromCharCodes(charCodes);
                t9._contents = t9._contents + t8;
              } else {
                t9.toString;
                t9._contents = t9._contents + "%";
                t8 = t4.call$1(t1.index_1 + 1);
                t9.toString;
                charCodes = P.List_List$filled(1, t8, J.JSInt);
                t8 = H.Primitives_stringFromCharCodes(charCodes);
                t9._contents = t9._contents + t8;
                t8 = t1.result_0;
                t9 = t4.call$1(t1.index_1 + 2);
                t8.toString;
                charCodes = P.List_List$filled(1, t9, J.JSInt);
                t9 = H.Primitives_stringFromCharCodes(charCodes);
                t8._contents = t8._contents + t9;
              }
              index = t1.index_1 + 3;
              t1.index_1 = index;
              t1.prevIndex_2 = index;
            }
          } else
            t1.index_1 = t1.index_1 + 1;
        if (t1.result_0 != null && t1.prevIndex_2 !== t8)
          t7.call$0();
        t1 = t1.result_0;
        if (t1 == null)
          return component;
        return J.toString$0(t1);
      }, Uri__parseIntOrZero: function(val) {
        if (val != null && !J.$eq(val, ""))
          return H.Primitives_parseInt(val, null, null);
        else
          return 0;
      }, Uri__eitherOf: function(val1, val2) {
        if (val1 != null)
          return val1;
        if (val2 != null)
          return val2;
        return "";
      }, Uri_parseIPv4Address: function(host) {
        var t1, bytes;
        t1 = new P.Uri_parseIPv4Address_error();
        bytes = host.split(".");
        if (bytes.length !== 4)
          t1.call$1("IPv4 address should contain exactly 4 parts");
        t1 = new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1));
        H.setRuntimeTypeInfo(t1, [null, null]);
        return t1.toList$0(t1);
      }, Uri_parseIPv6Address: function(host) {
        var error, parseHex, parts, partStart, last, wildcardSeen, i, t1, atEnd, isLastWildcard, exception, t2;
        error = new P.Uri_parseIPv6Address_error();
        parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
        if (J.$lt$n(J.get$length$asx(host), 2))
          error.call$1("address is too short");
        parts = [];
        partStart = 0;
        wildcardSeen = false;
        i = 0;
        while (true) {
          t1 = J.get$length$asx(host);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          if (J.codeUnitAt$1$s(host, i) === 58) {
            if (i === 0) {
              ++i;
              if (J.codeUnitAt$1$s(host, i) !== 58)
                error.call$1("invalid start colon.");
              partStart = i;
            }
            if (i === partStart) {
              if (wildcardSeen)
                error.call$1("only one wildcard `::` is allowed");
              J.add$1$ax(parts, -1);
              wildcardSeen = true;
            } else
              J.add$1$ax(parts, parseHex.call$2(partStart, i));
            partStart = i + 1;
          }
          ++i;
        }
        if (J.get$length$asx(parts) === 0)
          error.call$1("too few parts");
        atEnd = J.$eq(partStart, J.get$length$asx(host));
        isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
        if (atEnd && !isLastWildcard)
          error.call$1("expected a part after last `:`");
        if (!atEnd)
          try {
            J.add$1$ax(parts, parseHex.call$2(partStart, J.get$length$asx(host)));
          } catch (exception) {
            H.unwrapException(exception);
            try {
              last = P.Uri_parseIPv4Address(J.substring$1$s(host, partStart));
              t1 = J.$shl$n(J.$index$asx(last, 0), 8);
              t2 = J.$index$asx(last, 1);
              if (typeof t2 !== "number")
                return H.iae(t2);
              J.add$1$ax(parts, (t1 | t2) >>> 0);
              t2 = J.$shl$n(J.$index$asx(last, 2), 8);
              t1 = J.$index$asx(last, 3);
              if (typeof t1 !== "number")
                return H.iae(t1);
              J.add$1$ax(parts, (t2 | t1) >>> 0);
            } catch (exception) {
              H.unwrapException(exception);
              error.call$1("invalid end of IPv6 address.");
            }

          }

        if (wildcardSeen) {
          if (J.get$length$asx(parts) > 7)
            error.call$1("an address with a wildcard must have less than 7 parts");
        } else if (J.get$length$asx(parts) !== 8)
          error.call$1("an address without a wildcard must contain exactly 8 parts");
        t1 = new H.ExpandIterable(parts, new P.Uri_parseIPv6Address_closure(parts));
        t1.$builtinTypeInfo = [null, null];
        return P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      }, Uri__uriEncode: function(canonicalTable, text, spaceToPlus) {
        var t1, result, t2, i, t3, ch, str, nextCh, charCodes, t4, t5, encoder, t6;
        t1 = new P.Uri__uriEncode_byteToHex();
        result = P.StringBuffer$("");
        t2 = J.getInterceptor$asx(text);
        i = 0;
        while (true) {
          t3 = t2.get$length(text);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          ch = t2.codeUnitAt$1(text, i);
          if (ch < 128) {
            t3 = C.JSInt_methods.$shr(ch, 4);
            if (t3 >= 8)
              return H.ioore(canonicalTable, t3);
            t3 = (canonicalTable[t3] & C.JSInt_methods.$shl(1, ch & 15)) !== 0;
          } else
            t3 = false;
          if (t3) {
            str = t2.$index(text, i);
            str = typeof str === "string" ? str : H.S(str);
            result._contents = result._contents + str;
          } else if (spaceToPlus && J.$eq(t2.$index(text, i), " "))
            result._contents = result._contents + "+";
          else {
            if (ch >= 55296 && ch < 56320) {
              ++i;
              nextCh = t2.get$length(text) === i ? 0 : t2.codeUnitAt$1(text, i);
              if (nextCh >= 56320 && nextCh < 57344)
                ch = 65536 + (ch - 55296 << 10 >>> 0) + (nextCh - 56320);
              else
                throw H.wrapException(new P.ArgumentError("Malformed URI"));
            }
            charCodes = P.List_List$filled(1, ch, J.JSInt);
            t3 = H.Primitives_stringFromCharCodes(charCodes);
            C.Utf8Codec_false.get$encoder();
            t4 = t3.length;
            t5 = Array(t4 * 3);
            t5.$builtinTypeInfo = [J.JSInt];
            encoder = new P._Utf8Encoder(0, 0, t5);
            if (encoder._fillBuffer$3(t3, 0, t4) !== t4) {
              t6 = t4 - 1;
              if (t6 < 0)
                H.throwExpression(P.RangeError$value(t6));
              if (t6 >= t4)
                H.throwExpression(P.RangeError$value(t6));
              encoder._writeSurrogate$2(t3.charCodeAt(t6), 0);
            }
            t3 = C.JSArray_methods.sublist$2(t5, 0, encoder._bufferIndex);
            t4 = new H.ListIterator(t3, t3.length, 0, null);
            t4.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
            for (; t4.moveNext$0();) {
              str = t1.call$1(t4._dev$_current);
              str = typeof str === "string" ? str : H.S(str);
              result._contents = result._contents + str;
            }
          }
          ++i;
        }
        return result._contents;
      }, Uri__hexCharPairToByte: function(s, pos) {
        var t1, $byte, i, charCode;
        for (t1 = J.getInterceptor$s(s), $byte = 0, i = 0; i < 2; ++i) {
          charCode = t1.codeUnitAt$1(s, pos + i);
          if (48 <= charCode && charCode <= 57)
            $byte = $byte * 16 + charCode - 48;
          else {
            charCode = (charCode | 32) >>> 0;
            if (97 <= charCode && charCode <= 102)
              $byte = $byte * 16 + charCode - 87;
            else
              throw H.wrapException(new P.ArgumentError("Invalid URL encoding"));
          }
        }
        return $byte;
      }, Uri__uriDecode: function(text, encoding, plusToSpace) {
        var result, codepoints, t1, allowMalformed, i, t2, ch, charCodes;
        result = P.StringBuffer$("");
        codepoints = P.List_List(null, J.JSInt);
        t1 = J.getInterceptor$asx(text);
        allowMalformed = encoding._allowMalformed;
        i = 0;
        while (true) {
          t2 = t1.get$length(text);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          ch = t1.codeUnitAt$1(text, i);
          if (ch !== 37) {
            if (plusToSpace && ch === 43)
              result._contents = result._contents + " ";
            else {
              charCodes = P.List_List$filled(1, ch, J.JSInt);
              t2 = H.Primitives_stringFromCharCodes(charCodes);
              result._contents = result._contents + t2;
            }
            ++i;
          } else {
            C.JSArray_methods.set$length(codepoints, 0);
            for (; ch === 37;) {
              ++i;
              if (i > J.$sub$n(t1.get$length(text), 2))
                throw H.wrapException(new P.ArgumentError("Truncated URI"));
              codepoints.push(P.Uri__hexCharPairToByte(text, i));
              i += 2;
              if (i === t1.get$length(text))
                break;
              ch = t1.codeUnitAt$1(text, i);
            }
            t2 = new P.Utf8Decoder(allowMalformed).convert$1(codepoints);
            result._contents = result._contents + t2;
          }
        }
        return result._contents;
      }}
  },
  Uri__makeScheme_isSchemeLowerCharacter: {
    "": "Closure;",
    call$1: function(ch) {
      var t1, t2;
      t1 = J.getInterceptor$n(ch);
      if (t1.$lt(ch, 128)) {
        t2 = t1.$shr(ch, 4);
        if (t2 >= 8)
          return H.ioore(C.List_6Pr, t2);
        t1 = (C.List_6Pr[t2] & C.JSInt_methods.$shl(1, t1.$and(ch, 15))) !== 0;
      } else
        t1 = false;
      return t1;
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri__makeScheme_isSchemeCharacter: {
    "": "Closure;",
    call$1: function(ch) {
      var t1, t2;
      t1 = J.getInterceptor$n(ch);
      if (t1.$lt(ch, 128)) {
        t2 = t1.$shr(ch, 4);
        if (t2 >= 8)
          return H.ioore(C.List_JYB, t2);
        t1 = (C.List_JYB[t2] & C.JSInt_methods.$shl(1, t1.$and(ch, 15))) !== 0;
      } else
        t1 = false;
      return t1;
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri__makePath_closure: {
    "": "Closure;",
    call$1: function(s) {
      return P.Uri__uriEncode(C.List_qg4, s, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri__makeQuery_closure: {
    "": "Closure;box_0,result_1",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1("&");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(P.Uri__uriEncode(C.List_nxB, key, true));
      if (value != null && J.get$isEmpty$asx(value) !== true) {
        t1.write$1("=");
        t1.write$1(P.Uri__uriEncode(C.List_nxB, value, true));
      }
    },
    $isFunction: true,
    $is_args2: true
  },
  Uri__normalize_isNormalizedHexDigit: {
    "": "Closure;",
    call$1: function(digit) {
      var t1;
      if (typeof digit !== "number")
        return H.iae(digit);
      if (!(48 <= digit && digit <= 57))
        t1 = 65 <= digit && digit <= 70;
      else
        t1 = true;
      return t1;
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri__normalize_isLowerCaseHexDigit: {
    "": "Closure;",
    call$1: function(digit) {
      if (typeof digit !== "number")
        return H.iae(digit);
      return 97 <= digit && digit <= 102;
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri__normalize_isUnreserved: {
    "": "Closure;",
    call$1: function(ch) {
      var t1, t2;
      t1 = J.getInterceptor$n(ch);
      if (t1.$lt(ch, 128)) {
        t2 = t1.$shr(ch, 4);
        if (t2 >= 8)
          return H.ioore(C.List_nxB, t2);
        t1 = (C.List_nxB[t2] & C.JSInt_methods.$shl(1, t1.$and(ch, 15))) !== 0;
      } else
        t1 = false;
      return t1;
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri__normalize_normalizeHexDigit: {
    "": "Closure;component_1,isNormalizedHexDigit_2,isLowerCaseHexDigit_3",
    call$1: function(index) {
      var t1, codeUnit;
      t1 = this.component_1;
      codeUnit = J.codeUnitAt$1$s(t1, index);
      if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
        return codeUnit - 32;
      else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
        throw H.wrapException(new P.ArgumentError("Invalid URI component: " + H.S(t1)));
      else
        return codeUnit;
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri__normalize_decodeHexDigitPair: {
    "": "Closure;component_4",
    call$1: function(index) {
      var t1, t2, t3, $byte, i, codeUnit;
      for (t1 = this.component_4, t2 = J.getInterceptor$ns(index), t3 = J.getInterceptor$s(t1), $byte = 0, i = 0; i < 2; ++i) {
        codeUnit = t3.codeUnitAt$1(t1, t2.$add(index, i));
        if (48 <= codeUnit && codeUnit <= 57)
          $byte = $byte * 16 + codeUnit - 48;
        else {
          codeUnit = (codeUnit | 32) >>> 0;
          if (97 <= codeUnit && codeUnit <= 102)
            $byte = $byte * 16 + codeUnit - 97 + 10;
          else
            throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + H.S(t1)));
        }
      }
      return $byte;
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri__normalize_fillResult: {
    "": "Closure;box_0,component_5",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.box_0;
      t2 = t1.result_0;
      t3 = t1.prevIndex_2;
      t4 = this.component_5;
      t5 = t1.index_1;
      if (t2 == null)
        t1.result_0 = P.StringBuffer$(J.substring$2$s(t4, t3, t5));
      else
        t2.write$1(J.substring$2$s(t4, t3, t5));
    },
    $isFunction: true,
    $is_void_: true
  },
  Uri_hashCode_combine: {
    "": "Closure;",
    call$2: function(part, current) {
      return J.$and$n(J.$add$ns(J.$mul$n(current, 31), J.get$hashCode$(part)), 1073741823);
    },
    $isFunction: true,
    $is_args2: true
  },
  Uri_parseIPv4Address_error: {
    "": "Closure;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + H.S(msg)));
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri_parseIPv4Address_closure: {
    "": "Closure;error_0",
    call$1: function(byteString) {
      var $byte, t1;
      $byte = H.Primitives_parseInt(byteString, null, null);
      t1 = J.getInterceptor$n($byte);
      if (t1.$lt($byte, 0) || t1.$gt($byte, 255))
        this.error_0.call$1("each part must be in the range of `0..255`");
      return $byte;
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri_parseIPv6Address_error: {
    "": "Closure;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + H.S(msg)));
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri_parseIPv6Address_parseHex: {
    "": "Closure;host_0,error_1",
    call$2: function(start, end) {
      var value, t1;
      if (J.$gt$n(J.$sub$n(end, start), 4))
        this.error_1.call$1("an IPv6 part can only contain a maximum of 4 hex digits");
      value = H.Primitives_parseInt(J.substring$2$s(this.host_0, start, end), 16, null);
      t1 = J.getInterceptor$n(value);
      if (t1.$lt(value, 0) || t1.$gt(value, 65535))
        this.error_1.call$1("each part must be in the range of `0x0..0xFFFF`");
      return value;
    },
    $isFunction: true,
    $is_args2: true
  },
  Uri_parseIPv6Address_closure: {
    "": "Closure;parts_2",
    call$1: function(value) {
      var t1 = J.getInterceptor(value);
      if (t1.$eq(value, -1))
        return P.List_List$filled((9 - this.parts_2.length) * 2, 0, null);
      else
        return [t1.$shr(value, 8) & 255, t1.$and(value, 255)];
    },
    $isFunction: true,
    $is_args1: true
  },
  Uri__uriEncode_byteToHex: {
    "": "Closure;",
    call$1: function(v) {
      var t1, t2;
      t1 = J.getInterceptor$n(v);
      t2 = t1.$shr(v, 4);
      if (t2 >= 16)
        return H.ioore("0123456789ABCDEF", t2);
      t2 = "%" + "0123456789ABCDEF"[t2];
      t1 = t1.$and(v, 15);
      if (t1 >= 16)
        return H.ioore("0123456789ABCDEF", t1);
      return t2 + "0123456789ABCDEF"[t1];
    },
    $isFunction: true,
    $is_args1: true
  }
}],
["dart.dom.html", "dart:html", , W, {
  window: function() {
    return window;
  },
  "+window": 1,
  Element_Element$html: function(html, treeSanitizer, validator) {
    var fragment, t1;
    fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1 = t1.where$1(t1, new W.Element_Element$html_closure());
    return t1.get$single(t1);
  },
  Window__isDartLocation: function(thing) {
    var t1, t2, exception;
    try {
      t1 = thing;
      t2 = J.getInterceptor(t1);
      return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
    } catch (exception) {
      H.unwrapException(exception);
      return false;
    }

  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  AnchorElement: {
    "": "HtmlElement;hostname=,href%,port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "": "HtmlElement;hostname=,href%,port=,protocol=",
    "%": "HTMLAreaElement"
  },
  BaseElement: {
    "": "HtmlElement;href%",
    "%": "HTMLBaseElement"
  },
  Blob: {
    "": "Interceptor;",
    $isBlob: true,
    "%": ";Blob"
  },
  BodyElement: {
    "": "HtmlElement;",
    $isBodyElement: true,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "": "HtmlElement;name=,value=",
    "%": "HTMLButtonElement"
  },
  CharacterData: {
    "": "Node;data=,length=",
    $isInterceptor: true,
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  CompositionEvent: {
    "": "UIEvent;data=",
    "%": "CompositionEvent"
  },
  CssStyleDeclaration: {
    "": "Interceptor_CssStyleDeclarationBase;length=",
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  Document: {
    "": "Node;",
    get$onClick: function(receiver) {
      var t1 = new W._EventStream(receiver, C.EventStreamProvider_click._eventType, false);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    query$1: function(receiver, relativeSelectors) {
      return receiver.querySelector(relativeSelectors);
    },
    "%": "Document|HTMLDocument|SVGDocument"
  },
  DocumentFragment: {
    "": "Node;",
    get$children: function(receiver) {
      var t1;
      if (receiver._children == null) {
        t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
        H.setRuntimeTypeInfo(t1, [null]);
        receiver._children = t1;
      }
      return receiver._children;
    },
    query$1: function(receiver, relativeSelectors) {
      return receiver.querySelector(relativeSelectors);
    },
    $isInterceptor: true,
    "%": "DocumentFragment|ShadowRoot"
  },
  DocumentType: {
    "": "Node;",
    $isInterceptor: true,
    "%": "DocumentType"
  },
  DomError: {
    "": "Interceptor;message=,name=",
    "%": "DOMError|FileError"
  },
  DomException: {
    "": "Interceptor;message=",
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  Element: {
    "": "Node;className%,id=,tagName=",
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    query$1: function(receiver, relativeSelectors) {
      return receiver.querySelector(relativeSelectors);
    },
    get$classes: function(receiver) {
      return new W._ElementCssClassSet(receiver);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, base, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = [];
          H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          t1.push(W._Html5NodeValidator$(null));
          t1.push(W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document.implementation.createHTMLDocument("");
        $.Element__parseDocument = t1;
        $.Element__parseRange = t1.createRange();
        base = $.Element__parseDocument.createElement("base", null);
        J.set$href$x(base, document.baseURI);
        $.Element__parseDocument.head.appendChild(base);
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName, null);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
    },
    get$onClick: function(receiver) {
      var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_click._eventType, false);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    $isElement: true,
    $isInterceptor: true,
    "%": ";Element"
  },
  EmbedElement: {
    "": "HtmlElement;name=",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "": "Event;error=,message=",
    error$2: function($receiver, arg0, arg1) {
      return this.error.call$2(arg0, arg1);
    },
    error$1: function($receiver, arg0) {
      return this.error.call$1(arg0);
    },
    "%": "ErrorEvent"
  },
  Event: {
    "": "Interceptor;path=",
    $isEvent: true,
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MediaKeyNeededEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"
  },
  EventTarget: {
    "": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    "%": ";EventTarget"
  },
  FieldSetElement: {
    "": "HtmlElement;name=",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "": "Blob;name=",
    $isFile: true,
    "%": "File"
  },
  FormElement: {
    "": "HtmlElement;length=,name=",
    "%": "HTMLFormElement"
  },
  HtmlCollection: {
    "": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $asList: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  IFrameElement: {
    "": "HtmlElement;name=",
    "%": "HTMLIFrameElement"
  },
  ImageElement: {
    "": "HtmlElement;",
    complete$0: function($receiver) {
      return this.complete.call$0();
    },
    "%": "HTMLImageElement"
  },
  InputElement: {
    "": "HtmlElement;name=,value=",
    $isElement: true,
    $isInterceptor: true,
    $isNode: true,
    "%": "HTMLInputElement"
  },
  KeyboardEvent: {
    "": "UIEvent;location=",
    "%": "KeyboardEvent"
  },
  KeygenElement: {
    "": "HtmlElement;name=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "": "HtmlElement;value=",
    "%": "HTMLLIElement"
  },
  LinkElement: {
    "": "HtmlElement;href%",
    "%": "HTMLLinkElement"
  },
  Location: {
    "": "Interceptor;hostname=,href%,port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isLocation: true,
    "%": "Location"
  },
  MapElement: {
    "": "HtmlElement;name=",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "": "HtmlElement;error=",
    error$2: function($receiver, arg0, arg1) {
      return this.error.call$2(arg0, arg1);
    },
    error$1: function($receiver, arg0) {
      return this.error.call$1(arg0);
    },
    pause$0: function(receiver) {
      return receiver.pause();
    },
    "%": "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement"
  },
  MediaKeyEvent: {
    "": "Event;message=",
    "%": "MediaKeyEvent"
  },
  MediaKeyMessageEvent: {
    "": "Event;message=",
    "%": "MediaKeyMessageEvent"
  },
  MediaStream: {
    "": "EventTarget;id=",
    "%": "MediaStream"
  },
  MediaStreamEvent: {
    "": "Event;stream=",
    "%": "MediaStreamEvent"
  },
  MessageEvent: {
    "": "Event;",
    get$data: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
    },
    $isMessageEvent: true,
    "%": "MessageEvent"
  },
  MetaElement: {
    "": "HtmlElement;name=",
    "%": "HTMLMetaElement"
  },
  MeterElement: {
    "": "HtmlElement;value=",
    "%": "HTMLMeterElement"
  },
  MidiConnectionEvent: {
    "": "Event;port=",
    "%": "MIDIConnectionEvent"
  },
  MidiMessageEvent: {
    "": "Event;data=",
    "%": "MIDIMessageEvent"
  },
  MidiOutput: {
    "": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "": "EventTarget;id=,name=",
    "%": "MIDIInput;MIDIPort"
  },
  MouseEvent: {
    "": "UIEvent;",
    $isMouseEvent: true,
    "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
  },
  Navigator: {
    "": "Interceptor;",
    $isInterceptor: true,
    "%": "Navigator"
  },
  NavigatorUserMediaError: {
    "": "Interceptor;message=,name=",
    "%": "NavigatorUserMediaError"
  },
  Node: {
    "": "EventTarget;lastChild=,nodeType=",
    get$nodes: function(receiver) {
      return new W._ChildNodeListLazy(receiver);
    },
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    contains$1: function(receiver, other) {
      return receiver.contains(other);
    },
    _replaceChild$2: function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    },
    $isNode: true,
    "%": "Entity|Notation;Node"
  },
  NodeList: {
    "": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $asList: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  ObjectElement: {
    "": "HtmlElement;data=,name=",
    "%": "HTMLObjectElement"
  },
  OptionElement: {
    "": "HtmlElement;value=",
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "": "HtmlElement;name=,value=",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "": "HtmlElement;name=,value=",
    "%": "HTMLParamElement"
  },
  PositionError: {
    "": "Interceptor;message=",
    "%": "PositionError"
  },
  ProgressElement: {
    "": "HtmlElement;value=",
    "%": "HTMLProgressElement"
  },
  Range: {
    "": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Range"
  },
  SelectElement: {
    "": "HtmlElement;length%,name=,value=",
    "%": "HTMLSelectElement"
  },
  SpeechRecognitionError: {
    "": "Event;error=,message=",
    error$2: function($receiver, arg0, arg1) {
      return this.error.call$2(arg0, arg1);
    },
    error$1: function($receiver, arg0) {
      return this.error.call$1(arg0);
    },
    "%": "SpeechRecognitionError"
  },
  SpeechSynthesisEvent: {
    "": "Event;name=",
    "%": "SpeechSynthesisEvent"
  },
  TableElement: {
    "": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment, t1;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      t1.addAll$1(t1, J.get$nodes$x(table));
      return fragment;
    },
    "%": "HTMLTableElement"
  },
  TableRowElement: {
    "": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      row.toString;
      t1.addAll$1(t1, new W._ChildNodeListLazy(row));
      return fragment;
    },
    "%": "HTMLTableRowElement"
  },
  TableSectionElement: {
    "": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      section.toString;
      t1.addAll$1(t1, new W._ChildNodeListLazy(section));
      return fragment;
    },
    "%": "HTMLTableSectionElement"
  },
  TemplateElement: {
    "": "HtmlElement;",
    $isTemplateElement: true,
    "%": "HTMLTemplateElement"
  },
  TextAreaElement: {
    "": "HtmlElement;name=,value=",
    "%": "HTMLTextAreaElement"
  },
  TextEvent: {
    "": "UIEvent;data=",
    "%": "TextEvent"
  },
  UIEvent: {
    "": "Event;",
    "%": "FocusEvent|SVGZoomEvent|TouchEvent;UIEvent"
  },
  Window: {
    "": "EventTarget;name=",
    get$location: function(receiver) {
      var result = receiver.location;
      if (W.Window__isDartLocation(result) === true)
        return result;
      if (null == receiver._location_wrapper)
        receiver._location_wrapper = new W._LocationWrapper(result);
      return receiver._location_wrapper;
    },
    postMessage$3: function(receiver, message, targetOrigin, messagePorts) {
      receiver.postMessage(P._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
      return;
    },
    postMessage$2: function($receiver, message, targetOrigin) {
      return this.postMessage$3($receiver, message, targetOrigin, null);
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    get$onClick: function(receiver) {
      var t1 = new W._EventStream(receiver, C.EventStreamProvider_click._eventType, false);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    $isInterceptor: true,
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "": "Node;name=,value=",
    "%": "Attr"
  },
  _NamedNodeMap: {
    "": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $asList: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  Console: {
    "": "Object;",
    error$1: function(_, arg) {
      return typeof console != "undefined" ? console.error(arg) : null;
    },
    get$error: function(_receiver) {
      return new P.BoundClosure$i1(this, W.Console.prototype.error$1, _receiver, "error$1");
    },
    static: {"": "Console__safeConsole"}
  },
  Interceptor_CssStyleDeclarationBase: {
    "": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "": "Object;"
  },
  _ChildrenElementList: {
    "": "ListBase;_html$_element,_childElements",
    contains$1: function(_, element) {
      return J.contains$1$asx(this._childElements, element);
    },
    get$isEmpty: function(_) {
      return this._html$_element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._html$_element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      this._html$_element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this.toList$0(this);
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2;
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort element lists"));
    },
    get$first: function(_) {
      var result = this._html$_element.firstElementChild;
      if (result == null)
        throw H.wrapException(new P.StateError("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._html$_element.lastElementChild;
      if (result == null)
        throw H.wrapException(new P.StateError("No elements"));
      return result;
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    }
  },
  _FrozenElementList: {
    "": "ListBase;_nodeList,_elementList",
    get$length: function(_) {
      return this._nodeList.length;
    },
    $index: function(_, index) {
      var t1 = this._nodeList;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort list"));
    },
    get$first: function(_) {
      return C.NodeList_methods.get$first(this._nodeList);
    },
    get$last: function(_) {
      return C.NodeList_methods.get$last(this._nodeList);
    },
    get$classes: function(_) {
      return W._MultiElementCssClassSet$(this._elementList);
    },
    get$onClick: function(_) {
      var t1 = new W._ElementListEventStreamImpl(this, false, C.EventStreamProvider_click._eventType);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    },
    _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
      var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
      this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    },
    $asListBase: null,
    $asList: null,
    $asIterable: null,
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    static: {_FrozenElementList$_wrap: function(_nodeList, $T) {
        var t1 = new W._FrozenElementList(_nodeList, null);
        H.setRuntimeTypeInfo(t1, [$T]);
        t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
        return t1;
      }}
  },
  _FrozenElementList$_wrap_closure: {
    "": "Closure;",
    call$1: function(e) {
      var t1 = J.getInterceptor(e);
      return typeof e === "object" && e !== null && !!t1.$isElement;
    },
    $isFunction: true,
    $is_args1: true
  },
  Element_Element$html_closure: {
    "": "Closure;",
    call$1: function(e) {
      var t1 = J.getInterceptor(e);
      return typeof e === "object" && e !== null && !!t1.$isElement;
    },
    $isFunction: true,
    $is_args1: true
  },
  Interceptor_ListMixin: {
    "": "Interceptor+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "": "Interceptor_ListMixin+ImmutableListMixin;",
    $asList: null,
    $asIterable: null,
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true
  },
  _ChildNodeListLazy: {
    "": "ListBase;_this",
    get$first: function(_) {
      var result = this._this.firstChild;
      if (result == null)
        throw H.wrapException(new P.StateError("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._this.lastChild;
      if (result == null)
        throw H.wrapException(new P.StateError("No elements"));
      return result;
    },
    get$single: function(_) {
      var t1, l;
      t1 = this._this;
      l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(new P.StateError("No elements"));
      if (l > 1)
        throw H.wrapException(new P.StateError("More than one element"));
      return t1.firstChild;
    },
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      if (!!iterable.$is_ChildNodeListLazy) {
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      }
      for (t1 = iterable.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $is_ChildNodeListLazy: true,
    $asListBase: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin0: {
    "": "Interceptor+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "": "Interceptor_ListMixin0+ImmutableListMixin;",
    $asList: null,
    $asIterable: null,
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true
  },
  Interceptor_ListMixin1: {
    "": "Interceptor+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "": "Interceptor_ListMixin1+ImmutableListMixin;",
    $asList: null,
    $asIterable: null,
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true
  },
  _AttributeMap: {
    "": "Object;",
    forEach$1: function(_, f) {
      var t1, t2, key;
      for (t1 = this.get$keys(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]); t2.moveNext$0();) {
        key = t2._dev$_current;
        f.call$2(key, this.$index(this, key));
      }
    },
    get$keys: function() {
      var attributes, keys, len, i;
      attributes = this._html$_element.attributes;
      keys = P.List_List(null, J.JSString);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          keys.push(J.get$name$x(attributes[i]));
        }
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i;
      attributes = this._html$_element.attributes;
      values = P.List_List(null, J.JSString);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          values.push(J.get$value$x(attributes[i]));
        }
      }
      return values;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    $isMap: true,
    $asMap: function() {
      return [J.JSString, J.JSString];
    }
  },
  _ElementAttributeMap: {
    "": "_AttributeMap;_html$_element",
    containsKey$1: function(key) {
      return this._html$_element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._html$_element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._html$_element.setAttribute(key, value);
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  _MultiElementCssClassSet: {
    "": "CssClassSetImpl;_elementIterable,_elementCssClassSetIterable",
    readClasses$0: function() {
      var s, t1;
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
      t1 = this._elementCssClassSetIterable;
      t1.forEach$1(t1, new W._MultiElementCssClassSet_readClasses_closure(s));
      return s;
    },
    writeClasses$1: function(s) {
      var classes, t1, t2;
      classes = C.JSArray_methods.join$1(P.List_List$from(s, true, null), " ");
      for (t1 = this._elementIterable, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]); t2.moveNext$0();)
        J.set$className$x(t2._dev$_current, classes);
    },
    modify$1: function(f) {
      var t1 = this._elementCssClassSetIterable;
      t1.forEach$1(t1, new W._MultiElementCssClassSet_modify_closure(f));
    },
    _MultiElementCssClassSet$1: function(_elementIterable) {
      var t1 = new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._MultiElementCssClassSet_closure());
      H.setRuntimeTypeInfo(t1, [null, null]);
      this._elementCssClassSetIterable = t1;
    },
    static: {_MultiElementCssClassSet$: function(_elementIterable) {
        var t1 = new W._MultiElementCssClassSet(_elementIterable, null);
        t1._MultiElementCssClassSet$1(_elementIterable);
        return t1;
      }}
  },
  _MultiElementCssClassSet_closure: {
    "": "Closure;",
    call$1: function(e) {
      return new W._ElementCssClassSet(e);
    },
    $isFunction: true,
    $is_args1: true
  },
  _MultiElementCssClassSet_readClasses_closure: {
    "": "Closure;s_0",
    call$1: function(e) {
      var t1 = this.s_0;
      return t1.addAll$1(t1, e.readClasses$0());
    },
    $isFunction: true,
    $is_args1: true
  },
  _MultiElementCssClassSet_modify_closure: {
    "": "Closure;f_0",
    call$1: function(e) {
      return e.modify$1(this.f_0);
    },
    $isFunction: true,
    $is_args1: true
  },
  _ElementCssClassSet: {
    "": "CssClassSetImpl;_html$_element",
    readClasses$0: function() {
      var s, t1, t2, trimmed;
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
      for (t1 = J.get$className$x(this._html$_element).split(" "), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]); t2.moveNext$0();) {
        trimmed = J.trim$0$s(t2._dev$_current);
        if (trimmed.length !== 0)
          s.add$1(s, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      P.List_List$from(s, true, null);
      J.set$className$x(this._html$_element, s.join$1(s, " "));
    }
  },
  EventStreamProvider: {
    "": "Object;_eventType"
  },
  _EventStream: {
    "": "Stream;_html$_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    $asStream: null
  },
  _ElementEventStreamImpl: {
    "": "_EventStream;_html$_target,_eventType,_useCapture",
    $as_EventStream: null,
    $asStream: null,
    $isStream: true
  },
  _ElementListEventStreamImpl: {
    "": "Stream;_targetList,_useCapture,_eventType",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var pool, t1, t2, t3, t4;
      pool = new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, null], [P.StreamSubscription, null]));
      H.setRuntimeTypeInfo(pool, [null]);
      pool._html$_StreamPool$broadcast$0(null);
      for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType, t3 = this._useCapture; t1.moveNext$0();) {
        t4 = new W._EventStream(t1._dev$_current, t2, t3);
        t4.$builtinTypeInfo = [null];
        pool.add$1(pool, t4);
      }
      t1 = pool._html$_controller;
      t1.toString;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    $asStream: null,
    $isStream: true
  },
  _EventStreamSubscription: {
    "": "StreamSubscription;_pauseCount,_html$_target,_eventType,_html$_onData,_useCapture",
    cancel$0: function() {
      if (this._html$_target == null)
        return;
      this._unlisten$0();
      this._html$_target = null;
      this._html$_onData = null;
    },
    pause$1: function(_, resumeSignal) {
      if (this._html$_target == null)
        return;
      this._pauseCount = this._pauseCount + 1;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      if (this._html$_target == null || this._pauseCount <= 0)
        return;
      this._pauseCount = this._pauseCount - 1;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1 = this._html$_onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._html$_onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    },
    $asStreamSubscription: null
  },
  _StreamPool: {
    "": "Object;_html$_controller,_subscriptions",
    get$stream: function(_) {
      var t1, t2;
      t1 = this._html$_controller;
      t1.toString;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2;
    },
    add$1: function(_, stream) {
      var t1, t2;
      t1 = this._subscriptions;
      if (t1.containsKey$1(stream))
        return;
      t2 = this._html$_controller;
      t1.$indexSet(t1, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), this._html$_controller.get$addError()));
    },
    remove$1: function(_, stream) {
      var t1, subscription;
      t1 = this._subscriptions;
      subscription = t1.remove$1(t1, stream);
      if (subscription != null)
        subscription.cancel$0();
    },
    close$0: function(_) {
      var t1, t2, t3;
      for (t1 = this._subscriptions, t2 = t1.get$values(t1), t3 = t2._iterable, t3 = new H.MappedIterator(null, t3.get$iterator(t3), t2._f), H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t3.moveNext$0();)
        t3._dev$_current.cancel$0();
      t1.clear$0(t1);
      t1 = this._html$_controller;
      t1.close$0(t1);
    },
    get$close: function(_receiver) {
      return new H.BoundClosure$i0(this, W._StreamPool.prototype.close$0, _receiver, "close$0");
    },
    _html$_StreamPool$broadcast$0: function($T) {
      this._html$_controller = P.StreamController_StreamController$broadcast(this.get$close(this), null, true, $T);
    }
  },
  _StreamPool_add_closure: {
    "": "Closure;this_0,stream_1",
    call$0: function() {
      var t1 = this.this_0;
      return t1.remove$1(t1, this.stream_1);
    },
    $isFunction: true,
    $is_void_: true
  },
  _Html5NodeValidator: {
    "": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      var t1 = $.get$_Html5NodeValidator__allowedElements();
      return t1.contains$1(t1, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = J.get$tagName$x(element);
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(t1, tagName + "::" + attributeName);
      if (validator == null)
        validator = t1.$index(t1, "*::" + attributeName);
      if (validator == null)
        return false;
      return validator.call$4(element, attributeName, value, this);
    },
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, attr, t2;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      if (t1.get$isEmpty(t1)) {
        for (t1 = new H.ListIterator(C.List_1GN, 261, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(C.List_1GN, 0)]); t1.moveNext$0();) {
          attr = t1._dev$_current;
          t2 = $.get$_Html5NodeValidator__attributeValidators();
          t2.$indexSet(t2, attr, W._Html5NodeValidator__standardAttributeValidator$closure);
        }
        for (t1 = new H.ListIterator(C.List_yrN, 12, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(C.List_yrN, 0)]); t1.moveNext$0();) {
          attr = t1._dev$_current;
          t2 = $.get$_Html5NodeValidator__attributeValidators();
          t2.$indexSet(t2, attr, W._Html5NodeValidator__uriAttributeValidator$closure);
        }
      }
    },
    $isNodeValidator: true,
    static: {"": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators", _Html5NodeValidator$: function(uriPolicy) {
        var e, t1;
        e = document.createElement("a", null);
        t1 = new W._SameOriginUriPolicy(e, C.Window_methods.get$location(window));
        t1 = new W._Html5NodeValidator(t1);
        t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
        return t1;
      }, _Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
        return true;
      }, _Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
        var t1, t2, t3, t4, t5, t6;
        t1 = context.get$uriPolicy();
        t2 = t1._hiddenAnchor;
        t3 = J.getInterceptor$x(t2);
        t3.set$href(t2, value);
        t4 = t3.get$hostname(t2);
        t1 = t1._loc;
        t5 = J.getInterceptor$x(t1);
        t6 = t5.get$hostname(t1);
        if (t4 == null ? t6 == null : t4 === t6) {
          t4 = t3.get$port(t2);
          t6 = t5.get$port(t1);
          if (t4 == null ? t6 == null : t4 === t6) {
            t4 = t3.get$protocol(t2);
            t1 = t5.get$protocol(t1);
            t1 = t4 == null ? t1 == null : t4 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
        if (!t1)
          t1 = t3.get$hostname(t2) === "" && t3.get$port(t2) === "" && t3.get$protocol(t2) === ":";
        else
          t1 = true;
        return t1;
      }}
  },
  ImmutableListMixin: {
    "": "Object;",
    get$iterator: function(receiver) {
      var t1 = new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)]);
      return t1;
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    sort$1: function(receiver, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  NodeValidatorBuilder: {
    "": "Object;_validators",
    add$1: function(_, validator) {
      this._validators.push(validator);
    },
    allowsElement$1: function(element) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: true
  },
  NodeValidatorBuilder_allowsElement_closure: {
    "": "Closure;element_0",
    call$1: function(v) {
      return v.allowsElement$1(this.element_0);
    },
    $isFunction: true,
    $is_args1: true
  },
  NodeValidatorBuilder_allowsAttribute_closure: {
    "": "Closure;element_0,attributeName_1,value_2",
    call$1: function(v) {
      return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
    },
    $isFunction: true,
    $is_args1: true
  },
  _SimpleNodeValidator: {
    "": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      var t1 = this.allowedElements;
      return t1.contains$1(t1, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = J.get$tagName$x(element);
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(t1, tagName + "::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(t1, "*::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(t1, tagName + "::" + attributeName))
          return true;
        else if (t1.contains$1(t1, "*::" + attributeName))
          return true;
        else if (t1.contains$1(t1, tagName + "::*"))
          return true;
        else if (t1.contains$1(t1, "*::*"))
          return true;
      }
      return false;
    },
    $isNodeValidator: true
  },
  _TemplatingNodeValidator: {
    "": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
    allowsAttribute$3: function(element, attributeName, value) {
      var t1;
      if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (J.get$attributes$x(element)._html$_element.getAttribute("template") === "") {
        t1 = this._templateAttrs;
        return t1.contains$1(t1, attributeName);
      }
      return false;
    },
    static: {"": "_TemplatingNodeValidator__TEMPLATE_ATTRS", _TemplatingNodeValidator$: function() {
        var t1, t2, t3, t4;
        t1 = new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure());
        H.setRuntimeTypeInfo(t1, [null, null]);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t2.addAll$1(t2, ["TEMPLATE"]);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t3.addAll$1(t3, t1);
        t1 = t3;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
        t4.addAll$1(t4, C.List_wSV);
        return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
      }}
  },
  _TemplatingNodeValidator_closure: {
    "": "Closure;",
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(attr);
    },
    $isFunction: true,
    $is_args1: true
  },
  _SvgNodeValidator: {
    "": "Object;",
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor(element);
      if (typeof element === "object" && element !== null && !!t1.$isScriptElement)
        return false;
      if (typeof element === "object" && element !== null && !!t1.$isSvgElement)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: true
  },
  FixedSizeListIterator: {
    "": "Object;_array,_length,_position,_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._length;
      if (nextPosition < t1) {
        this._current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._current;
    },
    "+current": 0
  },
  _LocationWrapper: {
    "": "Object;_ptr",
    get$hostname: function(_) {
      return this._ptr.hostname;
    },
    get$href: function(_) {
      return this._ptr.href;
    },
    set$href: function(_, value) {
      this._ptr.href = value;
    },
    get$port: function(_) {
      return this._ptr.port;
    },
    get$protocol: function(_) {
      return this._ptr.protocol;
    },
    toString$0: function(_) {
      return this._ptr.toString();
    },
    $isLocation: true,
    $isInterceptor: true
  },
  NodeValidator: {
    "": "Object;",
    $isNodeValidator: true
  },
  _SameOriginUriPolicy: {
    "": "Object;_hiddenAnchor,_loc"
  },
  _ValidatingTreeSanitizer: {
    "": "Object;validator",
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
    },
    sanitizeNode$1: function(node) {
      var t1, attrs, t2, t3, isAttr, keys, i, $name, t4;
      t1 = J.getInterceptor$x(node);
      switch (t1.get$nodeType(node)) {
        case 1:
          attrs = t1.get$attributes(node);
          if (!this.validator.allowsElement$1(node)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed element <" + t1.get$tagName(node) + ">";
            t2.toString;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
          t2 = attrs._html$_element;
          isAttr = t2.getAttribute("is");
          if (isAttr != null)
            if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
              window;
              t2 = $.get$Console__safeConsole();
              t3 = "Removing disallowed type extension <" + t1.get$tagName(node) + " is=\"" + isAttr + "\">";
              t2.toString;
              if (typeof console != "undefined")
                console.warn(t3);
              t1.remove$0(node);
              break;
            }
          keys = C.JSArray_methods.toList$0(attrs.get$keys());
          for (i = attrs.get$keys().length - 1; i >= 0; --i) {
            if (i >= keys.length)
              return H.ioore(keys, i);
            $name = keys[i];
            if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
              window;
              t3 = $.get$Console__safeConsole();
              t4 = "Removing disallowed attribute <" + t1.get$tagName(node) + " " + H.S($name) + "=\"" + t2.getAttribute($name) + "\">";
              t3.toString;
              if (typeof console != "undefined")
                console.warn(t4);
              t2.getAttribute($name);
              t2.removeAttribute($name);
            }
          }
          if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
            this.sanitizeTree$1(node.content);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          t1.remove$0(node);
      }
    }
  },
  _ValidatingTreeSanitizer_sanitizeTree_walk: {
    "": "Closure;this_0",
    call$1: function(node) {
      var child, nextChild;
      this.this_0.sanitizeNode$1(node);
      child = J.get$lastChild$x(node);
      for (; child != null; child = nextChild) {
        nextChild = child.previousSibling;
        this.call$1(child);
      }
    },
    $isFunction: true,
    $is_args1: true
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  AElement: {
    "": "GraphicsElement;href=",
    $isInterceptor: true,
    "%": "SVGAElement"
  },
  AltGlyphElement: {
    "": "TextPositioningElement;href=",
    $isInterceptor: true,
    "%": "SVGAltGlyphElement"
  },
  AnimationElement: {
    "": "SvgElement;",
    $isInterceptor: true,
    "%": "SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
  },
  CircleElement: {
    "": "GraphicsElement;r=",
    $isInterceptor: true,
    "%": "SVGCircleElement"
  },
  ClipPathElement: {
    "": "GraphicsElement;",
    $isInterceptor: true,
    "%": "SVGClipPathElement"
  },
  DefsElement: {
    "": "GraphicsElement;",
    $isInterceptor: true,
    "%": "SVGDefsElement"
  },
  EllipseElement: {
    "": "GraphicsElement;",
    $isInterceptor: true,
    "%": "SVGEllipseElement"
  },
  FEBlendElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "": "SvgElement;result=,x=,y=,href=",
    $isInterceptor: true,
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "": "SvgElement;result=,x=,y=",
    $isInterceptor: true,
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "": "SvgElement;x=,y=,href=",
    $isInterceptor: true,
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "": "GraphicsElement;x=,y=",
    $isInterceptor: true,
    "%": "SVGForeignObjectElement"
  },
  GElement: {
    "": "GraphicsElement;",
    $isInterceptor: true,
    "%": "SVGGElement"
  },
  GraphicsElement: {
    "": "SvgElement;",
    $isInterceptor: true,
    "%": ";SVGGraphicsElement"
  },
  ImageElement0: {
    "": "GraphicsElement;x=,y=,href=",
    $isInterceptor: true,
    "%": "SVGImageElement"
  },
  LineElement: {
    "": "GraphicsElement;",
    $isInterceptor: true,
    "%": "SVGLineElement"
  },
  MarkerElement: {
    "": "SvgElement;",
    $isInterceptor: true,
    "%": "SVGMarkerElement"
  },
  MaskElement: {
    "": "SvgElement;x=,y=",
    $isInterceptor: true,
    "%": "SVGMaskElement"
  },
  PathElement: {
    "": "GraphicsElement;",
    $isInterceptor: true,
    "%": "SVGPathElement"
  },
  PatternElement: {
    "": "SvgElement;x=,y=,href=",
    $isInterceptor: true,
    "%": "SVGPatternElement"
  },
  PolygonElement: {
    "": "GraphicsElement;",
    $isInterceptor: true,
    "%": "SVGPolygonElement"
  },
  PolylineElement: {
    "": "GraphicsElement;",
    $isInterceptor: true,
    "%": "SVGPolylineElement"
  },
  RadialGradientElement: {
    "": "_GradientElement;r=",
    "%": "SVGRadialGradientElement"
  },
  RectElement: {
    "": "GraphicsElement;x=,y=",
    $isInterceptor: true,
    "%": "SVGRectElement"
  },
  ScriptElement: {
    "": "SvgElement;href=",
    $isScriptElement: true,
    $isInterceptor: true,
    "%": "SVGScriptElement"
  },
  SvgElement: {
    "": "Element;",
    get$classes: function(receiver) {
      if (receiver._cssClassSet == null)
        receiver._cssClassSet = new P._AttributeClassSet(receiver);
      return receiver._cssClassSet;
    },
    get$children: function(receiver) {
      var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
      H.setRuntimeTypeInfo(t1, [W.Element]);
      return t1;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var t1, html, fragment, svgFragment, root;
      t1 = [];
      H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
      validator = new W.NodeValidatorBuilder(t1);
      t1.push(W._Html5NodeValidator$(null));
      t1.push(W._TemplatingNodeValidator$());
      t1.push(new W._SvgNodeValidator());
      treeSanitizer = new W._ValidatingTreeSanitizer(validator);
      html = "<svg version=\"1.1\">" + svg + "</svg>";
      fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
      svgFragment = document.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    $isSvgElement: true,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGStyleElement|SVGTitleElement|SVGVKernElement;SVGElement"
  },
  SvgSvgElement: {
    "": "GraphicsElement;x=,y=",
    $isInterceptor: true,
    "%": "SVGSVGElement"
  },
  SwitchElement: {
    "": "GraphicsElement;",
    $isInterceptor: true,
    "%": "SVGSwitchElement"
  },
  SymbolElement: {
    "": "SvgElement;",
    $isInterceptor: true,
    "%": "SVGSymbolElement"
  },
  TextContentElement: {
    "": "GraphicsElement;",
    $isInterceptor: true,
    "%": ";SVGTextContentElement"
  },
  TextPathElement: {
    "": "TextContentElement;href=",
    $isInterceptor: true,
    "%": "SVGTextPathElement"
  },
  TextPositioningElement: {
    "": "TextContentElement;x=,y=",
    "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
  },
  UseElement: {
    "": "GraphicsElement;x=,y=,href=",
    $isInterceptor: true,
    "%": "SVGUseElement"
  },
  ViewElement: {
    "": "SvgElement;",
    $isInterceptor: true,
    "%": "SVGViewElement"
  },
  _GradientElement: {
    "": "SvgElement;href=",
    $isInterceptor: true,
    "%": "SVGLinearGradientElement;SVGGradientElement"
  },
  _SVGCursorElement: {
    "": "SvgElement;",
    $isInterceptor: true,
    "%": "SVGCursorElement"
  },
  _SVGFEDropShadowElement: {
    "": "SvgElement;",
    $isInterceptor: true,
    "%": "SVGFEDropShadowElement"
  },
  _SVGGlyphRefElement: {
    "": "SvgElement;",
    $isInterceptor: true,
    "%": "SVGGlyphRefElement"
  },
  _SVGMPathElement: {
    "": "SvgElement;",
    $isInterceptor: true,
    "%": "SVGMPathElement"
  },
  _AttributeClassSet: {
    "": "CssClassSetImpl;_svg$_element",
    readClasses$0: function() {
      var classname, s, t1, t2, trimmed;
      classname = this._svg$_element.getAttribute("class");
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
      if (classname == null)
        return s;
      for (t1 = classname.split(" "), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]); t2.moveNext$0();) {
        trimmed = J.trim$0$s(t2._dev$_current);
        if (trimmed.length !== 0)
          s.add$1(s, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._svg$_element.setAttribute("class", s.join$1(s, " "));
    }
  }
}],
["dart.dom.web_sql", "dart:web_sql", , P, {
  SqlError: {
    "": "Interceptor;message=",
    "%": "SQLError"
  }
}],
["dart.isolate", "dart:isolate", , P, {
  ReceivePort_ReceivePort: function() {
    var t1, t2, t3;
    t1 = $.RawReceivePortImpl__nextFreeId;
    $.RawReceivePortImpl__nextFreeId = t1 + 1;
    t2 = new H.RawReceivePortImpl(t1, null, false);
    t3 = init.globalState.currentContext;
    t3.register$2(t3, t1, t2);
    t1 = new H.ReceivePortImpl(t2, null);
    t1.ReceivePortImpl$fromRawReceivePort$1(t2);
    return t1;
  }
}],
["dart.math", "dart:math", , P, {
  _JenkinsSmiHash_combine: function(hash, value) {
    if (typeof value !== "number")
      return H.iae(value);
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(new P.ArgumentError(a));
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0 && C.JSDouble_methods.get$isNegative(b) || C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(new P.ArgumentError(a));
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && C.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
  },
  _Random: {
    "": "Object;"
  },
  Point: {
    "": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isPoint)
        return false;
      return J.$eq(this.x, other.x) && J.$eq(this.y, other.y);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(0, t1), t2));
    },
    $add: function(_, other) {
      var t1 = J.getInterceptor$x(other);
      t1 = new P.Point(J.$add$ns(this.x, t1.get$x(other)), J.$add$ns(this.y, t1.get$y(other)));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $sub: function(_, other) {
      var t1 = J.getInterceptor$x(other);
      t1 = new P.Point(J.$sub$n(this.x, t1.get$x(other)), J.$sub$n(this.y, t1.get$y(other)));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $mul: function(_, factor) {
      var t1 = new P.Point(J.$mul$n(this.x, factor), J.$mul$n(this.y, factor));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$magnitude: function() {
      var t1, t2;
      t1 = this.x;
      t2 = this.y;
      t2 = J.$add$ns(J.$mul$n(t1, t1), J.$mul$n(t2, t2));
      if (typeof t2 !== "number")
        H.throwExpression(new P.ArgumentError(t2));
      return Math.sqrt(t2);
    },
    $isPoint: true
  },
  _RectangleBase: {
    "": "Object;",
    toString$0: function(_) {
      return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isRectangle)
        return false;
      return J.$eq(this.get$left(this), other.left) && J.$eq(this.top, other.top) && J.$eq(this.width, other.width) && J.$eq(this.height, other.height);
    },
    get$hashCode: function(_) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(this.get$left(this));
      t2 = J.get$hashCode$(this.top);
      t3 = J.get$hashCode$(this.width);
      t4 = J.get$hashCode$(this.height);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
    }
  },
  Rectangle: {
    "": "_RectangleBase;left>",
    $isRectangle: true,
    $as_RectangleBase: null
  }
}],
["dart.mirrors", "dart:mirrors", , P, {
  Mirror: {
    "": "Object;",
    $isMirror: true
  },
  DeclarationMirror: {
    "": "Object;",
    $isDeclarationMirror: true,
    $isMirror: true
  },
  LibraryMirror: {
    "": "Object;",
    $isLibraryMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  TypeMirror: {
    "": "Object;",
    $isDeclarationMirror: true,
    $isMirror: true
  },
  ClassMirror: {
    "": "Object;",
    $isClassMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  TypeVariableMirror: {
    "": "TypeMirror;",
    $isTypeVariableMirror: true
  },
  MethodMirror: {
    "": "Object;",
    $isMethodMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  VariableMirror: {
    "": "Object;",
    $isVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  }
}],
["dart.typed_data", "dart:typed_data", , P, {
  ByteBuffer: {
    "": "Interceptor;",
    $isByteBuffer: true,
    "%": "ArrayBuffer"
  },
  TypedData: {
    "": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 != index || J.$ge$n(index, $length))
        this._invalidIndex$2(receiver, index, $length);
    },
    _checkSublistArguments$3: function(receiver, start, end, $length) {
      this._checkIndex$2(receiver, start, $length + 1);
      return $length;
    },
    $isTypedData: true,
    "%": "DataView;ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin|TypedData_ListMixin0|TypedData_ListMixin_FixedLengthListMixin0|TypedData_ListMixin1|TypedData_ListMixin_FixedLengthListMixin1|TypedData_ListMixin2|TypedData_ListMixin_FixedLengthListMixin2|TypedData_ListMixin3|TypedData_ListMixin_FixedLengthListMixin3|TypedData_ListMixin4|TypedData_ListMixin_FixedLengthListMixin4|TypedData_ListMixin5|TypedData_ListMixin_FixedLengthListMixin5|TypedData_ListMixin6|TypedData_ListMixin_FixedLengthListMixin6|TypedData_ListMixin7|TypedData_ListMixin_FixedLengthListMixin7|Int64List|Uint64List"
  },
  Float32List: {
    "": "TypedData_ListMixin_FixedLengthListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $asList: function() {
      return [J.JSDouble];
    },
    $asIterable: function() {
      return [J.JSDouble];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "Float32Array"
  },
  Float64List: {
    "": "TypedData_ListMixin_FixedLengthListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $asList: function() {
      return [J.JSDouble];
    },
    $asIterable: function() {
      return [J.JSDouble];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "Float64Array"
  },
  Int16List: {
    "": "TypedData_ListMixin_FixedLengthListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $asList: function() {
      return [J.JSInt];
    },
    $asIterable: function() {
      return [J.JSInt];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "Int16Array"
  },
  Int32List: {
    "": "TypedData_ListMixin_FixedLengthListMixin2;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $asList: function() {
      return [J.JSInt];
    },
    $asIterable: function() {
      return [J.JSInt];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "Int32Array"
  },
  Int8List: {
    "": "TypedData_ListMixin_FixedLengthListMixin3;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $asList: function() {
      return [J.JSInt];
    },
    $asIterable: function() {
      return [J.JSInt];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "Int8Array"
  },
  Uint16List: {
    "": "TypedData_ListMixin_FixedLengthListMixin4;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $asList: function() {
      return [J.JSInt];
    },
    $asIterable: function() {
      return [J.JSInt];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "Uint16Array"
  },
  Uint32List: {
    "": "TypedData_ListMixin_FixedLengthListMixin5;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $asList: function() {
      return [J.JSInt];
    },
    $asIterable: function() {
      return [J.JSInt];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "Uint32Array"
  },
  Uint8ClampedList: {
    "": "TypedData_ListMixin_FixedLengthListMixin6;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $asList: function() {
      return [J.JSInt];
    },
    $asIterable: function() {
      return [J.JSInt];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  Uint8List: {
    "": "TypedData_ListMixin_FixedLengthListMixin7;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $asList: function() {
      return [J.JSInt];
    },
    $asIterable: function() {
      return [J.JSInt];
    },
    $isList: true,
    $isEfficientLength: true,
    $isIterable: true,
    $isJavaScriptIndexingBehavior: true,
    "%": ";Uint8Array"
  },
  TypedData_ListMixin: {
    "": "TypedData+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  TypedData_ListMixin_FixedLengthListMixin: {
    "": "TypedData_ListMixin+FixedLengthListMixin;",
    $asList: null,
    $asIterable: null
  },
  TypedData_ListMixin0: {
    "": "TypedData+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  TypedData_ListMixin_FixedLengthListMixin0: {
    "": "TypedData_ListMixin0+FixedLengthListMixin;",
    $asList: null,
    $asIterable: null
  },
  TypedData_ListMixin1: {
    "": "TypedData+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  TypedData_ListMixin_FixedLengthListMixin1: {
    "": "TypedData_ListMixin1+FixedLengthListMixin;",
    $asList: null,
    $asIterable: null
  },
  TypedData_ListMixin2: {
    "": "TypedData+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  TypedData_ListMixin_FixedLengthListMixin2: {
    "": "TypedData_ListMixin2+FixedLengthListMixin;",
    $asList: null,
    $asIterable: null
  },
  TypedData_ListMixin3: {
    "": "TypedData+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  TypedData_ListMixin_FixedLengthListMixin3: {
    "": "TypedData_ListMixin3+FixedLengthListMixin;",
    $asList: null,
    $asIterable: null
  },
  TypedData_ListMixin4: {
    "": "TypedData+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  TypedData_ListMixin_FixedLengthListMixin4: {
    "": "TypedData_ListMixin4+FixedLengthListMixin;",
    $asList: null,
    $asIterable: null
  },
  TypedData_ListMixin5: {
    "": "TypedData+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  TypedData_ListMixin_FixedLengthListMixin5: {
    "": "TypedData_ListMixin5+FixedLengthListMixin;",
    $asList: null,
    $asIterable: null
  },
  TypedData_ListMixin6: {
    "": "TypedData+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  TypedData_ListMixin_FixedLengthListMixin6: {
    "": "TypedData_ListMixin6+FixedLengthListMixin;",
    $asList: null,
    $asIterable: null
  },
  TypedData_ListMixin7: {
    "": "TypedData+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  TypedData_ListMixin_FixedLengthListMixin7: {
    "": "TypedData_ListMixin7+FixedLengthListMixin;",
    $asList: null,
    $asIterable: null
  },
  Int64List: {
    "": "TypedData;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isJavaScriptIndexingBehavior: true,
    static: {"": "Int64List_BYTES_PER_ELEMENT"}
  },
  Uint64List: {
    "": "TypedData;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isJavaScriptIndexingBehavior: true,
    static: {"": "Uint64List_BYTES_PER_ELEMENT"}
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["frame", "package:stack_trace/src/frame.dart", , S, {
  Frame: {
    "": "Object;uri<,line<,column<,member<",
    get$isCore: function() {
      return J.$eq(this.uri.scheme, "dart");
    },
    get$library: function() {
      var t1, t2;
      t1 = this.uri;
      if (!J.$eq(t1.scheme, "file"))
        return t1.toString$0(t1);
      t2 = $.get$_builder();
      return t2.relative$2$from(t2.style.pathFromUri$1(t1), null);
    },
    get$$package: function() {
      var t1 = this.uri;
      if (!J.$eq(t1.scheme, "package"))
        return;
      return C.JSArray_methods.get$first(J.split$1$s(t1._path, "/"));
    },
    get$location: function(_) {
      var t1, t2;
      t1 = this.line;
      if (t1 == null)
        return this.get$library();
      t2 = this.column;
      if (t2 == null)
        return this.get$library() + " " + H.S(t1);
      return this.get$library() + " " + H.S(t1) + ":" + H.S(t2);
    },
    toString$0: function(_) {
      return this.get$location(this) + " in " + H.S(this.member);
    },
    $isFrame: true,
    static: {Frame_Frame$parseVM: function(frame) {
        var match, t1, member, t2, uri, line, columnMatch, column;
        if (J.$eq(frame, "..."))
          return new S.Frame(P.Uri$("", "", null, null, 0, null, null, null, ""), null, null, "...");
        match = $.get$_vmFrame().firstMatch$1(frame);
        if (match == null)
          throw H.wrapException(P.FormatException$("Couldn't parse VM stack trace line '" + H.S(frame) + "'."));
        t1 = match.__js_helper$_match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        member = J.replaceAll$2$s(t1[1], "<anonymous closure>", "<fn>");
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        t2 = t1[2];
        uri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t2));
        if (3 >= t1.length)
          return H.ioore(t1, 3);
        line = H.Primitives_parseInt(t1[3], null, null);
        if (4 >= t1.length)
          return H.ioore(t1, 4);
        columnMatch = t1[4];
        column = columnMatch != null ? H.Primitives_parseInt(columnMatch, null, null) : null;
        return new S.Frame(uri, line, column, member);
      }, Frame_Frame$parseV8: function(frame) {
        var match, t1, t2, t3, uri, member;
        match = $.get$_v8Frame().firstMatch$1(frame);
        if (match == null)
          throw H.wrapException(P.FormatException$("Couldn't parse V8 stack trace line '" + H.S(frame) + "'."));
        t1 = match.__js_helper$_match;
        t2 = t1.length;
        if (2 >= t2)
          return H.ioore(t1, 2);
        t3 = t1[2];
        if (t3 != null) {
          uri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t3));
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          member = J.replaceAll$2$s(t1[1], "<anonymous>", "<fn>");
          if (3 >= t1.length)
            return H.ioore(t1, 3);
          t2 = H.Primitives_parseInt(t1[3], null, null);
          if (4 >= t1.length)
            return H.ioore(t1, 4);
          return new S.Frame(uri, t2, H.Primitives_parseInt(t1[4], null, null), member);
        } else {
          if (5 >= t2)
            return H.ioore(t1, 5);
          t2 = t1[5];
          uri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t2));
          if (6 >= t1.length)
            return H.ioore(t1, 6);
          t2 = H.Primitives_parseInt(t1[6], null, null);
          if (7 >= t1.length)
            return H.ioore(t1, 7);
          return new S.Frame(uri, t2, H.Primitives_parseInt(t1[7], null, null), "<fn>");
        }
      }}
  }
}],
["harness_browser", "harness_browser.dart", , L, {
  main5: function() {
    var t1, t2;
    $.groupSep = " - ";
    t1 = $.get$_singletonNotLayout();
    t2 = $._config;
    if (t2 == null ? t1 != null : t2 !== t1) {
      if (t2 != null)
        H.throwExpression(P.StateError$("unittestConfiguration has already been set"));
      $._config = t1;
    }
    N.main();
  }
},
1],
["html_common", "dart:html_common", , P, {
  _convertDartToNative_PrepareForStructuredClone: function(value) {
    var copies, copy;
    copies = [];
    copy = new P._convertDartToNative_PrepareForStructuredClone_walk(new P._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new P._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new P._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
    new P._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
    return copy;
  },
  convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  },
  Device_isWebKit: function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      t1 = t1 !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      $.Device__isWebKit = t1;
    }
    return t1;
  },
  _convertDartToNative_PrepareForStructuredClone_findSlot: {
    "": "Closure;values_1,copies_2",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this.values_1;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_2.push(null);
      return $length;
    },
    $isFunction: true,
    $is_args1: true
  },
  _convertDartToNative_PrepareForStructuredClone_readSlot: {
    "": "Closure;copies_3",
    call$1: function(i) {
      var t1 = this.copies_3;
      if (i >>> 0 !== i || i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    },
    $isFunction: true,
    $is_args1: true
  },
  _convertDartToNative_PrepareForStructuredClone_writeSlot: {
    "": "Closure;copies_4",
    call$2: function(i, x) {
      var t1 = this.copies_4;
      if (i >>> 0 !== i || i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    },
    $isFunction: true,
    $is_args2: true
  },
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots: {
    "": "Closure;",
    call$0: function() {
    },
    $isFunction: true,
    $is_void_: true
  },
  _convertDartToNative_PrepareForStructuredClone_walk: {
    "": "Closure;findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var t1, t2, slot, copy, $length, i;
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      t2 = J.getInterceptor(e);
      if (typeof e === "object" && e !== null && !!t2.$isDateTime)
        return new Date(e.millisecondsSinceEpoch);
      if (typeof e === "object" && e !== null && !!t2.$isRegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (typeof e === "object" && e !== null && !!t2.$isFile)
        return e;
      if (typeof e === "object" && e !== null && !!t2.$isBlob)
        return e;
      if (typeof e === "object" && e !== null && !!t2.$isByteBuffer)
        return e;
      if (typeof e === "object" && e !== null && !!t2.$isTypedData)
        return e;
      if (typeof e === "object" && e !== null && !!t2.$isMap) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        t1.copy_0 = copy;
        if (copy != null)
          return copy;
        copy = {};
        t1.copy_0 = copy;
        this.writeSlot_7.call$2(slot, copy);
        t2.forEach$1(e, new P._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
        return t1.copy_0;
      }
      if (typeof e === "object" && e !== null && (e.constructor === Array || !!t2.$isList)) {
        $length = t2.get$length(e);
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null) {
          if (true === copy) {
            copy = new Array($length);
            this.writeSlot_7.call$2(slot, copy);
          }
          return copy;
        }
        copy = new Array($length);
        this.writeSlot_7.call$2(slot, copy);
        for (i = 0; i < $length; ++i) {
          t1 = this.call$1(t2.$index(e, i));
          if (i >= copy.length)
            return H.ioore(copy, i);
          copy[i] = t1;
        }
        return copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    $isFunction: true,
    $is_args1: true
  },
  _convertDartToNative_PrepareForStructuredClone_walk_closure: {
    "": "Closure;box_0,walk_8",
    call$2: function(key, value) {
      this.box_0.copy_0[key] = this.walk_8.call$1(value);
    },
    $isFunction: true,
    $is_args2: true
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "": "Closure;values_0,copies_1",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this.values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_1.push(null);
      return $length;
    },
    $isFunction: true,
    $is_args1: true
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "": "Closure;copies_2",
    call$1: function(i) {
      var t1 = this.copies_2;
      if (i >>> 0 !== i || i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    },
    $isFunction: true,
    $is_args1: true
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "": "Closure;copies_3",
    call$2: function(i, x) {
      var t1 = this.copies_3;
      if (i >>> 0 !== i || i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    },
    $isFunction: true,
    $is_args2: true
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var slot, copy, t1, t2, key, $length, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (Object.getPrototypeOf(e) === Object.prototype) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        this.writeSlot_7.call$2(slot, copy);
        for (t1 = Object.keys(e), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]); t2.moveNext$0();) {
          key = t2._dev$_current;
          copy.$indexSet(copy, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this.mustCopy_4 ? new Array($length) : e;
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    },
    $isFunction: true,
    $is_args1: true
  },
  CssClassSetImpl: {
    "": "Object;",
    toString$0: function(_) {
      var t1 = this.readClasses$0();
      return t1.join$1(t1, " ");
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this.readClasses$0();
      t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
      H.setRuntimeTypeInfo(t2, [null]);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1 = this.readClasses$0();
      t1.forEach$1(t1, f);
    },
    map$1: function(_, f) {
      var t1 = this.readClasses$0();
      return H.MappedIterable_MappedIterable(t1, f, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
    },
    get$isEmpty: function(_) {
      return this.readClasses$0()._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.readClasses$0()._collection$_length !== 0;
    },
    get$length: function(_) {
      return this.readClasses$0()._collection$_length;
    },
    reduce$1: function(_, combine) {
      var t1 = this.readClasses$0();
      return t1.reduce$1(t1, combine);
    },
    contains$1: function(_, value) {
      var t1 = this.readClasses$0();
      return t1.contains$1(t1, value);
    },
    lookup$1: function(value) {
      var t1 = this.readClasses$0();
      return t1.contains$1(t1, value) ? value : null;
    },
    add$1: function(_, value) {
      return this.modify$1(new P.CssClassSetImpl_add_closure(value));
    },
    union$1: function(other) {
      var t1, t2;
      t1 = this.readClasses$0();
      t2 = t1._newSet$0();
      t2.addAll$1(t2, t1);
      t2.addAll$1(t2, other);
      return t2;
    },
    get$first: function(_) {
      var t1 = this.readClasses$0()._first;
      if (t1 == null)
        H.throwExpression(P.StateError$("No elements"));
      return t1.get$_element();
    },
    get$last: function(_) {
      var t1 = this.readClasses$0()._last;
      if (t1 == null)
        H.throwExpression(P.StateError$("No elements"));
      return t1.get$_element();
    },
    modify$1: function(f) {
      var s, ret;
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    },
    $isSet: true,
    $asSet: function() {
      return [J.JSString];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSString];
    }
  },
  CssClassSetImpl_add_closure: {
    "": "Closure;value_0",
    call$1: function(s) {
      return J.add$1$ax(s, this.value_0);
    },
    $isFunction: true,
    $is_args1: true
  },
  FilteredElementList: {
    "": "ListBase;_node,_childNodes",
    get$_filtered: function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
    },
    forEach$1: function(_, f) {
      H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    },
    set$length: function(_, newLength) {
      var len = this.get$_filtered().length;
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(new P.ArgumentError("Invalid list length"));
      this.removeRange$2(this, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(value);
    },
    contains$1: function(_, needle) {
      var t1 = J.getInterceptor(needle);
      if (typeof needle !== "object" || needle === null || !t1.$isElement)
        return false;
      return needle.parentNode === this._node;
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort filtered list"));
    },
    removeRange$2: function(_, start, end) {
      H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    },
    get$length: function(_) {
      return this.get$_filtered().length;
    },
    $index: function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this.get$_filtered();
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2;
    },
    $asListBase: null,
    $asList: null,
    $asIterable: null
  },
  FilteredElementList__filtered_closure: {
    "": "Closure;",
    call$1: function(n) {
      var t1 = J.getInterceptor(n);
      return typeof n === "object" && n !== null && !!t1.$isElement;
    },
    $isFunction: true,
    $is_args1: true
  },
  FilteredElementList_removeRange_closure: {
    "": "Closure;",
    call$1: function(el) {
      return J.remove$0$ax(el);
    },
    $isFunction: true,
    $is_args1: true
  }
}],
["lazy_trace", "package:stack_trace/src/lazy_trace.dart", , S, {
  LazyTrace: {
    "": "Object;_thunk,_inner",
    _thunk$0: function() {
      return this._thunk.call$0();
    },
    get$_lazy_trace$_trace: function() {
      var t1 = this._inner;
      if (t1 == null) {
        t1 = this._thunk$0();
        this._inner = t1;
      }
      return t1;
    },
    get$frames: function() {
      return this.get$_lazy_trace$_trace().get$frames();
    },
    toString$0: function(_) {
      return J.toString$0(this.get$_lazy_trace$_trace());
    },
    $isTrace: true,
    $isStackTrace: true
  }
}],
["matcher", "package:unittest/matcher.dart", , O, {
  addStateInfo: function(matchState, values) {
    var innerState = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    innerState.addAll$1(innerState, matchState);
    matchState.clear$0(matchState);
    matchState.$indexSet(matchState, "state", innerState);
    matchState.addAll$1(matchState, values);
  },
  expect: function(actual, matcher, failureHandler, reason, verbose) {
    var doesMatch, matchState, e, trace, exception, t1, handler;
    matcher = O.wrapMatcher(matcher);
    doesMatch = null;
    matchState = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    try {
      doesMatch = J.matches$2$x(matcher, actual, matchState);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      trace = new H._StackTrace(exception, null);
      doesMatch = false;
      if (reason == null) {
        t1 = e;
        reason = H.S(typeof t1 === "string" ? e : J.toString$0(e)) + " at " + H.S(trace);
      }
    }

    if (doesMatch !== true) {
      t1 = $._assertFailureHandler;
      if (t1 == null) {
        handler = new O.DefaultFailureHandler();
        if ($._assertErrorFormatter == null)
          $._assertErrorFormatter = O._defaultErrorFormatter$closure;
        $._assertFailureHandler = handler;
        failureHandler = handler;
      } else
        failureHandler = t1;
      failureHandler.toString;
      failureHandler.fail$1($._assertErrorFormatter.call$5(actual, matcher, reason, matchState, verbose));
    }
  },
  fail: function(message, failureHandler) {
    if ($._assertFailureHandler == null)
      O.configureExpectFailureHandler(null);
    failureHandler = $._assertFailureHandler;
    failureHandler.fail$1(message);
  },
  wrapMatcher: function(x) {
    var t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && !!t1.$isMatcher)
      return x;
    else if (typeof x === "object" && x !== null && !!t1.$isFunction)
      return new O._Predicate(x, "satisfies function");
    else
      return typeof x === "string" ? new O._StringEqualsMatcher(x) : new O._DeepMatcher(x, 100, null);
  },
  configureExpectFailureHandler: function(handler) {
    if (handler == null) {
      handler = new O.DefaultFailureHandler();
      if ($._assertErrorFormatter == null)
        $._assertErrorFormatter = O._defaultErrorFormatter$closure;
    }
    $._assertFailureHandler = handler;
  },
  _defaultErrorFormatter: function(actual, matcher, reason, matchState, verbose) {
    var description, t1, mismatchDescription;
    description = new O.StringDescription(null);
    description._out = "";
    description._out = "Expected: ";
    t1 = description.addDescriptionOf$1(matcher);
    t1._out = t1._out + "\n";
    description._out = description._out + "  Actual: ";
    t1 = description.addDescriptionOf$1(actual);
    t1._out = t1._out + "\n";
    mismatchDescription = new O.StringDescription(null);
    mismatchDescription._out = "";
    matcher.describeMismatch$4(actual, mismatchDescription, matchState, verbose);
    if (mismatchDescription._out.length > 0) {
      t1 = "   Which: " + H.S(mismatchDescription) + "\n";
      description._out = description._out + t1;
    }
    if (reason != null) {
      t1 = description._out + H.S(reason);
      description._out = t1;
      description._out = t1 + "\n";
    }
    return description._out;
  },
  _IsNull: {
    "": "Matcher;",
    matches$2: function(_, item, matchState) {
      return item == null;
    },
    describe$1: function(description) {
      description._out = description._out + "null";
      return description;
    }
  },
  _IsTrue: {
    "": "Matcher;",
    matches$2: function(_, item, matchState) {
      return J.$eq(item, true);
    },
    describe$1: function(description) {
      description._out = description._out + "true";
      return description;
    }
  },
  _IsFalse: {
    "": "Matcher;",
    matches$2: function(_, item, matchState) {
      return J.$eq(item, false);
    },
    describe$1: function(description) {
      description._out = description._out + "false";
      return description;
    }
  },
  _IsSameAs: {
    "": "Matcher;_expected",
    matches$2: function(_, item, matchState) {
      var t1 = this._expected;
      return item == null ? t1 == null : item === t1;
    },
    describe$1: function(description) {
      description._out = description._out + "same instance as ";
      return description.addDescriptionOf$1(this._expected);
    }
  },
  _DeepMatcher: {
    "": "Matcher;_expected,_limit,count",
    _compareIterables$5: function(expected, actual, matcher, depth, $location) {
      var t1, expectedIterator, actualIterator, index, newLocation, rp;
      t1 = J.getInterceptor$ax(actual);
      if (typeof actual !== "object" || actual === null || actual.constructor !== Array && !t1.$isIterable)
        return ["is not Iterable", $location];
      expectedIterator = J.get$iterator$ax(expected);
      actualIterator = t1.get$iterator(actual);
      for (index = 0; true;) {
        newLocation = H.S($location) + "[" + index + "]";
        if (expectedIterator.moveNext$0() === true)
          if (actualIterator.moveNext$0() === true) {
            rp = matcher.call$4(expectedIterator.get$current(), actualIterator.get$current(), newLocation, depth);
            if (rp != null)
              return rp;
            ++index;
          } else
            return ["shorter than expected", newLocation];
        else if (actualIterator.moveNext$0() === true)
          return ["longer than expected", newLocation];
        else
          return;
      }
      return;
    },
    _recursiveMatch$4: function(expected, actual, $location, depth) {
      var reason, equal, e, t1, canRecurse, exception, t2, t3, result, err, key, rp, description;
      reason = null;
      t1 = J.getInterceptor(depth);
      canRecurse = t1.$eq(depth, 0) || this._limit > 1;
      equal = null;
      try {
        equal = J.$eq(expected, actual);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        reason = "== threw \"" + H.S(e) + "\"";
        return [reason, $location];
      }

      if (equal === true)
        ;
      else if (t1.$gt(depth, this._limit))
        reason = "recursion depth limit exceeded";
      else {
        t2 = expected;
        t3 = J.getInterceptor(t2);
        if (typeof t2 === "object" && t2 !== null && (t2.constructor === Array || !!t3.$isIterable) && canRecurse) {
          result = this._compareIterables$5(expected, actual, this.get$_recursiveMatch(), t1.$add(depth, 1), $location);
          if (result != null) {
            t1 = J.getInterceptor$asx(result);
            reason = t1.$index(result, 0);
            $location = t1.$index(result, 1);
          }
        } else {
          t2 = expected;
          t3 = J.getInterceptor(t2);
          if (typeof t2 === "object" && t2 !== null && !!t3.$isMap && canRecurse) {
            t2 = actual;
            t3 = J.getInterceptor(t2);
            if (typeof t2 !== "object" || t2 === null || !t3.$isMap)
              reason = "expected a map";
            else {
              t2 = J.get$length$asx(expected);
              t3 = J.get$length$asx(actual);
              err = (t2 == null ? t3 == null : t2 === t3) ? "" : "has different length and ";
              for (t2 = J.get$iterator$ax(expected.get$keys()); t2.moveNext$0();) {
                key = t2.get$current();
                if (actual.containsKey$1(key) !== true) {
                  reason = err + "is missing map key '" + H.S(key) + "'";
                  break;
                }
              }
              if (reason == null) {
                for (t2 = J.get$iterator$ax(actual.get$keys()); t2.moveNext$0();) {
                  key = t2.get$current();
                  if (expected.containsKey$1(key) !== true) {
                    reason = err + "has extra map key '" + H.S(key) + "'";
                    break;
                  }
                }
                if (reason == null)
                  for (t2 = J.get$iterator$ax(expected.get$keys()); t2.moveNext$0();) {
                    key = t2.get$current();
                    rp = this._recursiveMatch$4(J.$index$asx(expected, key), J.$index$asx(actual, key), H.S($location) + "['" + H.S(key) + "']", t1.$add(depth, 1));
                    if (rp != null) {
                      reason = rp[0];
                      $location = rp[1];
                      break;
                    }
                  }
              }
            }
          } else {
            description = new O.StringDescription(null);
            description._out = "";
            if (t1.$gt(depth, 0)) {
              description._out = "was ";
              t1 = actual;
              t2 = J.getInterceptor(t1);
              if (typeof t1 === "object" && t1 !== null && !!t2.$isMatcher)
                t1.describe$1(description);
              else
                description._out = "was " + A.prettyPrint(t1, 25, 80);
              description._out = description._out + " instead of ";
              t1 = expected;
              t2 = J.getInterceptor(t1);
              if (typeof t1 === "object" && t1 !== null && !!t2.$isMatcher)
                t1.describe$1(description);
              else {
                t1 = A.prettyPrint(t1, 25, 80);
                description._out = description._out + t1;
              }
              reason = description._out;
            } else
              reason = "";
          }
        }
      }
      if (reason == null)
        return;
      return [reason, $location];
    },
    get$_recursiveMatch: function() {
      return new O.BoundClosure$4(this, O._DeepMatcher.prototype._recursiveMatch$4, null, "_recursiveMatch$4");
    },
    _match$3: function(expected, actual, matchState) {
      var rp, t1, reason;
      rp = this._recursiveMatch$4(expected, actual, "", 0);
      if (rp == null)
        return;
      if (J.$gt$n(J.get$length$asx(rp[0]), 0)) {
        t1 = J.$gt$n(J.get$length$asx(rp[1]), 0);
        reason = rp[0];
        if (t1)
          reason = H.S(reason) + " at location " + H.S(rp[1]);
      } else
        reason = "";
      O.addStateInfo(matchState, H.fillLiteralMap(["reason", reason], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      return reason;
    },
    matches$2: function(_, item, matchState) {
      return this._match$3(this._expected, item, matchState) == null;
    },
    describe$1: function(description) {
      return description.addDescriptionOf$1(this._expected);
    },
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      var reason, t1, t2;
      reason = J.$index$asx(matchState, "reason");
      t1 = J.get$length$asx(reason) === 0 && mismatchDescription._out.length > 0;
      t2 = mismatchDescription._out;
      if (t1) {
        mismatchDescription._out = t2 + "is ";
        mismatchDescription.addDescriptionOf$1(item);
      } else
        mismatchDescription._out = t2 + H.S(reason);
      return mismatchDescription;
    }
  },
  _StringEqualsMatcher: {
    "": "Matcher;_matcher$_value",
    matches$2: function(_, item, matchState) {
      return this._matcher$_value === item;
    },
    describe$1: function(description) {
      return description.addDescriptionOf$1(this._matcher$_value);
    },
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      var t1, buff, escapedItem, escapedValue, minLength, minLength0, minLength1, start, i;
      if (typeof item !== "string") {
        t1 = mismatchDescription.addDescriptionOf$1(item);
        t1._out = t1._out + "is not a string";
        return t1;
      } else {
        buff = P.StringBuffer$("");
        buff.write$1("is different.");
        t1 = C.JSString_methods.replaceAll$2(item, "\n", "\\n");
        t1 = H.stringReplaceAllUnchecked(t1, "\r", "\\r");
        escapedItem = H.stringReplaceAllUnchecked(t1, "\t", "\\t");
        t1 = C.JSString_methods.replaceAll$2(this._matcher$_value, "\n", "\\n");
        t1 = H.stringReplaceAllUnchecked(t1, "\r", "\\r");
        escapedValue = H.stringReplaceAllUnchecked(t1, "\t", "\\t");
        minLength = escapedItem.length;
        minLength0 = escapedValue.length;
        minLength1 = minLength < minLength0 ? minLength : minLength0;
        for (start = 0; start < minLength1; ++start) {
          if (start >= minLength0)
            H.throwExpression(P.RangeError$value(start));
          t1 = escapedValue.charCodeAt(start);
          if (start >= minLength)
            H.throwExpression(P.RangeError$value(start));
          if (t1 !== escapedItem.charCodeAt(start))
            break;
        }
        if (start === minLength1)
          if (minLength0 < minLength) {
            buff.write$1(" Both strings start the same, but the given value also has the following trailing characters: ");
            O._StringEqualsMatcher__writeTrailing(buff, escapedItem, minLength0);
          } else {
            buff.write$1(" Both strings start the same, but the given value is missing the following trailing characters: ");
            O._StringEqualsMatcher__writeTrailing(buff, escapedValue, minLength);
          }
        else {
          buff.write$1("\nExpected: ");
          O._StringEqualsMatcher__writeLeading(buff, escapedValue, start);
          O._StringEqualsMatcher__writeTrailing(buff, escapedValue, start);
          buff.write$1("\n  Actual: ");
          O._StringEqualsMatcher__writeLeading(buff, escapedItem, start);
          O._StringEqualsMatcher__writeTrailing(buff, escapedItem, start);
          buff.write$1("\n          ");
          i = start > 10 ? 14 : start;
          for (; i > 0; --i)
            buff._contents = buff._contents + " ";
          buff.write$1("^\n Differ at offset " + start);
        }
        mismatchDescription._out = buff._contents;
        return mismatchDescription;
      }
    },
    static: {_StringEqualsMatcher__writeLeading: function(buff, s, start) {
        if (start > 10) {
          buff.write$1("... ");
          buff.write$1(C.JSString_methods.substring$2(s, start - 10, start));
        } else
          buff.write$1(C.JSString_methods.substring$2(s, 0, start));
      }, _StringEqualsMatcher__writeTrailing: function(buff, s, start) {
        var t1 = start + 10;
        if (t1 > s.length)
          buff.write$1(C.JSString_methods.substring$1(s, start));
        else {
          buff.write$1(C.JSString_methods.substring$2(s, start, t1));
          buff.write$1(" ...");
        }
      }}
  },
  isInstanceOf: {
    "": "Matcher;_matcher$_name",
    matches$2: function(_, obj, matchState) {
      var t1 = H.checkSubtypeOfRuntimeType(obj, H.getTypeArgumentByIndex(this, 0));
      return t1;
    },
    describe$1: function(description) {
      var t1 = "an instance of " + this._matcher$_name;
      description._out = description._out + t1;
      return description;
    }
  },
  Throws: {
    "": "Matcher;_matcher",
    matches$2: function(_, item, matchState) {
      var e, s, t1, t2, done, exception;
      t1 = item;
      t2 = J.getInterceptor(t1);
      if (typeof t1 !== "object" || t1 === null || !t2.$isFunction) {
        t1 = item;
        t2 = J.getInterceptor(t1);
        t2 = typeof t1 !== "object" || t1 === null || !t2.$isFuture;
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        return false;
      t1 = item;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture) {
        done = $.get$wrapAsync().call$1(new O.Throws_matches_closure());
        item.then$2$onError(new O.Throws_matches_closure0(done), new O.Throws_matches_closure1(this, done));
        return true;
      }
      try {
        item.call$0();
        return false;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        t1 = this._matcher;
        if (t1 == null || t1.matches$2(t1, e, matchState) === true)
          return true;
        else {
          O.addStateInfo(matchState, H.fillLiteralMap(["exception", e, "stack", s], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          return false;
        }
      }

    },
    describe$1: function(description) {
      var t1, t2;
      t1 = this._matcher;
      t2 = description._out;
      if (t1 == null) {
        description._out = t2 + "throws";
        return description;
      } else {
        description._out = t2 + "throws ";
        return description.addDescriptionOf$1(t1);
      }
    },
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      var t1, t2;
      t1 = J.getInterceptor(item);
      if ((typeof item !== "object" || item === null || !t1.$isFunction) && (typeof item !== "object" || item === null || !t1.$isFuture)) {
        mismatchDescription._out = mismatchDescription._out + "is not a Function or Future";
        return mismatchDescription;
      } else {
        t1 = this._matcher == null || J.$index$asx(matchState, "exception") == null;
        t2 = mismatchDescription._out;
        if (t1) {
          mismatchDescription._out = t2 + "did not throw";
          return mismatchDescription;
        } else {
          mismatchDescription._out = t2 + "threw ";
          t1 = J.getInterceptor$asx(matchState);
          mismatchDescription.addDescriptionOf$1(t1.$index(matchState, "exception"));
          if (verbose === true) {
            mismatchDescription._out = mismatchDescription._out + " at ";
            t1 = J.toString$0(t1.$index(matchState, "stack"));
            mismatchDescription._out = mismatchDescription._out + H.S(t1);
          }
          return mismatchDescription;
        }
      }
    }
  },
  Throws_matches_closure: {
    "": "Closure;",
    call$1: function(fn) {
      return fn.call$0();
    },
    $isFunction: true,
    $is_args1: true
  },
  Throws_matches_closure0: {
    "": "Closure;done_0",
    call$1: function(value) {
      this.done_0.call$1(new O.Throws_matches__closure0(value));
    },
    $isFunction: true,
    $is_args1: true
  },
  Throws_matches__closure0: {
    "": "Closure;value_1",
    call$0: function() {
      return O.fail("Expected future to fail, but succeeded with '" + H.S(this.value_1) + "'.", null);
    },
    $isFunction: true,
    $is_void_: true
  },
  Throws_matches_closure1: {
    "": "Closure;this_2,done_3",
    call$2: function(error, trace) {
      this.done_3.call$1(new O.Throws_matches__closure(this.this_2, error, trace));
    },
    $isFunction: true,
    $is_args2: true
  },
  Throws_matches__closure: {
    "": "Closure;this_4,error_5,trace_6",
    call$0: function() {
      var t1, t2, reason;
      t1 = this.this_4._matcher;
      if (t1 == null)
        return;
      t2 = this.trace_6;
      reason = t2 != null ? "Actual exception trace:\n" + ("  " + J.replaceAll$2$s(J.toString$0(t2), "\n", "\n  ")) : null;
      O.expect(this.error_5, t1, null, reason, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  _ReturnsNormally: {
    "": "Matcher;",
    matches$2: function(_, f, matchState) {
      var e, s, exception, t1;
      try {
        f.call$0();
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        O.addStateInfo(matchState, H.fillLiteralMap(["exception", e, "stack", s], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        return false;
      }

    },
    describe$1: function(description) {
      description._out = description._out + "return normally";
      return description;
    },
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      var t1;
      mismatchDescription._out = mismatchDescription._out + "threw ";
      t1 = J.getInterceptor$asx(matchState);
      mismatchDescription.addDescriptionOf$1(t1.$index(matchState, "exception"));
      if (verbose === true) {
        mismatchDescription._out = mismatchDescription._out + " at ";
        t1 = J.toString$0(t1.$index(matchState, "stack"));
        mismatchDescription._out = mismatchDescription._out + H.S(t1);
      }
      return mismatchDescription;
    }
  },
  TypeMatcher: {
    "": "Matcher;",
    describe$1: function(description) {
      description._out = description._out + this._matcher$_name;
      return description;
    }
  },
  _ArgumentError: {
    "": "TypeMatcher;_matcher$_name",
    matches$2: function(_, item, matchState) {
      var t1 = J.getInterceptor(item);
      return typeof item === "object" && item !== null && !!t1.$isArgumentError;
    }
  },
  _UnsupportedError: {
    "": "TypeMatcher;_matcher$_name",
    matches$2: function(_, item, matchState) {
      var t1 = J.getInterceptor(item);
      return typeof item === "object" && item !== null && !!t1.$isUnsupportedError;
    }
  },
  _Contains: {
    "": "Matcher;_expected",
    matches$2: function(_, item, matchState) {
      var t1;
      if (typeof item === "string")
        return C.JSString_methods.indexOf$1(item, this._expected) >= 0;
      else {
        t1 = J.getInterceptor$asx(item);
        if (typeof item === "object" && item !== null && (item.constructor === Array || !!t1.$isIterable))
          return t1.contains$1(item, this._expected);
        else if (typeof item === "object" && item !== null && !!t1.$isMap)
          return item.containsKey$1(this._expected);
      }
      return false;
    },
    describe$1: function(description) {
      description._out = description._out + "contains ";
      return description.addDescriptionOf$1(this._expected);
    },
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      var t1;
      if (typeof item !== "string") {
        t1 = J.getInterceptor(item);
        t1 = typeof item === "object" && item !== null && (item.constructor === Array || !!t1.$isIterable) || typeof item === "object" && item !== null && !!t1.$isMap;
      } else
        t1 = true;
      if (t1)
        return O.Matcher.prototype.describeMismatch$4.call(this, item, mismatchDescription, matchState, verbose);
      else {
        mismatchDescription._out = mismatchDescription._out + "is not a string, map or iterable";
        return mismatchDescription;
      }
    }
  },
  _Contains_matches_closure: {
    "": "Closure;this_0,matchState_1",
    call$1: function(e) {
      return C.JSString_methods.matches$2(this.this_0._expected, e, this.matchState_1);
    },
    $isFunction: true,
    $is_args1: true
  },
  _Predicate: {
    "": "Matcher;_matcher,_description",
    _matcher$1: function(arg0) {
      return this._matcher.call$1(arg0);
    },
    matches$2: function(_, item, matchState) {
      return this._matcher$1(item);
    },
    describe$1: function(description) {
      description._out = description._out + this._description;
      return description;
    }
  },
  StringDescription: {
    "": "Object;_out",
    get$length: function(_) {
      return this._out.length;
    },
    toString$0: function(_) {
      return this._out;
    },
    add$1: function(_, text) {
      this._out = this._out + H.S(text);
      return this;
    },
    addDescriptionOf$1: function(value) {
      var t1 = J.getInterceptor(value);
      if (typeof value === "object" && value !== null && !!t1.$isMatcher)
        value.describe$1(this);
      else {
        t1 = A.prettyPrint(value, 25, 80);
        this._out = this._out + t1;
      }
      return this;
    }
  },
  TestFailure: {
    "": "Error;message>",
    toString$0: function(_) {
      return this.message;
    },
    $isTestFailure: true,
    static: {TestFailure$: function(message) {
        return new O.TestFailure(message);
      }}
  },
  closure: {
    "": "Closure;",
    call$2: function(f, id) {
      return f;
    },
    call$1: function(f) {
      return this.call$2(f, null);
    },
    $isFunction: true,
    $is_args2: true,
    $is_args1: true
  },
  DefaultFailureHandler: {
    "": "Object;",
    fail$1: function(reason) {
      throw H.wrapException(O.TestFailure$(reason));
    }
  },
  Description: {
    "": "Object;"
  },
  Matcher: {
    "": "Object;",
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      return mismatchDescription;
    },
    $isMatcher: true
  },
  _EveryElement: {
    "": "_IterableMatcher;_matcher",
    matches$2: function(_, item, matchState) {
      var t1, i, element, t2, innerState;
      t1 = J.getInterceptor$ax(item);
      if (typeof item !== "object" || item === null || item.constructor !== Array && !t1.$isIterable)
        return false;
      for (t1 = t1.get$iterator(item), i = 0; t1.moveNext$0() === true;) {
        element = t1.get$current();
        t2 = this._matcher;
        if (t2.matches$2(t2, element, matchState) !== true) {
          t1 = H.fillLiteralMap(["index", i, "element", element], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
          innerState = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
          innerState.addAll$1(innerState, matchState);
          matchState.clear$0(matchState);
          matchState.$indexSet(matchState, "state", innerState);
          matchState.addAll$1(matchState, t1);
          return false;
        }
        ++i;
      }
      return true;
    },
    describe$1: function(description) {
      var t1;
      description._out = description._out + "every element(";
      t1 = description.addDescriptionOf$1(this._matcher);
      t1._out = t1._out + ")";
      return t1;
    },
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      var t1, index, element, t2, subDescription;
      t1 = J.getInterceptor$asx(matchState);
      if (t1.$index(matchState, "index") != null) {
        index = t1.$index(matchState, "index");
        element = t1.$index(matchState, "element");
        mismatchDescription._out = mismatchDescription._out + "has value ";
        t2 = mismatchDescription.addDescriptionOf$1(element);
        t2._out = t2._out + " which ";
        subDescription = new O.StringDescription(null);
        subDescription._out = "";
        this._matcher.describeMismatch$4(element, subDescription, t1.$index(matchState, "state"), verbose);
        t1 = subDescription._out;
        t2 = mismatchDescription._out;
        if (t1.length > 0)
          mismatchDescription._out = t2 + H.S(subDescription);
        else {
          mismatchDescription._out = t2 + "doesn't match ";
          this._matcher.describe$1(mismatchDescription);
        }
        t1 = " at index " + H.S(index);
        mismatchDescription._out = mismatchDescription._out + t1;
        return mismatchDescription;
      }
      return O._IterableMatcher.prototype.describeMismatch$4.call(this, item, mismatchDescription, matchState, verbose);
    }
  },
  _OrderedEquals: {
    "": "Matcher;_expected,_matcher",
    matches$2: function(_, item, matchState) {
      var t1 = J.getInterceptor(item);
      if (typeof item === "object" && item !== null && (item.constructor === Array || !!t1.$isIterable)) {
        t1 = this._matcher;
        t1 = t1.matches$2(t1, item, matchState);
      } else
        t1 = false;
      return t1;
    },
    describe$1: function(description) {
      var t1;
      description._out = description._out + "equals ";
      t1 = description.addDescriptionOf$1(this._expected);
      t1._out = t1._out + " ordered";
      return t1;
    },
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      var t1 = J.getInterceptor(item);
      if (typeof item !== "object" || item === null || item.constructor !== Array && !t1.$isIterable) {
        mismatchDescription._out = mismatchDescription._out + "is not an Iterable";
        return mismatchDescription;
      } else
        return this._matcher.describeMismatch$4(item, mismatchDescription, matchState, verbose);
    }
  },
  _UnorderedEquals: {
    "": "Matcher;_expected",
    _test$1: function(item) {
      var t1, t2, t3, expectedLength, actualLength, matched, i, expectedPosition, expectedElement, t4, actualPosition, gotMatch, actualElement, reason;
      t1 = J.getInterceptor$asx(item);
      if (typeof item !== "object" || item === null || item.constructor !== Array && !t1.$isIterable)
        return "not iterable";
      t2 = this._expected;
      t3 = J.getInterceptor$asx(t2);
      expectedLength = t3.get$length(t2);
      actualLength = t1.get$length(item);
      if (expectedLength > actualLength)
        return "has too few elements (" + actualLength + " < " + expectedLength + ")";
      else if (expectedLength < actualLength)
        return "has too many elements (" + actualLength + " > " + expectedLength + ")";
      matched = Array(actualLength);
      H.setRuntimeTypeInfo(matched, [J.JSBool]);
      for (i = 0; i < actualLength; ++i)
        matched[i] = false;
      for (t2 = t3.get$iterator(t2), expectedPosition = 0; t2.moveNext$0() === true;) {
        expectedElement = t2.get$current();
        for (t3 = t1.get$iterator(item), t4 = J.getInterceptor(expectedElement), actualPosition = 0; gotMatch = false, t3.moveNext$0() === true;) {
          actualElement = t3.get$current();
          if (actualPosition >= actualLength)
            return H.ioore(matched, actualPosition);
          if (matched[actualPosition] !== true)
            if (t4.$eq(expectedElement, actualElement)) {
              matched[actualPosition] = true;
              gotMatch = true;
              break;
            }
          ++actualPosition;
        }
        if (!gotMatch) {
          reason = new O.StringDescription(null);
          reason._out = "";
          reason._out = "has no match for element ";
          if (typeof expectedElement === "object" && expectedElement !== null && !!t4.$isMatcher)
            expectedElement.describe$1(reason);
          else
            reason._out = "has no match for element " + A.prettyPrint(expectedElement, 25, 80);
          t1 = " at index " + expectedPosition;
          t1 = reason._out + t1;
          reason._out = t1;
          return t1;
        }
        ++expectedPosition;
      }
      return;
    },
    matches$2: function(_, item, mismatchState) {
      return this._test$1(item) == null;
    },
    describe$1: function(description) {
      var t1;
      description._out = description._out + "equals ";
      t1 = description.addDescriptionOf$1(this._expected);
      t1._out = t1._out + " unordered";
      return t1;
    },
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      var t1 = this._test$1(item);
      mismatchDescription._out = mismatchDescription._out + t1;
      return mismatchDescription;
    }
  },
  _IterableMatcher: {
    "": "Matcher;",
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      var t1 = J.getInterceptor(item);
      if (typeof item !== "object" || item === null || item.constructor !== Array && !t1.$isIterable) {
        t1 = mismatchDescription.addDescriptionOf$1(item);
        t1._out = t1._out + " not an Iterable";
        return t1;
      } else
        return O.Matcher.prototype.describeMismatch$4.call(this, item, mismatchDescription, matchState, verbose);
    }
  },
  _OrderingComparison: {
    "": "Matcher;_matcher$_value,_equalValue,_lessThanValue,_greaterThanValue,_comparisonDescription,_valueInDescription",
    matches$2: function(_, item, matchState) {
      var t1, t2;
      t1 = this._matcher$_value;
      t2 = J.getInterceptor(item);
      if (t2.$eq(item, t1))
        return this._equalValue;
      else if (t2.$lt(item, t1))
        return this._lessThanValue;
      else
        return this._greaterThanValue;
    },
    describe$1: function(description) {
      var t1, t2;
      t1 = description._out;
      t2 = this._comparisonDescription;
      if (this._valueInDescription) {
        t1 += t2;
        description._out = t1;
        description._out = t1 + " ";
        return description.addDescriptionOf$1(this._matcher$_value);
      } else {
        description._out = t1 + t2;
        return description;
      }
    },
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      mismatchDescription._out = mismatchDescription._out + "is not ";
      return this.describe$1(mismatchDescription);
    }
  },
  _IsCloseTo: {
    "": "Matcher;_matcher$_value,_delta",
    matches$2: function(_, item, matchState) {
      var t1, diff;
      if (typeof item !== "number")
        return false;
      t1 = this._matcher$_value;
      if (typeof t1 !== "number")
        return H.iae(t1);
      diff = item - t1;
      if (diff < 0)
        diff = -diff;
      return diff <= this._delta;
    },
    describe$1: function(description) {
      var t1;
      description._out = description._out + "a numeric value within ";
      t1 = description.addDescriptionOf$1(this._delta);
      t1._out = t1._out + " of ";
      return t1.addDescriptionOf$1(this._matcher$_value);
    },
    describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
      var t1, diff;
      if (typeof item !== "number") {
        mismatchDescription._out = mismatchDescription._out + " not numeric";
        return mismatchDescription;
      } else {
        t1 = this._matcher$_value;
        if (typeof t1 !== "number")
          return H.iae(t1);
        diff = item - t1;
        if (diff < 0)
          diff = -diff;
        mismatchDescription._out = mismatchDescription._out + " differs by ";
        return mismatchDescription.addDescriptionOf$1(diff);
      }
    }
  },
  _IsNot: {
    "": "Matcher;_matcher",
    matches$2: function(_, item, matchState) {
      var t1 = this._matcher;
      return t1.matches$2(t1, item, matchState) !== true;
    },
    describe$1: function(description) {
      description._out = description._out + "not ";
      return description.addDescriptionOf$1(this._matcher);
    }
  }
}],
["path", "package:path/path.dart", , B, {
  current: function() {
    var t1, t2, t3, t4;
    t1 = $.get$currentJsMirrorSystem();
    t2 = t1.get$libraries();
    t3 = $.get$Uri__splitRe();
    t4 = P.Uri$_fromMatch(t3.firstMatch$1("dart:io"));
    t2 = t2.__js_mirrors$_source;
    if (t2.$index(t2, t4) != null) {
      t1 = t1.get$libraries();
      t3 = P.Uri$_fromMatch(t3.firstMatch$1("dart:io"));
      t1 = t1.__js_mirrors$_source;
      t3 = t1.$index(t1, t3).get$declarations().__js_mirrors$_source;
      return J.get$path$x(H.interceptedTypeCast(t3.$index(t3, C.Symbol_Directory), "$isClassMirror").getField$1(C.Symbol_current).reflectee);
    } else {
      t2 = t1.get$libraries();
      t4 = P.Uri$_fromMatch(t3.firstMatch$1("dart:html"));
      t2 = t2.__js_mirrors$_source;
      if (t2.$index(t2, t4) != null) {
        t1 = t1.get$libraries();
        t3 = P.Uri$_fromMatch(t3.firstMatch$1("dart:html"));
        t1 = t1.__js_mirrors$_source;
        return J.get$href$x(J.get$location$x(t1.$index(t1, t3).getField$1(C.Symbol_window).reflectee));
      } else
        return ".";
    }
  },
  "+current": 0,
  _validateArgList: function(method, args) {
    var i, numArgs, numArgs0, message, t1, t2;
    for (i = 1; i < 8; ++i) {
      if (args[i] == null || args[i - 1] != null)
        continue;
      for (numArgs = 8; numArgs >= 1; numArgs = numArgs0) {
        numArgs0 = numArgs - 1;
        if (args[numArgs0] != null)
          break;
      }
      message = new P.StringBuffer("");
      message._contents = "";
      t1 = method + "(";
      t1 = "" + t1;
      message._contents = t1;
      t2 = new H.SubListIterable(args, 0, numArgs);
      t2.$builtinTypeInfo = [null];
      if (numArgs < 0)
        H.throwExpression(P.RangeError$value(numArgs));
      if (0 > numArgs)
        H.throwExpression(P.RangeError$range(0, 0, numArgs));
      t2 = new H.MappedListIterable(t2, new B._validateArgList_closure());
      t2.$builtinTypeInfo = [null, null];
      t2 = t2.join$1(t2, ", ");
      t1 += t2;
      message._contents = t1;
      t2 = "): part " + (i - 1) + " was null, but part " + i + " was not.";
      t1 += t2;
      message._contents = t1;
      throw H.wrapException(new P.ArgumentError(t1));
    }
  },
  Style__getPlatformStyle: function() {
    var t1, t2, t3, t4;
    t1 = $.get$currentJsMirrorSystem();
    t2 = t1.get$libraries();
    t3 = $.get$Uri__splitRe();
    t4 = P.Uri$_fromMatch(t3.firstMatch$1("dart:io"));
    t2 = t2.__js_mirrors$_source;
    if (t2.$index(t2, t4) == null)
      return $.get$Style_url();
    t1 = t1.get$libraries();
    t3 = P.Uri$_fromMatch(t3.firstMatch$1("dart:io"));
    t1 = t1.__js_mirrors$_source;
    t3 = t1.$index(t1, t3).get$declarations().__js_mirrors$_source;
    if (J.$eq(H.interceptedTypeCast(t3.$index(t3, C.Symbol_Platform), "$isClassMirror").getField$1(C.Symbol_operatingSystem).reflectee, "windows"))
      return $.get$Style_windows();
    return $.get$Style_posix();
  },
  _validateArgList_closure: {
    "": "Closure;",
    call$1: function(arg) {
      return arg == null ? "null" : "\"" + H.S(arg) + "\"";
    },
    $isFunction: true,
    $is_args1: true
  },
  Builder: {
    "": "Object;style,root",
    join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var parts, t1;
      parts = [part1, part2, part3, part4, part5, part6, part7, part8];
      B._validateArgList("join", parts);
      t1 = new H.WhereIterable(parts, new B.Builder_join_closure());
      H.setRuntimeTypeInfo(t1, [null]);
      return this.joinAll$1(t1);
    },
    join$2: function($receiver, part1, part2) {
      return this.join$8($receiver, part1, part2, null, null, null, null, null, null);
    },
    joinAll$1: function(parts) {
      var buffer, t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, part, root, oldRoot, str, t4;
      buffer = P.StringBuffer$("");
      for (t1 = new B.Builder_joinAll_closure(), t2 = new H.WhereIterable(parts, t1), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(parts, "IterableBase", 0)]), t3 = parts.get$iterator(parts), t1 = new H.WhereIterator(t3, t1), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(t2, 0)]), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false; t1.moveNext$0();) {
        part = t3.get$current();
        if (this._parse$1(part).isRootRelative && isAbsoluteAndNotRootRelative) {
          root = this._parse$1(buffer._contents).root;
          oldRoot = root == null ? "" : root;
          buffer._contents = "";
          str = typeof oldRoot === "string" ? oldRoot : H.S(oldRoot);
          buffer._contents = buffer._contents + str;
          str = typeof part === "string" ? part : H.S(part);
          buffer._contents = buffer._contents + str;
        } else if (this._parse$1(part).root != null) {
          isAbsoluteAndNotRootRelative = !this._parse$1(part).isRootRelative;
          buffer._contents = "";
          str = typeof part === "string" ? part : H.S(part);
          buffer._contents = buffer._contents + str;
        } else {
          t4 = J.getInterceptor$asx(part);
          if (J.$gt$n(t4.get$length(part), 0) && J.contains$1$asx(t4.$index(part, 0), t2.get$separatorPattern()) === true)
            ;
          else if (needsSeparator === true) {
            t4 = t2.get$separator();
            buffer._contents = buffer._contents + t4;
          }
          str = typeof part === "string" ? part : H.S(part);
          buffer._contents = buffer._contents + str;
        }
        needsSeparator = J.contains$1$asx(part, t2.get$needsSeparatorPattern());
      }
      return buffer._contents;
    },
    split$1: function(_, path) {
      var parsed, t1, t2;
      parsed = this._parse$1(path);
      t1 = new H.WhereIterable(parsed.parts, new B.Builder_split_closure());
      H.setRuntimeTypeInfo(t1, [null]);
      t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      parsed.parts = t1;
      t2 = parsed.root;
      if (t2 != null)
        C.JSArray_methods.insert$2(t1, 0, t2);
      return parsed.parts;
    },
    relative$2$from: function(path, from) {
      var parsed, fromParsed, pathParsed, t1, t2;
      from = this.root;
      if (this._parse$1(from).root == null && this._parse$1(path).root != null) {
        parsed = this._parse$1(path);
        parsed.normalize$0();
        return parsed.toString$0(parsed);
      }
      if (this._parse$1(path).root == null || this._parse$1(path).isRootRelative)
        path = this.join$8(this, this.root, path, null, null, null, null, null, null);
      if (this._parse$1(path).root == null && this._parse$1(from).root != null)
        throw H.wrapException(new P.ArgumentError("Unable to find a path to \"" + path + "\" from \"" + H.S(from) + "\"."));
      fromParsed = this._parse$1(from);
      fromParsed.normalize$0();
      pathParsed = this._parse$1(path);
      pathParsed.normalize$0();
      t1 = fromParsed.parts;
      if (t1.length > 0 && J.$eq(t1[0], "."))
        return pathParsed.toString$0(pathParsed);
      if (!J.$eq(fromParsed.root, pathParsed.root)) {
        t1 = fromParsed.root;
        if (!(t1 == null || pathParsed.root == null)) {
          t1 = J.toLowerCase$0$s(t1);
          t1 = H.stringReplaceAllUnchecked(t1, "/", "\\");
          t2 = J.toLowerCase$0$s(pathParsed.root);
          t1 = t1 !== H.stringReplaceAllUnchecked(t2, "/", "\\");
        } else
          t1 = true;
      } else
        t1 = false;
      if (t1)
        return pathParsed.toString$0(pathParsed);
      while (true) {
        t1 = fromParsed.parts;
        if (t1.length > 0) {
          t2 = pathParsed.parts;
          t1 = t2.length > 0 && J.$eq(t1[0], t2[0]);
        } else
          t1 = false;
        if (!t1)
          break;
        C.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        C.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        C.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        C.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t1 = fromParsed.parts;
      if (t1.length > 0 && J.$eq(t1[0], ".."))
        throw H.wrapException(new P.ArgumentError("Unable to find a path to \"" + path + "\" from \"" + H.S(from) + "\"."));
      t1 = pathParsed.parts;
      t2 = P.List_List$filled(fromParsed.parts.length, "..", null);
      if (!!t1.fixed$length)
        H.throwExpression(P.UnsupportedError$("insertAll"));
      H.IterableMixinWorkaround_insertAllList(t1, 0, t2);
      t1 = pathParsed.separators;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = "";
      t2 = P.List_List$filled(fromParsed.parts.length, this.style.get$separator(), null);
      if (!!t1.fixed$length)
        H.throwExpression(P.UnsupportedError$("insertAll"));
      H.IterableMixinWorkaround_insertAllList(t1, 1, t2);
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq(C.JSArray_methods.get$last(t1), ".")) {
        C.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        C.JSArray_methods.removeLast$0(t1);
        C.JSArray_methods.removeLast$0(t1);
        C.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(pathParsed);
    },
    toUri$1: function(path) {
      var t1 = this.style;
      if (this._parse$1(path).root == null)
        return t1.relativePathToUri$1(path);
      else
        return t1.absolutePathToUri$1(this.join$2(this, this.root, path));
    },
    _parse$1: function(path) {
      var t1, root, t2, parts, separators, t3, firstSeparator, t4, start, t5, t6;
      t1 = this.style;
      root = t1.getRoot$1(path);
      t2 = t1.getRelativeRoot$1(path);
      if (root != null)
        path = J.substring$1$s(path, J.get$length$asx(root));
      parts = [];
      separators = [];
      t3 = t1.get$separatorPattern();
      firstSeparator = t3.matchAsPrefix$1(t3, path);
      if (firstSeparator != null) {
        t4 = firstSeparator.__js_helper$_match;
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        separators.push(t4[0]);
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        path = J.substring$1$s(path, J.get$length$asx(t4[0]));
      } else
        separators.push("");
      if (typeof path !== "string")
        H.throwExpression(new P.ArgumentError(path));
      t3 = new H._AllMatchesIterator(t3, path, null);
      t4 = J.getInterceptor$asx(path);
      start = 0;
      for (; t3.moveNext$0();) {
        t5 = t3.__js_helper$_current.__js_helper$_match;
        parts.push(t4.substring$2(path, start, t5.index));
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        separators.push(t5[0]);
        t6 = t5.index;
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = J.get$length$asx(t5[0]);
        if (typeof t5 !== "number")
          return H.iae(t5);
        start = t6 + t5;
      }
      t3 = t4.get$length(path);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (start < t3) {
        parts.push(t4.substring$1(path, start));
        separators.push("");
      }
      return new B._ParsedPath(t1, root, t2 != null, parts, separators);
    },
    static: {Builder_Builder: function(root, style) {
        root = style == null ? B.current() : ".";
        if (style == null)
          style = $.get$Style_platform();
        return new B.Builder(style, root);
      }}
  },
  Builder_join_closure: {
    "": "Closure;",
    call$1: function(part) {
      return part != null;
    },
    $isFunction: true,
    $is_args1: true
  },
  Builder_joinAll_closure: {
    "": "Closure;",
    call$1: function(part) {
      return !J.$eq(part, "");
    },
    $isFunction: true,
    $is_args1: true
  },
  Builder_split_closure: {
    "": "Closure;",
    call$1: function(part) {
      return J.get$isEmpty$asx(part) !== true;
    },
    $isFunction: true,
    $is_args1: true
  },
  Style: {
    "": "Object;relativeRootPattern<",
    getRoot$1: function(path) {
      var t1, matches;
      t1 = this.get$rootPattern();
      if (typeof path !== "string")
        H.throwExpression(new P.ArgumentError(path));
      matches = new H._AllMatchesIterable(t1, path);
      if (!matches.get$isEmpty(matches))
        return J.$index$asx(matches.get$first(matches), 0);
      return this.getRelativeRoot$1(path);
    },
    getRelativeRoot$1: function(path) {
      var t1, matches;
      t1 = this.get$relativeRootPattern();
      if (t1 == null)
        return;
      t1.toString;
      if (typeof path !== "string")
        H.throwExpression(new P.ArgumentError(path));
      matches = new H._AllMatchesIterable(t1, path);
      if (!matches.get$iterator(matches).moveNext$0())
        return;
      return J.$index$asx(matches.get$first(matches), 0);
    },
    relativePathToUri$1: function(path) {
      var t1 = B.Builder_Builder(null, this);
      return P.Uri$("", "", null, t1.split$1(t1, path), 0, null, null, null, "");
    },
    toString$0: function(_) {
      return this.get$name(this);
    }
  },
  _PosixStyle: {
    "": "Style;name>,separator<,separatorPattern<,needsSeparatorPattern<,rootPattern<,relativeRootPattern",
    pathFromUri$1: function(uri) {
      var t1, t2;
      t1 = uri.scheme;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, "") || t2.$eq(t1, "file"))
        return P.Uri__uriDecode(uri._path, C.Utf8Codec_false, false);
      throw H.wrapException(new P.ArgumentError("Uri " + H.S(uri) + " must have scheme 'file:'."));
    },
    absolutePathToUri$1: function(path) {
      var parsed, t1;
      parsed = B.Builder_Builder(null, this)._parse$1(path);
      t1 = parsed.parts;
      if (t1.length === 0)
        C.JSArray_methods.addAll$1(t1, ["", ""]);
      else if (parsed.get$hasTrailingSeparator())
        C.JSArray_methods.add$1(parsed.parts, "");
      return P.Uri$("", "", null, parsed.parts, 0, null, null, "file", "");
    }
  },
  _WindowsStyle: {
    "": "Style;name>,separator<,separatorPattern<,needsSeparatorPattern<,rootPattern<,relativeRootPattern",
    pathFromUri$1: function(uri) {
      var t1, t2, path;
      t1 = uri.scheme;
      t2 = J.getInterceptor(t1);
      if (!t2.$eq(t1, "") && !t2.$eq(t1, "file"))
        throw H.wrapException(new P.ArgumentError("Uri " + H.S(uri) + " must have scheme 'file:'."));
      path = uri._path;
      if (J.$eq(uri.get$host(uri), "")) {
        t1 = J.getInterceptor$s(path);
        if (t1.startsWith$1(path, "/"))
          path = t1.replaceFirst$2(path, "/", "");
      } else
        path = "\\\\" + H.S(uri.get$host(uri)) + H.S(path);
      return P.Uri__uriDecode(J.replaceAll$2$s(path, "/", "\\"), C.Utf8Codec_false, false);
    },
    absolutePathToUri$1: function(path) {
      var parsed, host, t1;
      parsed = B.Builder_Builder(null, this)._parse$1(path);
      if (J.$eq(parsed.root, "\\\\")) {
        host = C.JSArray_methods.removeAt$1(parsed.parts, 0);
        t1 = parsed.parts;
        if (t1.length === 0)
          C.JSArray_methods.addAll$1(t1, ["", ""]);
        else if (parsed.get$hasTrailingSeparator())
          C.JSArray_methods.add$1(parsed.parts, "");
        return P.Uri$("", host, null, parsed.parts, 0, null, null, "file", "");
      } else {
        if (parsed.parts.length === 0 || parsed.get$hasTrailingSeparator())
          C.JSArray_methods.add$1(parsed.parts, "");
        C.JSArray_methods.insert$2(parsed.parts, 0, J.replaceAll$2$s(parsed.root, this.separatorPattern, ""));
        return P.Uri$("", "", null, parsed.parts, 0, null, null, "file", "");
      }
    }
  },
  _UrlStyle: {
    "": "Style;name>,separator<,separatorPattern<,needsSeparatorPattern<,rootPattern<,relativeRootPattern:path$_UrlStyle$relativeRootPattern<,relativeRootPattern",
    pathFromUri$1: function(uri) {
      return uri.toString$0(uri);
    },
    relativePathToUri$1: function(path) {
      return P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(path));
    },
    absolutePathToUri$1: function(path) {
      return P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(path));
    }
  },
  _ParsedPath: {
    "": "Object;style,root,isRootRelative,parts,separators",
    get$hasTrailingSeparator: function() {
      var t1 = this.parts;
      if (t1.length !== 0)
        t1 = J.$eq(C.JSArray_methods.get$last(t1), "") || !J.$eq(C.JSArray_methods.get$last(this.separators), "");
      else
        t1 = false;
      return t1;
    },
    removeTrailingSeparators$0: function() {
      var t1, t2;
      while (true) {
        t1 = this.parts;
        if (!(t1.length !== 0 && J.$eq(C.JSArray_methods.get$last(t1), "")))
          break;
        C.JSArray_methods.removeLast$0(this.parts);
        C.JSArray_methods.removeLast$0(this.separators);
      }
      t1 = this.separators;
      t2 = t1.length;
      if (t2 > 0)
        t1[t2 - 1] = "";
    },
    normalize$0: function() {
      var newParts, t1, t2, leadingDoubles, part, newSeparators, t3;
      newParts = [];
      for (t1 = this.parts, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]), leadingDoubles = 0; t2.moveNext$0();) {
        part = t2._dev$_current;
        t1 = J.getInterceptor(part);
        if (t1.$eq(part, ".") || t1.$eq(part, ""))
          ;
        else if (t1.$eq(part, ".."))
          if (newParts.length > 0)
            newParts.pop();
          else
            ++leadingDoubles;
        else
          newParts.push(part);
      }
      if (this.root == null) {
        t1 = P.List_List$filled(leadingDoubles, "..", null);
        H.IterableMixinWorkaround_insertAllList(newParts, 0, t1);
      }
      if (newParts.length === 0 && this.root == null)
        newParts.push(".");
      newSeparators = P.List_List$generate(newParts.length, new B._ParsedPath_normalize_closure(this), true, null);
      t1 = this.root;
      C.JSArray_methods.insert$2(newSeparators, 0, t1 != null && newParts.length > 0 && J.contains$1$asx(t1, this.style.get$needsSeparatorPattern()) === true ? this.style.get$separator() : "");
      this.parts = newParts;
      this.separators = newSeparators;
      t1 = this.root;
      if (t1 != null) {
        t2 = this.style;
        t3 = $.get$Style_windows();
        t3 = t2 == null ? t3 == null : t2 === t3;
        t2 = t3;
      } else
        t2 = false;
      if (t2)
        this.root = J.replaceAll$2$s(t1, "/", "\\");
      this.removeTrailingSeparators$0();
    },
    toString$0: function(_) {
      var builder, t1, i, t2, str;
      builder = P.StringBuffer$("");
      t1 = this.root;
      if (t1 != null)
        builder.write$1(t1);
      for (i = 0; t1 = this.parts.length, t2 = this.separators, i < t1; ++i) {
        if (i >= t2.length)
          return H.ioore(t2, i);
        str = t2[i];
        str = typeof str === "string" ? str : H.S(str);
        builder._contents = builder._contents + str;
        t1 = this.parts;
        if (i >= t1.length)
          return H.ioore(t1, i);
        str = t1[i];
        str = typeof str === "string" ? str : H.S(str);
        builder._contents = builder._contents + str;
      }
      builder.write$1(C.JSArray_methods.get$last(t2));
      return builder._contents;
    }
  },
  _ParsedPath_normalize_closure: {
    "": "Closure;this_0",
    call$1: function(_) {
      return this.this_0.style.get$separator();
    },
    $isFunction: true,
    $is_args1: true
  }
}],
["pretty_print", "package:unittest/src/pretty_print.dart", , A, {
  prettyPrint: function(object, maxItems, maxLineLength) {
    return new A.prettyPrint__prettyPrint(maxLineLength, maxItems).call$4(object, 0, P.LinkedHashSet_LinkedHashSet(null, null, null, null), true);
  },
  prettyPrint__prettyPrint: {
    "": "Closure;maxLineLength_1,maxItems_2",
    call$4: function(object, indent, seen, $top) {
      var t1, t2, t3, type, strings, singleLine, value, defaultToString;
      t1 = {};
      t1.seen_0 = seen;
      if (J.contains$1$asx(seen, object) === true)
        return "(recursive)";
      t2 = t1.seen_0;
      t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      t3.addAll$1(t3, [object]);
      t1.seen_0 = t2.union$1(t3);
      t1 = new A.prettyPrint__prettyPrint_pp(t1, this, indent);
      t2 = J.getInterceptor(object);
      if (typeof object === "object" && object !== null && (object.constructor === Array || !!t2.$isIterable)) {
        type = typeof object === "object" && object !== null && (object.constructor === Array || !!t2.$isList) ? "" : J.$add$ns(N.typeName(object), ":");
        t1 = t2.map$1(object, t1);
        strings = t1.toList$0(t1);
        if (strings.length > this.maxItems_2) {
          t1 = strings.length;
          if (!!strings.fixed$length)
            H.throwExpression(P.UnsupportedError$("removeRange"));
          H.IterableMixinWorkaround_replaceRangeList(strings, this.maxItems_2 - 1, t1, ["..."]);
        }
        singleLine = H.S(type) + "[" + C.JSArray_methods.join$1(strings, ", ") + "]";
        if (typeof indent !== "number")
          return H.iae(indent);
        t1 = singleLine.length + indent <= this.maxLineLength_1;
        if (t1 && !C.JSString_methods.contains$1(singleLine, "\n"))
          return singleLine;
        t1 = H.S(type) + "[\n";
        t2 = new H.MappedListIterable(strings, new A.prettyPrint__prettyPrint_closure(indent));
        H.setRuntimeTypeInfo(t2, [null, null]);
        return t1 + t2.join$1(t2, ",\n") + "\n" + C.JSArray_methods.join$1(P.List_List$filled(indent, " ", null), "") + "]";
      } else if (typeof object === "object" && object !== null && !!t2.$isMap) {
        t1 = J.map$1$ax(object.get$keys(), new A.prettyPrint__prettyPrint_closure0(object, t1));
        strings = t1.toList$0(t1);
        if (strings.length > this.maxItems_2) {
          t1 = strings.length;
          if (!!strings.fixed$length)
            H.throwExpression(P.UnsupportedError$("removeRange"));
          H.IterableMixinWorkaround_replaceRangeList(strings, this.maxItems_2 - 1, t1, ["..."]);
        }
        singleLine = "{" + C.JSArray_methods.join$1(strings, ", ") + "}";
        if (typeof indent !== "number")
          return H.iae(indent);
        t1 = singleLine.length + indent <= this.maxLineLength_1;
        if (t1 && !C.JSString_methods.contains$1(singleLine, "\n"))
          return singleLine;
        t1 = new H.MappedListIterable(strings, new A.prettyPrint__prettyPrint_closure1(indent));
        H.setRuntimeTypeInfo(t1, [null, null]);
        return "{\n" + t1.join$1(t1, ",\n") + "\n" + C.JSArray_methods.join$1(P.List_List$filled(indent, " ", null), "") + "}";
      } else if (typeof object === "string") {
        t1 = new H.MappedListIterable(object.split("\n"), N.escapeString$closure);
        H.setRuntimeTypeInfo(t1, [null, null]);
        return "'" + t1.join$1(t1, "\\n'\n" + C.JSArray_methods.join$1(P.List_List$filled(J.$add$ns(indent, 2), " ", null), "") + "'") + "'";
      } else {
        value = J.replaceAll$2$s(t2.toString$0(object), "\n", C.JSArray_methods.join$1(P.List_List$filled(indent, " ", null), "") + "\n");
        defaultToString = C.JSString_methods.startsWith$1(value, "Instance of ");
        if ($top === true)
          value = "<" + value + ">";
        if (typeof object === "number" || typeof object === "boolean" || typeof object === "object" && object !== null && !!t2.$isFunction || object == null || defaultToString)
          return value;
        else
          return H.S(N.typeName(object)) + ":" + value;
      }
    },
    $isFunction: true
  },
  prettyPrint__prettyPrint_pp: {
    "": "Closure;box_0,_prettyPrint_3,indent_4",
    call$1: function(child) {
      return this._prettyPrint_3.call$4(child, J.$add$ns(this.indent_4, 2), this.box_0.seen_0, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  prettyPrint__prettyPrint_closure: {
    "": "Closure;indent_5",
    call$1: function(string) {
      return C.JSString_methods.$add(C.JSArray_methods.join$1(P.List_List$filled(J.$add$ns(this.indent_5, 2), " ", null), ""), string);
    },
    $isFunction: true,
    $is_args1: true
  },
  prettyPrint__prettyPrint_closure0: {
    "": "Closure;object_6,pp_7",
    call$1: function(key) {
      var t1, t2;
      t1 = this.pp_7;
      t2 = this.object_6;
      return H.S(t1.call$1(key)) + ": " + H.S(t1.call$1(t2.$index(t2, key)));
    },
    $isFunction: true,
    $is_args1: true
  },
  prettyPrint__prettyPrint_closure1: {
    "": "Closure;indent_8",
    call$1: function(string) {
      return C.JSString_methods.$add(C.JSArray_methods.join$1(P.List_List$filled(J.$add$ns(this.indent_8, 2), " ", null), ""), string);
    },
    $isFunction: true,
    $is_args1: true
  }
}],
["stack_trace.src.utils", "package:stack_trace/src/utils.dart", , N, {
  padRight: function(string, $length) {
    var t1, result, t2, i, t3;
    t1 = J.getInterceptor$asx(string);
    if (J.$ge$n(t1.get$length(string), $length))
      return string;
    result = P.StringBuffer$("");
    result.write$1(string);
    t2 = J.getInterceptor$n($length);
    i = 0;
    while (true) {
      t3 = t2.$sub($length, t1.get$length(string));
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(i < t3))
        break;
      result._contents = result._contents + " ";
      ++i;
    }
    return result._contents;
  }
}],
["test.bot.delayed_result", "bot/test_get_delayed_result.dart", , Z, {
  main1: function() {
    Z._drTest("null", null, null, false);
    Z._drTest("obj", 1, 1, false);
    Z._drTest("func to obj", new Z.main_closure1(), 2, false);
    Z._drTest("func to func to obj", new Z.main_closure2(), 3, false);
    Z._drTest("future to obj", P._Future$immediate(4, null), 4, false);
    Z._drTest("func to future to obj", new Z.main_closure3(), 5, false);
    H.IterableMixinWorkaround_forEach([false, true], new Z.main_closure4());
  },
  _testSilly: function(values, doThrow) {
    var finalVal, t1, msg;
    finalVal = $._drValue;
    $._drValue = finalVal + 1;
    t1 = new H.MappedListIterable(values, new Z._testSilly_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    msg = t1.join$1(t1, " to ");
    if (msg.length !== 0)
      msg += " to ";
    Z._drTest(msg + (doThrow === true ? "throw sorry" : "obj"), Z._returnSilly(values, finalVal, doThrow), finalVal, doThrow);
  },
  _returnSilly: function(values, finalVal, doThrow) {
    if (values.length === 0) {
      if (doThrow === true)
        return new Z._returnSilly_closure(finalVal);
      return finalVal;
    }
    if (C.JSArray_methods.removeAt$1(values, 0))
      return P._Future$immediate(Z._returnSilly(values, finalVal, doThrow), null);
    else
      return new Z._returnSilly_closure0(values, finalVal, doThrow);
  },
  _drTest: function(description, input, expectedOutput, expectThrow) {
    N.test(description, new Z._drTest_closure(input, expectedOutput, expectThrow));
  },
  main_closure1: {
    "": "Closure;",
    call$0: function() {
      return 2;
    },
    $isFunction: true,
    $is_void_: true
  },
  main_closure2: {
    "": "Closure;",
    call$0: function() {
      return new Z.main__closure10();
    },
    $isFunction: true,
    $is_void_: true
  },
  main__closure10: {
    "": "Closure;",
    call$0: function() {
      return 3;
    },
    $isFunction: true,
    $is_void_: true
  },
  main_closure3: {
    "": "Closure;",
    call$0: function() {
      return P._Future$immediate(5, null);
    },
    $isFunction: true,
    $is_void_: true
  },
  main_closure4: {
    "": "Closure;",
    call$1: function(v) {
      Z._testSilly([], v);
      Z._testSilly([true], v);
      Z._testSilly([false], v);
      Z._testSilly([true, true], v);
      Z._testSilly([true, false], v);
      Z._testSilly([false, true], v);
      Z._testSilly([false, false], v);
      Z._testSilly([true, true, true], v);
      Z._testSilly([true, true, false], v);
      Z._testSilly([true, false, true], v);
      Z._testSilly([true, false, false], v);
      Z._testSilly([false, true, true], v);
      Z._testSilly([false, true, false], v);
      Z._testSilly([false, false, true], v);
      Z._testSilly([false, false, false], v);
    },
    $isFunction: true,
    $is_args1: true
  },
  _testSilly_closure: {
    "": "Closure;",
    call$1: function(v) {
      return v === true ? "future" : "func";
    },
    $isFunction: true,
    $is_args1: true
  },
  _returnSilly_closure: {
    "": "Closure;finalVal_0",
    call$0: function() {
      throw H.wrapException("sorry, I don't like " + this.finalVal_0);
    },
    $isFunction: true,
    $is_void_: true
  },
  _returnSilly_closure0: {
    "": "Closure;values_1,finalVal_2,doThrow_3",
    call$0: function() {
      return Z._returnSilly(this.values_1, this.finalVal_2, this.doThrow_3);
    },
    $isFunction: true,
    $is_void_: true
  },
  _drTest_closure: {
    "": "Closure;input_0,expectedOutput_1,expectThrow_2",
    call$0: function() {
      var future, t1;
      future = X.getDelayedResult(this.input_0);
      t1 = this.expectedOutput_1;
      if (this.expectThrow_2 === true)
        O.expect(future, new O.Throws(O.wrapMatcher("sorry, I don't like " + H.S(t1))), null, null, false);
      else
        O.expect(future, new Y._Finishes(O.wrapMatcher(new O._IsSameAs(t1))), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  }
}],
["test.bot.expand_stream", "bot/test_expand_stream.dart", , Y, {
  main0: function() {
    N.group("expandStream", new Y.main_closure5());
    N.group("streamForEachAsync", new Y.main_closure6());
  },
  _fromNumber: function(input) {
    return Y._slowFromList([input, J.$mul$n(input, 2)]);
  },
  _final: function() {
    return Y._slowFromList([0, 1, 2, 3]);
  },
  _slowFromList: function(items) {
    var controller, t1;
    controller = P.StreamController_StreamController(null, null, null, null, false, null);
    P.Future_forEach(items, new Y._slowFromList_closure(controller)).whenComplete$1(controller.get$close(controller));
    t1 = new P._ControllerStream(controller);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  main_closure5: {
    "": "Closure;",
    call$0: function() {
      N.test("simple", new Y.main__closure16());
    },
    $isFunction: true,
    $is_void_: true
  },
  main__closure16: {
    "": "Closure;",
    call$0: function() {
      var t1 = N.expandStream(Y._slowFromList([7, 11, 13, 17, 19]), Y._fromNumber$closure, Y._final$closure);
      return t1.toList$0(t1).then$1(new Y.main___closure17());
    },
    $isFunction: true,
    $is_void_: true
  },
  main___closure17: {
    "": "Closure;",
    call$1: function(items) {
      var t1, t2;
      t1 = [7, 14, 11, 22, 13, 26, 17, 34, 19, 38, 0, 1, 2, 3];
      t2 = new O._OrderedEquals(t1, null);
      t2._matcher = new O._DeepMatcher(t1, 1, null);
      O.expect(items, t2, null, null, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  main_closure6: {
    "": "Closure;",
    call$0: function() {
      N.test("simple sync", new Y.main__closure11());
      N.test("simple async", new Y.main__closure12());
      N.test("stream has error", new Y.main__closure13());
      N.test("action throws error directly", new Y.main__closure14());
      N.test("action throws error directly", new Y.main__closure15());
    },
    $isFunction: true,
    $is_void_: true
  },
  main__closure11: {
    "": "Closure;",
    call$0: function() {
      var t1, items, stream, t2, t3, obj;
      t1 = {};
      items = P.List_List$generate(10, new Y.main___closure14(), true, null);
      stream = P.Stream_Stream$fromIterable(items, null);
      t1.count_0 = 0;
      t2 = P._Future$(null);
      t3 = new P._AsyncCompleter(t2);
      H.setRuntimeTypeInfo(t3, [null]);
      obj = new N._StreamForEachAsync(new Y.main___closure15(t1, items), P._StreamIteratorImpl$(stream, null), t3);
      H.setRuntimeTypeInfo(obj, [null]);
      obj._moveNext$0();
      return t2.then$1(new Y.main___closure16(t1, items));
    },
    $isFunction: true,
    $is_void_: true
  },
  main___closure14: {
    "": "Closure;",
    call$1: function(i) {
      return i;
    },
    $isFunction: true,
    $is_args1: true
  },
  main___closure15: {
    "": "Closure;box_0,items_5",
    call$1: function(item) {
      var t1;
      O.expect(item, new O._OrderingComparison(this.items_5.length, false, true, false, "a value less than", true), null, null, false);
      t1 = this.box_0;
      O.expect(item, t1.count_0, null, null, false);
      t1.count_0 = t1.count_0 + 1;
    },
    $isFunction: true,
    $is_args1: true
  },
  main___closure16: {
    "": "Closure;box_0,items_6",
    call$1: function(_) {
      O.expect(this.box_0.count_0, this.items_6.length, null, null, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure12: {
    "": "Closure;",
    call$0: function() {
      var t1, items, stream, t2, t3, obj;
      t1 = {};
      items = P.List_List$generate(10, new Y.main___closure11(), true, null);
      stream = P.Stream_Stream$fromIterable(items, null);
      t1.count_1 = 0;
      t2 = P._Future$(null);
      t3 = new P._AsyncCompleter(t2);
      H.setRuntimeTypeInfo(t3, [null]);
      obj = new N._StreamForEachAsync(new Y.main___closure12(t1, items), P._StreamIteratorImpl$(stream, null), t3);
      H.setRuntimeTypeInfo(obj, [null]);
      obj._moveNext$0();
      return t2.then$1(new Y.main___closure13(t1, items));
    },
    $isFunction: true,
    $is_void_: true
  },
  main___closure11: {
    "": "Closure;",
    call$1: function(i) {
      return i;
    },
    $isFunction: true,
    $is_args1: true
  },
  main___closure12: {
    "": "Closure;box_1,items_7",
    call$1: function(item) {
      var t1;
      O.expect(item, new O._OrderingComparison(this.items_7.length, false, true, false, "a value less than", true), null, null, false);
      t1 = this.box_1;
      O.expect(item, t1.count_1, null, null, false);
      t1.count_1 = t1.count_1 + 1;
      return P._Future$immediate(null, null);
    },
    $isFunction: true,
    $is_args1: true
  },
  main___closure13: {
    "": "Closure;box_1,items_8",
    call$1: function(_) {
      O.expect(this.box_1.count_1, this.items_8.length, null, null, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure13: {
    "": "Closure;",
    call$0: function() {
      var t1, controller, t2, t3, t4, obj;
      t1 = {};
      t1.canceled_2 = false;
      controller = P.StreamController_StreamController(new Y.main___closure7(t1), null, null, null, false, null);
      if (controller._state >= 4)
        H.throwExpression(controller._badEventState$0());
      controller._async$_add$1(0);
      t1.count_3 = 0;
      t1.errorCaught_4 = false;
      t2 = new P._ControllerStream(controller);
      H.setRuntimeTypeInfo(t2, [null]);
      t3 = P._Future$(null);
      t4 = new P._AsyncCompleter(t3);
      H.setRuntimeTypeInfo(t4, [null]);
      obj = new N._StreamForEachAsync(new Y.main___closure8(t1, controller), P._StreamIteratorImpl$(t2, null), t4);
      H.setRuntimeTypeInfo(obj, [null]);
      obj._moveNext$0();
      return t3.catchError$1(new Y.main___closure9(t1)).then$1(new Y.main___closure10(t1));
    },
    $isFunction: true,
    $is_void_: true
  },
  main___closure7: {
    "": "Closure;box_2",
    call$0: function() {
      this.box_2.canceled_2 = true;
    },
    $isFunction: true,
    $is_void_: true
  },
  main___closure8: {
    "": "Closure;box_2,controller_9",
    call$1: function(item) {
      var t1, t2, t3;
      t1 = this.box_2;
      O.expect(item, t1.count_3, null, null, false);
      t2 = J.getInterceptor$n(item);
      t3 = this.controller_9;
      if (t2.$lt(item, 5)) {
        t1.count_3 = t1.count_3 + 1;
        t1 = t2.$add(item, 1);
        if (t3._state >= 4)
          H.throwExpression(t3._badEventState$0());
        t3._async$_add$1(t1);
      } else {
        if (t3._state >= 4)
          H.throwExpression(t3._badEventState$0());
        t3._addError$2("never 5", null);
      }
    },
    $isFunction: true,
    $is_args1: true
  },
  main___closure9: {
    "": "Closure;box_2",
    call$1: function(err) {
      O.expect(err, "never 5", null, null, false);
      this.box_2.errorCaught_4 = true;
    },
    $isFunction: true,
    $is_args1: true
  },
  main___closure10: {
    "": "Closure;box_2",
    call$1: function(_) {
      var t1 = this.box_2;
      O.expect(t1.errorCaught_4, C.C__IsTrue, null, null, false);
      O.expect(t1.canceled_2, C.C__IsTrue, null, null, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure14: {
    "": "Closure;",
    call$0: function() {
      var t1, controller, t2, t3, t4, obj;
      t1 = {};
      t1.canceled_5 = false;
      controller = P.StreamController_StreamController(new Y.main___closure3(t1), null, null, null, false, null);
      if (controller._state >= 4)
        H.throwExpression(controller._badEventState$0());
      controller._async$_add$1(0);
      t1.count_6 = 0;
      t1.errorCaught_7 = false;
      t2 = new P._ControllerStream(controller);
      H.setRuntimeTypeInfo(t2, [null]);
      t3 = P._Future$(null);
      t4 = new P._AsyncCompleter(t3);
      H.setRuntimeTypeInfo(t4, [null]);
      obj = new N._StreamForEachAsync(new Y.main___closure4(t1, controller), P._StreamIteratorImpl$(t2, null), t4);
      H.setRuntimeTypeInfo(obj, [null]);
      obj._moveNext$0();
      return t3.catchError$1(new Y.main___closure5(t1)).then$1(new Y.main___closure6(t1));
    },
    $isFunction: true,
    $is_void_: true
  },
  main___closure3: {
    "": "Closure;box_3",
    call$0: function() {
      this.box_3.canceled_5 = true;
    },
    $isFunction: true,
    $is_void_: true
  },
  main___closure4: {
    "": "Closure;box_3,controller_10",
    call$1: function(item) {
      var t1, t2;
      t1 = this.box_3;
      O.expect(item, t1.count_6, null, null, false);
      t2 = J.getInterceptor$n(item);
      if (t2.$lt(item, 5)) {
        t1.count_6 = t1.count_6 + 1;
        t1 = this.controller_10;
        t2 = t2.$add(item, 1);
        if (t1._state >= 4)
          H.throwExpression(t1._badEventState$0());
        t1._async$_add$1(t2);
      } else
        throw H.wrapException("never 5");
    },
    $isFunction: true,
    $is_args1: true
  },
  main___closure5: {
    "": "Closure;box_3",
    call$1: function(err) {
      O.expect(err, "never 5", null, null, false);
      this.box_3.errorCaught_7 = true;
    },
    $isFunction: true,
    $is_args1: true
  },
  main___closure6: {
    "": "Closure;box_3",
    call$1: function(_) {
      var t1 = this.box_3;
      O.expect(t1.errorCaught_7, C.C__IsTrue, null, null, false);
      O.expect(t1.canceled_5, C.C__IsTrue, null, null, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure15: {
    "": "Closure;",
    call$0: function() {
      var t1, controller, t2, t3, t4, obj;
      t1 = {};
      t1.canceled_8 = false;
      controller = P.StreamController_StreamController(new Y.main___closure(t1), null, null, null, false, null);
      if (controller._state >= 4)
        H.throwExpression(controller._badEventState$0());
      controller._async$_add$1(0);
      t1.count_9 = 0;
      t1.errorCaught_10 = false;
      t2 = new P._ControllerStream(controller);
      H.setRuntimeTypeInfo(t2, [null]);
      t3 = P._Future$(null);
      t4 = new P._AsyncCompleter(t3);
      H.setRuntimeTypeInfo(t4, [null]);
      obj = new N._StreamForEachAsync(new Y.main___closure0(t1, controller), P._StreamIteratorImpl$(t2, null), t4);
      H.setRuntimeTypeInfo(obj, [null]);
      obj._moveNext$0();
      return t3.catchError$1(new Y.main___closure1(t1)).then$1(new Y.main___closure2(t1));
    },
    $isFunction: true,
    $is_void_: true
  },
  main___closure: {
    "": "Closure;box_4",
    call$0: function() {
      this.box_4.canceled_8 = true;
    },
    $isFunction: true,
    $is_void_: true
  },
  main___closure0: {
    "": "Closure;box_4,controller_11",
    call$1: function(item) {
      var t1, t2;
      t1 = this.box_4;
      O.expect(item, t1.count_9, null, null, false);
      t2 = J.getInterceptor$n(item);
      if (t2.$lt(item, 5)) {
        t1.count_9 = t1.count_9 + 1;
        t1 = this.controller_11;
        t2 = t2.$add(item, 1);
        if (t1._state >= 4)
          H.throwExpression(t1._badEventState$0());
        t1._async$_add$1(t2);
      } else
        return P._Future$immediateError("never 5", null, null);
    },
    $isFunction: true,
    $is_args1: true
  },
  main___closure1: {
    "": "Closure;box_4",
    call$1: function(err) {
      O.expect(err, "never 5", null, null, false);
      this.box_4.errorCaught_10 = true;
    },
    $isFunction: true,
    $is_args1: true
  },
  main___closure2: {
    "": "Closure;box_4",
    call$1: function(_) {
      var t1 = this.box_4;
      O.expect(t1.errorCaught_10, C.C__IsTrue, null, null, false);
      O.expect(t1.canceled_8, C.C__IsTrue, null, null, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  _slowFromList_closure: {
    "": "Closure;controller_0",
    call$1: function(item) {
      return P.Future_Future$delayed(P.Duration$(0, 0, 0, 2, 0, 0), null, null).then$1(new Y._slowFromList__closure(this.controller_0, item));
    },
    $isFunction: true,
    $is_args1: true
  },
  _slowFromList__closure: {
    "": "Closure;controller_1,item_2",
    call$1: function(_) {
      var t1 = this.controller_1;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(this.item_2);
    },
    $isFunction: true,
    $is_args1: true
  }
}],
["test.bot.graph.tarjan", "bot/graph/tarjan_test.dart", , T, {
  main4: function() {
    N.test("single item", new T.main_closure7());
    N.test("5 isolated items", new T.main_closure8());
    N.test("5 in a line", new T.main_closure9());
    N.test("5 in a loop", new T.main_closure10());
    N.test("5 random", new T.main_closure11());
    N.test("implied key", new T.main_closure12());
  },
  main_closure7: {
    "": "Closure;",
    call$0: function() {
      var graph, result, t1;
      graph = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, [P.Set, J.JSInt]);
      graph.$indexSet(graph, 1, null);
      result = M.stronglyConnectedComponents(graph);
      t1 = result.length;
      O.expect(t1, new O._DeepMatcher(1, 100, null), null, null, false);
      if (0 >= result.length)
        return H.ioore(result, 0);
      O.expect(result[0], new O._UnorderedEquals([1]), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  main_closure8: {
    "": "Closure;",
    call$0: function() {
      var graph, result, t1;
      graph = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, [P.Set, J.JSInt]);
      graph.$indexSet(graph, 1, null);
      graph.$indexSet(graph, 2, null);
      graph.$indexSet(graph, 3, null);
      graph.$indexSet(graph, 4, null);
      graph.$indexSet(graph, 5, null);
      result = M.stronglyConnectedComponents(graph);
      t1 = result.length;
      O.expect(t1, new O._DeepMatcher(5, 100, null), null, null, false);
      if (0 >= result.length)
        return H.ioore(result, 0);
      O.expect(result[0], new O._UnorderedEquals([1]), null, null, false);
      if (1 >= result.length)
        return H.ioore(result, 1);
      O.expect(result[1], new O._UnorderedEquals([2]), null, null, false);
      if (2 >= result.length)
        return H.ioore(result, 2);
      O.expect(result[2], new O._UnorderedEquals([3]), null, null, false);
      if (3 >= result.length)
        return H.ioore(result, 3);
      O.expect(result[3], new O._UnorderedEquals([4]), null, null, false);
      if (4 >= result.length)
        return H.ioore(result, 4);
      O.expect(result[4], new O._UnorderedEquals([5]), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  main_closure9: {
    "": "Closure;",
    call$0: function() {
      var graph, t1, result;
      graph = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, [P.Set, J.JSInt]);
      graph.$indexSet(graph, 1, null);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [1]);
      graph.$indexSet(graph, 2, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [2]);
      graph.$indexSet(graph, 3, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [3]);
      graph.$indexSet(graph, 4, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [4]);
      graph.$indexSet(graph, 5, t1);
      result = M.stronglyConnectedComponents(graph);
      t1 = result.length;
      O.expect(t1, new O._DeepMatcher(5, 100, null), null, null, false);
      if (0 >= result.length)
        return H.ioore(result, 0);
      O.expect(result[0], new O._UnorderedEquals([1]), null, null, false);
      if (1 >= result.length)
        return H.ioore(result, 1);
      O.expect(result[1], new O._UnorderedEquals([2]), null, null, false);
      if (2 >= result.length)
        return H.ioore(result, 2);
      O.expect(result[2], new O._UnorderedEquals([3]), null, null, false);
      if (3 >= result.length)
        return H.ioore(result, 3);
      O.expect(result[3], new O._UnorderedEquals([4]), null, null, false);
      if (4 >= result.length)
        return H.ioore(result, 4);
      O.expect(result[4], new O._UnorderedEquals([5]), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  main_closure10: {
    "": "Closure;",
    call$0: function() {
      var graph, t1, result;
      graph = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, [P.Set, J.JSInt]);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [5]);
      graph.$indexSet(graph, 1, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [1]);
      graph.$indexSet(graph, 2, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [2]);
      graph.$indexSet(graph, 3, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [3]);
      graph.$indexSet(graph, 4, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [4]);
      graph.$indexSet(graph, 5, t1);
      result = M.stronglyConnectedComponents(graph);
      t1 = result.length;
      O.expect(t1, new O._DeepMatcher(1, 100, null), null, null, false);
      if (0 >= result.length)
        return H.ioore(result, 0);
      O.expect(result[0], new O._UnorderedEquals([1, 2, 3, 4, 5]), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  main_closure11: {
    "": "Closure;",
    call$0: function() {
      var graph, t1, result;
      graph = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, [P.Set, J.JSInt]);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [2]);
      graph.$indexSet(graph, 1, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [3]);
      graph.$indexSet(graph, 2, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [2]);
      graph.$indexSet(graph, 3, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [1]);
      graph.$indexSet(graph, 4, t1);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [4]);
      graph.$indexSet(graph, 5, t1);
      result = M.stronglyConnectedComponents(graph);
      t1 = result.length;
      O.expect(t1, new O._DeepMatcher(4, 100, null), null, null, false);
      if (0 >= result.length)
        return H.ioore(result, 0);
      O.expect(result[0], new O._UnorderedEquals([2, 3]), null, null, false);
      if (1 >= result.length)
        return H.ioore(result, 1);
      O.expect(result[1], new O._UnorderedEquals([1]), null, null, false);
      if (2 >= result.length)
        return H.ioore(result, 2);
      O.expect(result[2], new O._UnorderedEquals([4]), null, null, false);
      if (3 >= result.length)
        return H.ioore(result, 3);
      O.expect(result[3], new O._UnorderedEquals([5]), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  main_closure12: {
    "": "Closure;",
    call$0: function() {
      var graph, t1, result;
      graph = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, [P.Set, J.JSInt]);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
      t1.addAll$1(t1, [2]);
      graph.$indexSet(graph, 1, t1);
      result = M.stronglyConnectedComponents(graph);
      t1 = result.length;
      O.expect(t1, new O._DeepMatcher(2, 100, null), null, null, false);
      if (0 >= result.length)
        return H.ioore(result, 0);
      O.expect(result[0], new O._UnorderedEquals([2]), null, null, false);
      if (1 >= result.length)
        return H.ioore(result, 1);
      O.expect(result[1], new O._UnorderedEquals([1]), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  }
}],
["test.bot.graph.topo_sort", "bot/graph/topo_sort_test.dart", , G, {
  main3: function() {
    G._test("empty", H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), []);
    G._testThrow("null", null, C.Throws_gT2);
    G._test("one node, no deps", H.fillLiteralMap(["a", []], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), ["a"]);
    G._test("one node, one dep", H.fillLiteralMap(["a", ["b"]], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), ["b", "a"]);
    G._test("test tushar", H.fillLiteralMap(["d", ["c"], "c", ["x"], "x", ["b", "a"], "b", ["e"]], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), ["a", "e", "b", "x", "c", "d"]);
    G._test("test tushar, reference e sooner", H.fillLiteralMap(["d", ["c", "e"], "c", ["x"], "x", ["b", "a"], "b", ["e"]], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), ["e", "a", "b", "x", "c", "d"]);
    G._testThrow("test tushar, with a loop", H.fillLiteralMap(["d", ["c", "e"], "c", ["x"], "x", ["b", "a"], "b", ["e", "d"]], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), C.Throws__ArgumentError_ArgumentError);
    G._test("independent", H.fillLiteralMap(["a", [], "b", []], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), ["a", "b"]);
    G._testThrow("self loop", H.fillLiteralMap(["a", ["a"]], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), C.Throws__ArgumentError_ArgumentError);
    G._testThrow("dupe dependency", H.fillLiteralMap(["a", ["b", "b"]], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), C.Throws__ArgumentError_ArgumentError);
  },
  _test: function($name, map, expected) {
    N.test($name, new G._test_closure(map, expected));
  },
  _testThrow: function($name, map, throwsMatcher) {
    N.test($name, new G._testThrow_closure(map, throwsMatcher));
  },
  _test_closure: {
    "": "Closure;map_0,expected_1",
    call$0: function() {
      O.expect(M.topologicalSort(this.map_0), this.expected_1, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  _testThrow_closure: {
    "": "Closure;map_0,throwsMatcher_1",
    call$0: function() {
      O.expect(new G._testThrow__closure(this.map_0), this.throwsMatcher_1, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  _testThrow__closure: {
    "": "Closure;map_2",
    call$0: function() {
      return M.topologicalSort(this.map_2);
    },
    $isFunction: true,
    $is_void_: true
  }
}],
["test.bot.throttled_stream", "bot/test_throttled_stream.dart", , F, {
  main2: function() {
    N.test("kitchen sink", new F.main_closure0());
  },
  _sum: function(values) {
    if (values == null)
      throw H.wrapException(new P.ArgumentError("null!"));
    return P.Future_Future(new F._sum_closure(values), null);
  },
  main_closure0: {
    "": "Closure;",
    call$0: function() {
      var t1, ts, t2;
      t1 = P.StreamController_StreamController$broadcast(null, null, false, null);
      ts = new Y.ThrottledStream(F._sum$closure, t1, null, null, null, null, false);
      H.setRuntimeTypeInfo(ts, [[P.Iterable, J.JSInt], J.JSInt]);
      O.expect(ts._throttled_stream$_source, C.C__IsNull, null, null, false);
      O.expect(ts._outputValue, C.C__IsNull, null, null, false);
      ts._throttled_stream$_source = [-2, 3];
      ts._tryUpdate$0();
      O.expect(ts._throttled_stream$_source, [-2, 3], null, null, false);
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2.get$first(t2).then$1(new F.main__closure1(ts)).then$1(new F.main__closure2(ts)).then$1(new F.main__closure3(ts)).then$1(new F.main__closure4()).catchError$1(new F.main__closure5()).then$1(new F.main__closure6(ts, C.List_1_2_3)).then$1(new F.main__closure7(ts)).then$1(new F.main__closure8(ts, C.List_1_2_3)).then$1(new F.main__closure9());
    },
    $isFunction: true,
    $is_void_: true
  },
  main__closure1: {
    "": "Closure;ts_0",
    call$1: function(sum) {
      var t1, t2;
      O.expect(sum, 1, null, null, false);
      t1 = this.ts_0;
      O.expect(t1._outputValue, 1, null, null, false);
      t1._throttled_stream$_source = [2];
      t1._tryUpdate$0();
      O.expect(t1._throttled_stream$_source, [2], null, null, false);
      O.expect(t1._outputValue, 1, null, null, false);
      t1._throttled_stream$_source = [3];
      t1._tryUpdate$0();
      O.expect(t1._throttled_stream$_source, [3], null, null, false);
      O.expect(t1._outputValue, 1, null, null, false);
      t1 = t1._throttled_stream$_controller;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2.get$first(t2);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure2: {
    "": "Closure;ts_1",
    call$1: function(sum) {
      var t1, t2;
      O.expect(sum, 2, null, null, false);
      t1 = this.ts_1;
      O.expect(t1._outputValue, 2, null, null, false);
      t1 = t1._throttled_stream$_controller;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2.get$first(t2);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure3: {
    "": "Closure;ts_2",
    call$1: function(sum) {
      var t1, t2;
      O.expect(sum, 3, null, null, false);
      t1 = this.ts_2;
      O.expect(t1._outputValue, 3, null, null, false);
      t1._throttled_stream$_source = null;
      t1._tryUpdate$0();
      O.expect(t1._throttled_stream$_source, null, null, null, false);
      t1 = t1._throttled_stream$_controller;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2.get$first(t2);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure4: {
    "": "Closure;",
    call$1: function(value) {
      O.fail("Should not get a value...should error out", null);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure5: {
    "": "Closure;",
    call$1: function(error) {
      O.expect(error, C.isInstanceOf_B8J, null, null, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure6: {
    "": "Closure;ts_3,simple_4",
    call$1: function(_) {
      var t1, t2;
      t1 = this.ts_3;
      t1._throttled_stream$_source = this.simple_4;
      t1._tryUpdate$0();
      t1 = t1._throttled_stream$_controller;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2.get$first(t2);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure7: {
    "": "Closure;ts_5",
    call$1: function(sum) {
      var t1, t2;
      O.expect(sum, 6, null, null, false);
      t1 = this.ts_5;
      t1._forceUpdate = true;
      t1._tryUpdate$0();
      t1 = t1._throttled_stream$_controller;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2.get$first(t2);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure8: {
    "": "Closure;ts_6,simple_7",
    call$1: function(sum) {
      var t1, t2;
      O.expect(sum, 6, null, null, false);
      t1 = this.ts_6;
      t1._throttled_stream$_source = this.simple_7;
      t1._tryUpdate$0();
      t1._throttled_stream$_source = [1];
      t1._tryUpdate$0();
      t1 = t1._throttled_stream$_controller;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      return t2.get$first(t2);
    },
    $isFunction: true,
    $is_args1: true
  },
  main__closure9: {
    "": "Closure;",
    call$1: function(sum) {
      O.expect(sum, 1, null, null, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  _sum_closure: {
    "": "Closure;values_0",
    call$0: function() {
      return J.reduce$1$ax(this.values_0, new F._sum__closure());
    },
    $isFunction: true,
    $is_void_: true
  },
  _sum__closure: {
    "": "Closure;",
    call$2: function(a, b) {
      if (a == null)
        throw H.wrapException(new P.ArgumentError(null));
      if (b == null)
        throw H.wrapException(new P.ArgumentError(null));
      return J.$add$ns(a, b);
    },
    $isFunction: true,
    $is_args2: true
  }
}],
["test_bot", "bot/_bot.dart", , N, {
  main: function() {
    N.group("bot", new N.main_closure());
  },
  _testStringReader: function() {
    N._verifyValues("", [""], null);
    N._verifyValues("Shanna", ["Shanna"], null);
    N._verifyValues("Shanna\n", ["Shanna", ""], null);
    N._verifyValues("\nShanna\n", ["", "Shanna", ""], null);
    N._verifyValues("\r\nShanna\n", ["", "Shanna", ""], null);
    N._verifyValues("\r\nShanna\r\n", ["", "Shanna", ""], null);
    N._verifyValues("\rShanna\r\n", ["\rShanna", ""], null);
    N._verifyValues("\r\n\r\n\r\r\n\n", ["", "", "\r", "", ""], null);
    N._verifyValues("line1\nline2\n\nthis\nis\the\rest\n", ["line1", "line2", ""], "this\nis\the\rest\n");
  },
  _verifyValues: function(input, output, rest) {
    var sr, t1, value;
    sr = new X.StringLineReader(input, 0);
    Y._metaRequireArgumentNotNullOrEmpty("source");
    for (t1 = new H.ListIterator(output, output.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(output, 0)]); t1.moveNext$0();) {
      value = t1._dev$_current;
      O.expect(sr._peekOrReadNextLine$1(true), value, null, null, false);
    }
    O.expect(sr.readToEnd$0(), rest, null, "rest did not match", false);
    O.expect(sr._peekOrReadNextLine$1(true), null, null, "future nextLines should be null", false);
    O.expect(sr.readToEnd$0(), null, null, "future readToEnd should be null", false);
  },
  TestArray2d_run: function() {
    N.group("Array2d", new N.TestArray2d_run_closure());
  },
  TestArray2d__testGetAdjacent: function() {
    var list, a, t1, adjacent, t2;
    list = ["a", "b", "c", "d", "e", "f", "g", "h", "i"];
    a = X.Array2d_Array2d$readonlyFrom(3, list, null);
    t1 = new O._OrderedEquals(list, null);
    t1._matcher = new O._DeepMatcher(list, 1, null);
    O.expect(a, t1, null, null, false);
    adjacent = a.getAdjacentIndices$2(0, 0);
    t1 = [1, 3, 4];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(adjacent, t2, null, null, false);
    adjacent = a.getAdjacentIndices$2(1, 1);
    t1 = [0, 1, 2, 3, 5, 6, 7, 8];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(adjacent, t2, null, null, false);
    adjacent = a.getAdjacentIndices$2(4, 4);
    t1 = [];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(adjacent, t2, null, null, false);
    adjacent = a.getAdjacent$2(0, 0);
    t1 = ["b", "d", "e"];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(adjacent, t2, null, null, false);
    adjacent = a.getAdjacent$2(1, 1);
    t1 = ["a", "b", "c", "d", "f", "g", "h", "i"];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(adjacent, t2, null, null, false);
    adjacent = a.getAdjacent$2(4, 4);
    t1 = [];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(adjacent, t2, null, null, false);
  },
  TestArray2d__testSetGet: function() {
    var a, t1, t2, x, y, t3;
    a = X.Array2d_Array2d(3, 3, 0, J.JSInt);
    t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(a, t2, null, null, false);
    for (t1 = a._bot$_source, t2 = J.getInterceptor$asx(t1), x = 0; x < 3; ++x)
      for (y = 0; y < 3; ++y) {
        t3 = t2.$index(t1, a._getIndex$2(x, y));
        O.expect(t3, new O._DeepMatcher(0, 100, null), null, null, false);
      }
    t2.$indexSet(t1, 3, 1);
    t3 = t2.$index(t1, 3);
    O.expect(t3, new O._DeepMatcher(1, 100, null), null, null, false);
    t3 = t2.$index(t1, a._getIndex$2(0, 1));
    O.expect(t3, new O._DeepMatcher(1, 100, null), null, null, false);
    t2.$indexSet(t1, a._getIndex$2(0, 1), 2);
    t3 = t2.$index(t1, 3);
    O.expect(t3, new O._DeepMatcher(2, 100, null), null, null, false);
    t1 = t2.$index(t1, a._getIndex$2(0, 1));
    O.expect(t1, new O._DeepMatcher(2, 100, null), null, null, false);
  },
  TestArray2d__testDefaultCtor: function() {
    var skinnyArray = X.Array2d_Array2d(3, 0, null, J.JSInt);
    O.expect(skinnyArray.width, 3, null, null, false);
    O.expect(skinnyArray.height, 0, null, null, false);
    O.expect(J.get$length$asx(skinnyArray._bot$_source), 0, null, null, false);
    skinnyArray = X.Array2d_Array2d(0, 3, null, J.JSInt);
    O.expect(skinnyArray.width, 0, null, null, false);
    O.expect(skinnyArray.height, 3, null, null, false);
    O.expect(J.get$length$asx(skinnyArray._bot$_source), 0, null, null, false);
  },
  TestArray2d__testReadonlyFromCtorParams: function() {
    O.expect(new N.TestArray2d__testReadonlyFromCtorParams_closure(), C.Throws_gT2, null, null, false);
    O.expect(new N.TestArray2d__testReadonlyFromCtorParams_closure0(), C.Throws_gT2, null, null, false);
    O.expect(new N.TestArray2d__testReadonlyFromCtorParams_closure1(), C.Throws__ArgumentError_ArgumentError, null, null, false);
    O.expect(new N.TestArray2d__testReadonlyFromCtorParams_closure2(), C.Throws__ArgumentError_ArgumentError, null, null, false);
    var skinnyArray = X.Array2d_Array2d$readonlyFrom(3, [], J.JSInt);
    O.expect(skinnyArray.width, 3, null, null, false);
    O.expect(skinnyArray.height, 0, null, null, false);
    O.expect(J.get$length$asx(skinnyArray._bot$_source), 0, null, null, false);
    skinnyArray = X.Array2d_Array2d$readonlyFrom(0, [], J.JSInt);
    O.expect(skinnyArray.width, 0, null, null, false);
    O.expect(skinnyArray.height, 0, null, null, false);
    O.expect(J.get$length$asx(skinnyArray._bot$_source), 0, null, null, false);
  },
  TestArray2d__testCollectionEquals: function() {
    var a, t1, t2;
    a = X.Array2d_Array2d$readonlyFrom(2, [0, 1, 2, 3], J.JSInt);
    t1 = [0, 1, 2, 3];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(a, t2, null, null, false);
  },
  TestCollectionUtil_run: function() {
    N.group("CollectionUtil", new N.TestCollectionUtil_run_closure());
  },
  TestCollectionUtil__testListish: function() {
    var roc = new X.ReadOnlyCollection(P.List_List$from([1, 2], false, null));
    H.setRuntimeTypeInfo(roc, [null]);
    O.expect(X.CollectionUtil_allUnique(roc), C.C__IsTrue, null, null, false);
  },
  TestCollectionUtil__testAllUnique: function() {
    O.expect(X.CollectionUtil_allUnique([]), C.C__IsTrue, null, null, false);
    O.expect(X.CollectionUtil_allUnique([1]), C.C__IsTrue, null, null, false);
    O.expect(X.CollectionUtil_allUnique([null]), C.C__IsTrue, null, null, false);
    O.expect(X.CollectionUtil_allUnique([""]), C.C__IsTrue, null, null, false);
    O.expect(X.CollectionUtil_allUnique(["str"]), C.C__IsTrue, null, null, false);
    O.expect(X.CollectionUtil_allUnique([1, 2]), C.C__IsTrue, null, null, false);
    O.expect(X.CollectionUtil_allUnique([1, 2]), C.C__IsTrue, null, null, false);
    O.expect(X.CollectionUtil_allUnique(["", "str"]), C.C__IsTrue, null, null, false);
    O.expect(X.CollectionUtil_allUnique([1, 1]), C.C__IsFalse, null, null, false);
    O.expect(X.CollectionUtil_allUnique([null, null]), C.C__IsFalse, null, null, false);
    O.expect(X.CollectionUtil_allUnique(["", ""]), C.C__IsFalse, null, null, false);
    O.expect(X.CollectionUtil_allUnique(["", ""]), C.C__IsFalse, null, null, false);
    O.expect(X.CollectionUtil_allUnique(["str", "str"]), C.C__IsFalse, null, null, false);
  },
  TestEnumerable_run: function() {
    N.group("Enumerable", new N.TestEnumerable_run_closure());
  },
  TestEnumerable__testConcat: function() {
    var enumValue, t1, t2;
    enumValue = X.$$([0, 1, 2]).concat$1([3, 4, 5]);
    t1 = [0, 1, 2, 3, 4, 5];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(enumValue, t2, null, null, false);
  },
  TestEnumerable__testExclude: function() {
    var enumValue, t1, t2, t3;
    enumValue = X.$$([0, 1, 2, 3, 4]);
    t1 = X.CollectionUtil_exclude(enumValue, []);
    t2 = new O._OrderedEquals(enumValue, null);
    t2._matcher = new O._DeepMatcher(enumValue, 1, null);
    O.expect(t1, t2, null, null, false);
    t1 = X.CollectionUtil_exclude(enumValue, [5, -1]);
    t2 = new O._OrderedEquals(enumValue, null);
    t2._matcher = new O._DeepMatcher(enumValue, 1, null);
    O.expect(t1, t2, null, null, false);
    t1 = X.CollectionUtil_exclude(enumValue, [1, 3]);
    t2 = [0, 2, 4];
    t3 = new O._OrderedEquals(t2, null);
    t3._matcher = new O._DeepMatcher(t2, 1, null);
    O.expect(t1, t3, null, null, false);
  },
  TestEnumerable__testDistinct: function() {
    var enumValue = X.$$([0, 0, 1, 1, 2, 2, 0, 1, 2, 3, 4, 5]);
    O.expect(X.CollectionUtil_distinct(enumValue, null), new O._UnorderedEquals([0, 1, 2, 3, 4, 5]), null, null, false);
    O.expect(X.CollectionUtil_distinct(enumValue, new N.TestEnumerable__testDistinct_closure()), new O._UnorderedEquals([0, 1]), null, null, false);
  },
  TestEnumerable__testForEachWithIndex: function() {
    X.$$([0, 1, 2, 3]).forEachWithIndex$1(new N.TestEnumerable__testForEachWithIndex_closure());
  },
  TestEnumerable__testToMap: function() {
    var noDupes, hashMap, t1;
    noDupes = X.$$(["the", "kitty", "is", "super"]);
    hashMap = X.CollectionUtil_toMap(noDupes, new N.TestEnumerable__testToMap_closure(), null);
    hashMap.forEach$1(hashMap, new N.TestEnumerable__testToMap_closure0());
    t1 = new P.LinkedHashMapKeyIterable(hashMap);
    H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(hashMap, 0)]);
    O.expect(t1, new O._UnorderedEquals(noDupes), null, null, false);
    hashMap = X.CollectionUtil_toMap(noDupes, new N.TestEnumerable__testToMap_closure1(), new N.TestEnumerable__testToMap_closure2());
    hashMap.forEach$1(hashMap, new N.TestEnumerable__testToMap_closure3());
    O.expect(hashMap.get$values(hashMap), new O._UnorderedEquals(noDupes), null, null, false);
    O.expect(new N.TestEnumerable__testToMap_closure4(noDupes), C.Throws_fPC, null, null, false);
    O.expect(new N.TestEnumerable__testToMap_closure5(X.$$(["the", "cat", "is", "the", "super", "cat"])), C.Throws_fPC, null, null, false);
  },
  TestEnumerable__testCount: function() {
    var e, t1, count;
    e = X.$$([1, 2, 3, 4, 5, 6]);
    t1 = e.get$length(e);
    O.expect(t1, new O._DeepMatcher(6, 100, null), null, null, false);
    count = X.CollectionUtil_count(e, new N.TestEnumerable__testCount_closure());
    O.expect(count, new O._DeepMatcher(3, 100, null), null, null, false);
  },
  TestEnumerable__testSelectNumbers: function() {
    var t1, e, t2, sum;
    t1 = X.$$(["a", "cat", "is", "super"]);
    t1 = t1.map$1(t1, new N.TestEnumerable__testSelectNumbers_closure());
    Y._metaRequireArgumentNotNullOrEmpty("source");
    e = new X._SimpleNumEnumerable(t1);
    H.setRuntimeTypeInfo(e, [null]);
    t1 = [1, 3, 2, 5];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(e, t2, null, null, false);
    sum = e.sum$0();
    O.expect(sum, new O._DeepMatcher(11, 100, null), null, null, false);
  },
  TestEnumerable__testComplexGrouping: function() {
    var keyFunc, t1, t2, list, source, grouping, t3;
    keyFunc = new N.TestEnumerable__testComplexGrouping_closure();
    t1 = X.Grouping$(X.$$(["a"]), keyFunc, null, null)._values;
    t2 = t1._collection$_length;
    O.expect(t2, new O._DeepMatcher(1, 100, null), null, null, false);
    list = t1.$index(t1, 1);
    t1 = J.getInterceptor$asx(list);
    t2 = t1.get$length(list);
    O.expect(t2, new O._DeepMatcher(1, 100, null), null, null, false);
    t1 = t1.$index(list, 0);
    O.expect(t1, new O._StringEqualsMatcher("a"), null, null, false);
    source = ["a", "b", "c", "ab", "bc", "abc"];
    grouping = X.Grouping$(X.$$(source), keyFunc, null, null);
    t1 = grouping._values;
    t2 = t1._collection$_length;
    O.expect(t2, new O._DeepMatcher(3, 100, null), null, null, false);
    list = t1.$index(t1, 1);
    t2 = J.get$length$asx(list);
    O.expect(t2, new O._DeepMatcher(3, 100, null), null, null, false);
    O.expect(list, new O._Contains("a"), null, null, false);
    O.expect(list, new O._Contains("b"), null, null, false);
    O.expect(list, new O._Contains("c"), null, null, false);
    O.expect(list, new O._IsNot(O.wrapMatcher(new O._Contains("d"))), null, null, false);
    list = t1.$index(t1, 2);
    t2 = J.get$length$asx(list);
    O.expect(t2, new O._DeepMatcher(2, 100, null), null, null, false);
    O.expect(list, new O._Contains("ab"), null, null, false);
    O.expect(list, new O._Contains("bc"), null, null, false);
    O.expect(list, new O._IsNot(O.wrapMatcher(new O._Contains("a"))), null, null, false);
    list = t1.$index(t1, 3);
    t2 = J.getInterceptor$asx(list);
    t3 = t2.get$length(list);
    O.expect(t3, new O._DeepMatcher(1, 100, null), null, null, false);
    t2 = t2.$index(list, 0);
    O.expect(t2, new O._StringEqualsMatcher("abc"), null, null, false);
    O.expect(list, new O._IsNot(O.wrapMatcher(new O._Contains("d"))), null, null, false);
    O.expect(t1.$index(t1, 0), C.C__IsNull, null, null, false);
    O.expect(P.List_List$from(grouping.getValues$0(), true, J.JSString), new O._UnorderedEquals(source), null, null, false);
  },
  TestEnumerable__testSimpleGrouping: function() {
    var t1, t2, list;
    t1 = X.Grouping$(X.$$([1]), null, null, null)._values;
    t2 = t1._collection$_length;
    O.expect(t2, new O._DeepMatcher(1, 100, null), null, null, false);
    list = t1.$index(t1, 1);
    t1 = J.getInterceptor$asx(list);
    t2 = t1.get$length(list);
    O.expect(t2, new O._DeepMatcher(1, 100, null), null, null, false);
    t1 = t1.$index(list, 0);
    O.expect(t1, new O._DeepMatcher(1, 100, null), null, null, false);
    t1 = X.Grouping$(X.$$([1, 1]), null, null, null)._values;
    t2 = t1._collection$_length;
    O.expect(t2, new O._DeepMatcher(1, 100, null), null, null, false);
    list = t1.$index(t1, 1);
    t1 = J.getInterceptor$asx(list);
    t2 = t1.get$length(list);
    O.expect(t2, new O._DeepMatcher(2, 100, null), null, null, false);
    t2 = t1.$index(list, 0);
    O.expect(t2, new O._DeepMatcher(1, 100, null), null, null, false);
    t1 = t1.$index(list, 1);
    O.expect(t1, new O._DeepMatcher(1, 100, null), null, null, false);
    t1 = X.Grouping$(X.$$([1, 2, 3, 1, 2, 1]), null, null, null)._values;
    t2 = t1._collection$_length;
    O.expect(t2, new O._DeepMatcher(3, 100, null), null, null, false);
    list = t1.$index(t1, 1);
    t2 = J.get$length$asx(list);
    O.expect(t2, new O._DeepMatcher(3, 100, null), null, null, false);
    O.expect(list, new O._EveryElement(O.wrapMatcher(new O._DeepMatcher(1, 100, null))), null, null, false);
    list = t1.$index(t1, 2);
    t2 = J.get$length$asx(list);
    O.expect(t2, new O._DeepMatcher(2, 100, null), null, null, false);
    O.expect(list, new O._EveryElement(O.wrapMatcher(new O._DeepMatcher(2, 100, null))), null, null, false);
    list = t1.$index(t1, 3);
    t2 = J.get$length$asx(list);
    O.expect(t2, new O._DeepMatcher(1, 100, null), null, null, false);
    O.expect(list, new O._EveryElement(O.wrapMatcher(new O._DeepMatcher(3, 100, null))), null, null, false);
    O.expect(t1.$index(t1, 4), C.C__IsNull, null, null, false);
  },
  TestNumberEnumerable_run: function() {
    N.group("NumberEnumerable", new N.TestNumberEnumerable_run_closure());
  },
  TestNumberEnumerable__testRange: function() {
    var ne, t1, t2;
    ne = X.NumberEnumerable_NumberEnumerable$fromRange(10, 5, null);
    t1 = [10, 11, 12, 13, 14];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(ne, t2, null, null, false);
    ne = X.NumberEnumerable_NumberEnumerable$fromRange(0, -1, null);
    t1 = [];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(ne, t2, null, null, false);
    ne = X.NumberEnumerable_NumberEnumerable$fromRange(0, 0, null);
    t1 = [];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(ne, t2, null, null, false);
    ne = X.NumberEnumerable_NumberEnumerable$fromRange(0, 1, null);
    t1 = [0];
    t2 = new O._OrderedEquals(t1, null);
    t2._matcher = new O._DeepMatcher(t1, 1, null);
    O.expect(ne, t2, null, null, false);
  },
  TestNumberEnumerable__testSum: function() {
    var t1, value;
    Y._metaRequireArgumentNotNullOrEmpty("source");
    t1 = new X._SimpleNumEnumerable([1, 2, 3]);
    H.setRuntimeTypeInfo(t1, [null]);
    value = t1.sum$0();
    O.expect(value, new O._DeepMatcher(6, 100, null), null, null, false);
    O.expect(new N.TestNumberEnumerable__testSum_closure(), C.Throws_null, null, null, false);
  },
  TestNumberEnumerable__testMin: function() {
    var t1, value;
    Y._metaRequireArgumentNotNullOrEmpty("source");
    t1 = new X._SimpleNumEnumerable([1, 2, 3]);
    H.setRuntimeTypeInfo(t1, [null]);
    value = t1.min$0(t1);
    O.expect(value, new O._DeepMatcher(1, 100, null), null, null, false);
    O.expect(new N.TestNumberEnumerable__testMin_closure(), C.Throws_null, null, null, false);
  },
  TestNumberEnumerable__testMax: function() {
    var t1, value;
    Y._metaRequireArgumentNotNullOrEmpty("source");
    t1 = new X._SimpleNumEnumerable([1, 2, 3]);
    H.setRuntimeTypeInfo(t1, [null]);
    value = t1.max$0(t1);
    O.expect(value, new O._DeepMatcher(3, 100, null), null, null, false);
    O.expect(new N.TestNumberEnumerable__testMax_closure(), C.Throws_null, null, null, false);
  },
  TestNumberEnumerable__testAverage: function() {
    var t1, value;
    Y._metaRequireArgumentNotNullOrEmpty("source");
    t1 = new X._SimpleNumEnumerable([1, 2, 3]);
    H.setRuntimeTypeInfo(t1, [null]);
    value = t1.average$0();
    O.expect(value, new O._DeepMatcher(2, 100, null), null, null, false);
    O.expect(new N.TestNumberEnumerable__testAverage_closure(), C.Throws_fgL, null, null, false);
  },
  TestHslColor_run: function() {
    N.group("HslColor", new N.TestHslColor_run_closure());
  },
  TestHslColor__testEquals: function() {
    var a, b, c;
    a = X.HslColor_HslColor(123, 1, 0.5);
    O.expect(a, new O._DeepMatcher(a, 100, null), null, null, false);
    O.expect(a, new O._IsSameAs(a), null, null, false);
    b = X.HslColor_HslColor(483, 1, 0.5);
    O.expect(b, new O._DeepMatcher(a, 100, null), null, null, false);
    O.expect(b, new O._IsNot(O.wrapMatcher(new O._IsSameAs(a))), null, null, false);
    c = X.HslColor_HslColor(1, 1, 0);
    O.expect(c, new O._IsNot(O.wrapMatcher(new O._DeepMatcher(a, 100, null))), null, null, false);
    O.expect(c, new O._IsNot(O.wrapMatcher(new O._IsSameAs(a))), null, null, false);
  },
  TestHslColor__testInvalid: function() {
    var t1, invalidNumber;
    O.expect(new N.TestHslColor__testInvalid_closure(), C.C__ReturnsNormally, null, null, false);
    for (t1 = new H.ListIterator(C.List_oaL, 4, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(C.List_oaL, 0)]); t1.moveNext$0();) {
      invalidNumber = t1._dev$_current;
      O.expect(new N.TestHslColor__testInvalid_closure0(invalidNumber), C.Throws__ArgumentError_ArgumentError, null, null, false);
      O.expect(new N.TestHslColor__testInvalid_closure1(invalidNumber), C.Throws__ArgumentError_ArgumentError, null, null, false);
      O.expect(new N.TestHslColor__testInvalid_closure2(invalidNumber), C.Throws__ArgumentError_ArgumentError, null, null, false);
      O.expect(new N.TestHslColor__testInvalid_closure3(invalidNumber), C.Throws__ArgumentError_ArgumentError, null, null, false);
    }
    O.expect(new N.TestHslColor__testInvalid_closure4(), C.Throws__ArgumentError_ArgumentError, null, null, false);
    O.expect(new N.TestHslColor__testInvalid_closure5(), C.Throws__ArgumentError_ArgumentError, null, null, false);
  },
  TestRgbColor_run: function() {
    N.group("RgbColor", new N.TestRgbColor_run_closure());
  },
  TestRgbColor__testEquals: function() {
    var a, b, c;
    a = X.RgbColor_RgbColor(0, 1, 255);
    O.expect(a, new O._DeepMatcher(a, 100, null), null, null, false);
    O.expect(a, new O._IsSameAs(a), null, null, false);
    b = X.RgbColor_RgbColor(0, 1, 255);
    O.expect(b, new O._DeepMatcher(a, 100, null), null, null, false);
    O.expect(b, new O._IsNot(O.wrapMatcher(new O._IsSameAs(a))), null, null, false);
    c = X.RgbColor_RgbColor(1, 2, 3);
    O.expect(c, new O._IsNot(O.wrapMatcher(new O._DeepMatcher(a, 100, null))), null, null, false);
    O.expect(c, new O._IsNot(O.wrapMatcher(new O._IsSameAs(a))), null, null, false);
  },
  TestRgbColor__testInvalid: function() {
    O.expect(new N.TestRgbColor__testInvalid_closure(), C.Throws__ArgumentError_ArgumentError, null, null, false);
    O.expect(new N.TestRgbColor__testInvalid_closure0(), C.Throws__ArgumentError_ArgumentError, null, null, false);
    O.expect(new N.TestRgbColor__testInvalid_closure1(), C.Throws__ArgumentError_ArgumentError, null, null, false);
  },
  TestRgbColor__testHslRoundTrip: function() {
    var colors, t1, rgb, rgb2, hslColors, hsl, hsl2, i, t2, t3, t4;
    colors = N.TestRgbColor__getCoreColors();
    for (t1 = new H.ListIterator(colors, 7, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(colors, 0)]); t1.moveNext$0();) {
      rgb = t1._dev$_current;
      rgb2 = rgb.toHsl$0().toRgb$0();
      O.expect(rgb2, typeof rgb === "string" ? new O._StringEqualsMatcher(rgb) : new O._DeepMatcher(rgb, 100, null), null, null, false);
    }
    hslColors = [X.HslColor_HslColor(0, 1, 0.75)];
    for (t1 = new H.ListIterator(hslColors, 1, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(hslColors, 0)]); t1.moveNext$0();) {
      hsl = t1._dev$_current;
      hsl2 = hsl.toRgb$0().toHsl$0();
      O.expect(hsl2.h, new O._IsCloseTo(hsl.get$h(), 0.001), null, null, false);
      O.expect(hsl2.s, new O._IsCloseTo(hsl.get$s(), 0.001), null, null, false);
      O.expect(hsl2.l, new O._IsCloseTo(hsl.get$l(), 0.001), null, null, false);
    }
    for (i = 0; i < 100; ++i) {
      t1 = $._botHelperRandom;
      if (t1 == null) {
        $._botHelperRandom = C.C__Random;
        t1 = C.C__Random;
      }
      t1.toString;
      t1 = Math.random() * 256 >>> 0;
      t2 = $._botHelperRandom;
      if (t2 == null) {
        $._botHelperRandom = C.C__Random;
        t2 = C.C__Random;
      }
      t2.toString;
      t2 = Math.random() * 256 >>> 0;
      t3 = $._botHelperRandom;
      if (t3 == null) {
        $._botHelperRandom = C.C__Random;
        t3 = C.C__Random;
      }
      t3.toString;
      t3 = Math.random() * 256 >>> 0;
      t4 = !C.JSInt_methods.get$isInfinite(t1) && !C.JSInt_methods.get$isNaN(t1);
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("r", "value was invalid"));
      t4 = t1 >= 0 && t1 <= 255;
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("r", "value was invalid"));
      t4 = !C.JSInt_methods.get$isInfinite(t2) && !C.JSInt_methods.get$isNaN(t2);
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("g", "value was invalid"));
      t4 = t2 >= 0 && t2 <= 255;
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("g", "value was invalid"));
      t4 = !C.JSInt_methods.get$isInfinite(t3) && !C.JSInt_methods.get$isNaN(t3);
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("b", "value was invalid"));
      t4 = t3 >= 0 && t3 <= 255;
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("b", "value was invalid"));
      t1 = new X.RgbColor(t1, t2, t3);
      rgb2 = t1.toHsl$0().toRgb$0();
      O.expect(rgb2, new O._DeepMatcher(t1, 100, null), null, null, false);
    }
  },
  TestRgbColor__testHexRoundTrip: function() {
    var colors, t1, rgb, rgb2, i, t2, t3, t4;
    colors = N.TestRgbColor__getCoreColors();
    for (t1 = new H.ListIterator(colors, 7, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(colors, 0)]); t1.moveNext$0();) {
      rgb = t1._dev$_current;
      rgb2 = X.RgbColor_RgbColor$fromHex(rgb.toHex$0());
      O.expect(rgb2, typeof rgb === "string" ? new O._StringEqualsMatcher(rgb) : new O._DeepMatcher(rgb, 100, null), null, null, false);
    }
    for (i = 0; i < 100; ++i) {
      t1 = $._botHelperRandom;
      if (t1 == null) {
        $._botHelperRandom = C.C__Random;
        t1 = C.C__Random;
      }
      t1.toString;
      t1 = Math.random() * 256 >>> 0;
      t2 = $._botHelperRandom;
      if (t2 == null) {
        $._botHelperRandom = C.C__Random;
        t2 = C.C__Random;
      }
      t2.toString;
      t2 = Math.random() * 256 >>> 0;
      t3 = $._botHelperRandom;
      if (t3 == null) {
        $._botHelperRandom = C.C__Random;
        t3 = C.C__Random;
      }
      t3.toString;
      t3 = Math.random() * 256 >>> 0;
      t4 = !C.JSInt_methods.get$isInfinite(t1) && !C.JSInt_methods.get$isNaN(t1);
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("r", "value was invalid"));
      t4 = t1 >= 0 && t1 <= 255;
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("r", "value was invalid"));
      t4 = !C.JSInt_methods.get$isInfinite(t2) && !C.JSInt_methods.get$isNaN(t2);
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("g", "value was invalid"));
      t4 = t2 >= 0 && t2 <= 255;
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("g", "value was invalid"));
      t4 = !C.JSInt_methods.get$isInfinite(t3) && !C.JSInt_methods.get$isNaN(t3);
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("b", "value was invalid"));
      t4 = t3 >= 0 && t3 <= 255;
      if (!t4)
        H.throwExpression(Q.DetailedArgumentError$("b", "value was invalid"));
      t1 = new X.RgbColor(t1, t2, t3);
      rgb2 = X.RgbColor_RgbColor$fromHex(t1.toHex$0());
      O.expect(rgb2, new O._DeepMatcher(t1, 100, null), null, null, false);
    }
  },
  TestRgbColor__testFromHex: function() {
    var knownSet = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, X.RgbColor);
    knownSet.$indexSet(knownSet, "#ffffff", X.RgbColor_RgbColor(255, 255, 255));
    knownSet.$indexSet(knownSet, "#FFFFFF", X.RgbColor_RgbColor(255, 255, 255));
    knownSet.$indexSet(knownSet, "#000000", X.RgbColor_RgbColor(0, 0, 0));
    knownSet.$indexSet(knownSet, "#FF0000", X.RgbColor_RgbColor(255, 0, 0));
    knownSet.$indexSet(knownSet, "#ff0000", X.RgbColor_RgbColor(255, 0, 0));
    knownSet.$indexSet(knownSet, "#00ff00", X.RgbColor_RgbColor(0, 255, 0));
    knownSet.$indexSet(knownSet, "#0000ff", X.RgbColor_RgbColor(0, 0, 255));
    knownSet.$indexSet(knownSet, "#336699", X.RgbColor_RgbColor(51, 102, 153));
    knownSet.forEach$1(knownSet, new N.TestRgbColor__testFromHex_closure());
  },
  TestRgbColor__testInvalidHex: function() {
    H.IterableMixinWorkaround_forEach(["aoeu", "ffffff", "fff", "#ffffffff", "white", "", null], new N.TestRgbColor__testInvalidHex_closure());
  },
  TestRgbColor__getCoreColors: function() {
    return [X.RgbColor_RgbColor(0, 0, 0), X.RgbColor_RgbColor(1, 1, 1), X.RgbColor_RgbColor(42, 29, 123), X.RgbColor_RgbColor(42, 29, 120), X.RgbColor_RgbColor(254, 254, 254), X.RgbColor_RgbColor(255, 255, 255), X.RgbColor_RgbColor(245, 255, 193)];
  },
  TestAffineTransform_run: function() {
    N.group("AffineTransform", new N.TestAffineTransform_run_closure());
  },
  TestCoordinate_run: function() {
    N.group("Coordinate", new N.TestCoordinate_run_closure());
  },
  TestBox_run: function() {
    N.group("Box", new N.TestBox_run_closure());
  },
  TestBox__testEquals: function() {
    O.expect(C.Box_0_0_1_1, new O._DeepMatcher(C.Box_0_0_1_1, 100, null), null, null, false);
    O.expect(C.Box_0_0_1_1, new O._IsSameAs(C.Box_0_0_1_1), null, null, false);
    O.expect(C.Box_0_0_1_1, new O._DeepMatcher(C.Box_0_0_1_1, 100, null), null, null, false);
    O.expect(C.Box_0_0_1_1, new O._IsSameAs(C.Box_0_0_1_1), null, null, false);
    var c = new X.Box(0, 0, 1, 1);
    H.setRuntimeTypeInfo(c, [null]);
    O.expect(c, new O._DeepMatcher(C.Box_0_0_1_1, 100, null), null, null, false);
    O.expect(c, new O._IsNot(O.wrapMatcher(new O._IsSameAs(C.Box_0_0_1_1))), null, null, false);
  },
  TestBox__testSizeLocation: function() {
    var a, b;
    a = new X.Box(1, 2, 3, 4);
    H.setRuntimeTypeInfo(a, [null]);
    H.setRuntimeTypeInfo(new X.Coordinate(1, 2), [null]);
    b = new X.Box(1, 2, 3, 4);
    H.setRuntimeTypeInfo(b, [null]);
    O.expect(b, new O._DeepMatcher(a, 100, null), null, null, false);
  },
  TestBox__testValid: function() {
    var validLocations, validSizes, invalidLocations, invalidSizes, t1, a, x, t2, y, t3, w, t4, h, t5, badLocation, t6, badSize;
    validLocations = [-1, 0, 1];
    validSizes = [0, 1];
    invalidLocations = [0 / 0, -1 / 0, 1 / 0, null];
    invalidSizes = [0 / 0, -1 / 0, 1 / 0, null, -1];
    for (t1 = new H.ListIterator(validLocations, 3, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(validLocations, 0)]), a = null; t1.moveNext$0();) {
      x = t1._dev$_current;
      t2 = new H.ListIterator(validLocations, 3, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(validLocations, 0)];
      for (; t2.moveNext$0();) {
        y = t2._dev$_current;
        t3 = new H.ListIterator(validSizes, 2, 0, null);
        t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(validSizes, 0)];
        for (; t3.moveNext$0();) {
          w = t3._dev$_current;
          t4 = new H.ListIterator(validSizes, 2, 0, null);
          t4.$builtinTypeInfo = [H.getTypeArgumentByIndex(validSizes, 0)];
          for (; t4.moveNext$0();) {
            h = t4._dev$_current;
            a = new X.Box(x, y, w, h);
            a.$builtinTypeInfo = [null];
            new X.Coordinate(x, y).$builtinTypeInfo = [null];
            if (x != null) {
              t5 = J.getInterceptor$n(x);
              t5 = !t5.get$isInfinite(x) && !t5.get$isNaN(x);
            } else
              t5 = false;
            if (t5)
              if (y != null) {
                t5 = J.getInterceptor$n(y);
                t5 = !t5.get$isInfinite(y) && !t5.get$isNaN(y);
              } else
                t5 = false;
            else
              t5 = false;
            if (t5) {
              if (w != null) {
                t5 = J.getInterceptor$n(w);
                t5 = !t5.get$isInfinite(w) && !t5.get$isNaN(w);
              } else
                t5 = false;
              if (t5) {
                if (h != null) {
                  t5 = J.getInterceptor$n(h);
                  t5 = !t5.get$isInfinite(h) && !t5.get$isNaN(h);
                } else
                  t5 = false;
                t5 = t5 && J.$ge$n(w, 0) && J.$ge$n(h, 0);
              } else
                t5 = false;
            } else
              t5 = false;
            O.expect(t5, C.C__IsTrue, null, null, false);
            t5 = new H.ListIterator(invalidLocations, 4, 0, null);
            t5.$builtinTypeInfo = [H.getTypeArgumentByIndex(invalidLocations, 0)];
            for (; t5.moveNext$0();) {
              badLocation = t5._dev$_current;
              new X.Box(badLocation, y, w, h).$builtinTypeInfo = [null];
              new X.Coordinate(badLocation, y).$builtinTypeInfo = [null];
              if (badLocation != null) {
                t6 = J.getInterceptor$n(badLocation);
                t6 = !t6.get$isInfinite(badLocation) && !t6.get$isNaN(badLocation);
              } else
                t6 = false;
              if (t6)
                if (y != null) {
                  t6 = J.getInterceptor$n(y);
                  t6 = !t6.get$isInfinite(y) && !t6.get$isNaN(y);
                } else
                  t6 = false;
              else
                t6 = false;
              if (t6) {
                if (w != null) {
                  t6 = J.getInterceptor$n(w);
                  t6 = !t6.get$isInfinite(w) && !t6.get$isNaN(w);
                } else
                  t6 = false;
                if (t6) {
                  if (h != null) {
                    t6 = J.getInterceptor$n(h);
                    t6 = !t6.get$isInfinite(h) && !t6.get$isNaN(h);
                  } else
                    t6 = false;
                  t6 = t6 && J.$ge$n(w, 0) && J.$ge$n(h, 0);
                } else
                  t6 = false;
              } else
                t6 = false;
              O.expect(t6, C.C__IsFalse, null, null, false);
              a = new X.Box(x, badLocation, w, h);
              a.$builtinTypeInfo = [null];
              new X.Coordinate(x, badLocation).$builtinTypeInfo = [null];
              if (x != null) {
                t6 = J.getInterceptor$n(x);
                t6 = !t6.get$isInfinite(x) && !t6.get$isNaN(x);
              } else
                t6 = false;
              if (t6)
                if (badLocation != null) {
                  t6 = J.getInterceptor$n(badLocation);
                  t6 = !t6.get$isInfinite(badLocation) && !t6.get$isNaN(badLocation);
                } else
                  t6 = false;
              else
                t6 = false;
              if (t6) {
                if (w != null) {
                  t6 = J.getInterceptor$n(w);
                  t6 = !t6.get$isInfinite(w) && !t6.get$isNaN(w);
                } else
                  t6 = false;
                if (t6) {
                  if (h != null) {
                    t6 = J.getInterceptor$n(h);
                    t6 = !t6.get$isInfinite(h) && !t6.get$isNaN(h);
                  } else
                    t6 = false;
                  t6 = t6 && J.$ge$n(w, 0) && J.$ge$n(h, 0);
                } else
                  t6 = false;
              } else
                t6 = false;
              O.expect(t6, C.C__IsFalse, null, null, false);
            }
            t5 = new H.ListIterator(invalidSizes, 5, 0, null);
            t5.$builtinTypeInfo = [H.getTypeArgumentByIndex(invalidSizes, 0)];
            for (; t5.moveNext$0();) {
              badSize = t5._dev$_current;
              new X.Box(x, y, badSize, h).$builtinTypeInfo = [null];
              new X.Coordinate(x, y).$builtinTypeInfo = [null];
              if (x != null) {
                t6 = J.getInterceptor$n(x);
                t6 = !t6.get$isInfinite(x) && !t6.get$isNaN(x);
              } else
                t6 = false;
              if (t6)
                if (y != null) {
                  t6 = J.getInterceptor$n(y);
                  t6 = !t6.get$isInfinite(y) && !t6.get$isNaN(y);
                } else
                  t6 = false;
              else
                t6 = false;
              if (t6) {
                if (badSize != null) {
                  t6 = J.getInterceptor$n(badSize);
                  t6 = !t6.get$isInfinite(badSize) && !t6.get$isNaN(badSize);
                } else
                  t6 = false;
                if (t6) {
                  if (h != null) {
                    t6 = J.getInterceptor$n(h);
                    t6 = !t6.get$isInfinite(h) && !t6.get$isNaN(h);
                  } else
                    t6 = false;
                  t6 = t6 && J.$ge$n(badSize, 0) && J.$ge$n(h, 0);
                } else
                  t6 = false;
              } else
                t6 = false;
              O.expect(t6, C.C__IsFalse, null, null, false);
              a = new X.Box(x, y, w, badSize);
              a.$builtinTypeInfo = [null];
              new X.Coordinate(x, y).$builtinTypeInfo = [null];
              if (x != null) {
                t6 = J.getInterceptor$n(x);
                t6 = !t6.get$isInfinite(x) && !t6.get$isNaN(x);
              } else
                t6 = false;
              if (t6)
                if (y != null) {
                  t6 = J.getInterceptor$n(y);
                  t6 = !t6.get$isInfinite(y) && !t6.get$isNaN(y);
                } else
                  t6 = false;
              else
                t6 = false;
              if (t6) {
                if (w != null) {
                  t6 = J.getInterceptor$n(w);
                  t6 = !t6.get$isInfinite(w) && !t6.get$isNaN(w);
                } else
                  t6 = false;
                if (t6) {
                  if (badSize != null) {
                    t6 = J.getInterceptor$n(badSize);
                    t6 = !t6.get$isInfinite(badSize) && !t6.get$isNaN(badSize);
                  } else
                    t6 = false;
                  t6 = t6 && J.$ge$n(w, 0) && J.$ge$n(badSize, 0);
                } else
                  t6 = false;
              } else
                t6 = false;
              O.expect(t6, C.C__IsFalse, null, null, false);
            }
          }
        }
      }
    }
  },
  TestVector_run: function() {
    N.group("Vector", new N.TestVector_run_closure());
  },
  TestTuple_run: function() {
    N.test("Tuple", new N.TestTuple_run_closure());
    N.test("Tuple3", new N.TestTuple_run_closure0());
  },
  TestUtil_run: function() {
    N.group("Util", new N.TestUtil_run_closure());
  },
  TestUtil__testSplitLines: function() {
    var t1, i, t2, t3;
    O.expect(new N.TestUtil__testSplitLines_closure(), C.Throws_gT2, null, null, false);
    for (t1 = new H.ListIterator(C.List_Avr, 6, 0, null), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(C.List_Avr, 0)]); t1.moveNext$0();) {
      i = t1._dev$_current;
      t2 = X.Util_splitLines(i.get$item1());
      t3 = i.get$item2();
      O.expect(t2, new O._DeepMatcher(t3, 100, null), null, null, false);
    }
  },
  TestUtil__testGetHashCode: function() {
    O.expect(new N.TestUtil__testGetHashCode_closure(), C.Throws_gT2, null, null, false);
    N.TestUtil__hashCodeFun([], 0);
    N.TestUtil__hashCodeFun([null], 0);
    N.TestUtil__hashCodeFun([null, null], 0);
    N.TestUtil__hashCodeFun([1], 307143837);
    N.TestUtil__hashCodeFun([1, 2], 93096440);
    N.TestUtil__hashCodeFun([2, 1], 405401106);
    N.TestUtil__hashCodeFun([null, 1], 307143837);
    N.TestUtil__hashCodeFun([null, null, 1], 307143837);
    N.TestUtil__hashCodeFun([1, null], 15319219);
  },
  TestUtil__hashCodeFun: function(items, expectedValue) {
    var t1, hashCode;
    t1 = new H.MappedListIterable(items, new N.TestUtil__hashCodeFun_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    hashCode = X.Util_getHashCode(t1);
    O.expect(hashCode, new O._DeepMatcher(expectedValue, 100, null), null, null, false);
  },
  main_closure: {
    "": "Closure;",
    call$0: function() {
      N.group("expandStream", Y.main0$closure);
      N.group("getDelayedResult", Z.main1$closure);
      N.group("ThrottledStream", F.main2$closure);
      N.group("graph", new N.main__closure());
      N.TestTuple_run();
      N.TestEnumerable_run();
      N.TestSequence_run();
      N.TestNumberEnumerable_run();
      N.TestCollectionUtil_run();
      N.TestArray2d_run();
      N.TestCoordinate_run();
      N.TestBox_run();
      N.TestVector_run();
      N.TestAffineTransform_run();
      N.TestUtil_run();
      N.TestCloneable_run();
      N.TestEvents_run();
      N.TestRgbColor_run();
      N.TestHslColor_run();
      N.test("StringReader", N._testStringReader$closure);
      N.group("attached", new N.main__closure0());
    },
    $isFunction: true,
    $is_void_: true
  },
  main__closure: {
    "": "Closure;",
    call$0: function() {
      N.group("topological", G.main3$closure);
      N.group("tarjan", T.main4$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  main__closure0: {
    "": "Closure;",
    call$0: function() {
      N.TestAttachedEvents_run();
      N.TestProperties_run();
      N.test("PropertyObject, EventHandle", N.TestPropertyEventIntegration_doTest$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestAttachedEvents: {
    "": "AttachableObject;_propertyValues,_eventHandlers,_disposed",
    static: {"": "TestAttachedEvents__testEvent1,TestAttachedEvents__testEvent2", TestAttachedEvents_run: function() {
        N.group("AttachableEvent", new N.TestAttachedEvents_run_closure());
      }, TestAttachedEvents__testRemove: function() {
        var obj, watcher1, t1, h1;
        obj = new N.TestAttachedEvents(P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object), P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
        watcher1 = new Y.EventWatcher(null, 0);
        H.setRuntimeTypeInfo(watcher1, [X.EventArgs]);
        t1 = $.get$TestAttachedEvents__testEvent1();
        t1.toString;
        O.expect(obj._hasSubscribers$1(t1), false, null, null, false);
        t1.toString;
        h1 = obj._getStream$1(t1).listen$1(watcher1.get$handler());
        t1.toString;
        O.expect(obj._hasSubscribers$1(t1), true, null, null, false);
        h1.cancel$0();
        t1.toString;
        O.expect(obj._hasSubscribers$1(t1), false, null, null, false);
      }, TestAttachedEvents__testWholeDeal: function() {
        var watcher1, watcher2, obj, t1, h1, t2, h2, t3, h3;
        watcher1 = new Y.EventWatcher(null, 0);
        H.setRuntimeTypeInfo(watcher1, [X.EventArgs]);
        watcher2 = new Y.EventWatcher(null, 0);
        H.setRuntimeTypeInfo(watcher2, [X.EventArgs]);
        obj = new N.TestAttachedEvents(P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object), P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
        t1 = $.get$TestAttachedEvents__testEvent1();
        t1.toString;
        h1 = obj._getStream$1(t1).listen$1(watcher1.get$handler());
        t2 = $.get$TestAttachedEvents__testEvent2();
        t2.toString;
        h2 = obj._getStream$1(t2).listen$1(watcher2.get$handler());
        t1.toString;
        obj._fireEvent$2(t1, C.C_EventArgs);
        t3 = watcher1._eventCount;
        O.expect(t3, new O._DeepMatcher(1, 100, null), null, null, false);
        t3 = watcher2._eventCount;
        O.expect(t3, new O._DeepMatcher(0, 100, null), null, null, false);
        t2.toString;
        obj._fireEvent$2(t2, C.C_EventArgs);
        t3 = watcher1._eventCount;
        O.expect(t3, new O._DeepMatcher(1, 100, null), null, null, false);
        t3 = watcher2._eventCount;
        O.expect(t3, new O._DeepMatcher(1, 100, null), null, null, false);
        t1.toString;
        h3 = obj._getStream$1(t1).listen$1(watcher2.get$handler());
        h1.cancel$0();
        t1.toString;
        O.expect(obj._hasSubscribers$1(t1), C.C__IsTrue, null, null, false);
        t1.toString;
        obj._fireEvent$2(t1, C.C_EventArgs);
        t3 = watcher1._eventCount;
        O.expect(t3, new O._DeepMatcher(1, 100, null), null, null, false);
        t3 = watcher2._eventCount;
        O.expect(t3, new O._DeepMatcher(2, 100, null), null, null, false);
        t2.toString;
        O.expect(obj._hasSubscribers$1(t2), C.C__IsTrue, null, null, false);
        h2.cancel$0();
        t2.toString;
        O.expect(obj._hasSubscribers$1(t2), C.C__IsFalse, null, null, false);
        t1.toString;
        O.expect(obj._hasSubscribers$1(t1), C.C__IsTrue, null, null, false);
        h3.cancel$0();
        t1.toString;
        O.expect(obj._hasSubscribers$1(t1), C.C__IsFalse, null, null, false);
      }}
  },
  TestAttachedEvents_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("whole deal", N.TestAttachedEvents__testWholeDeal$closure);
      N.test("removeHandler", N.TestAttachedEvents__testRemove$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestProperties: {
    "": "AttachableObject;_propertyValues,_eventHandlers,_disposed",
    static: {TestProperties_run: function() {
        N.group("PropertyObject", new N.TestProperties_run_closure());
      }, TestProperties_testFactories: function(prop, setValue, propFactoryValue) {
        var wodWatcher, object, t1, t2, propFactory;
        wodWatcher = new Y.EventWatcher(null, 0);
        H.setRuntimeTypeInfo(wodWatcher, [X.PropertyChangedEventArgs]);
        object = new N.TestProperties(P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object), P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
        object._getStream$1(prop).listen$1(wodWatcher.get$handler());
        t1 = prop.get$1(object);
        t2 = prop.defaultValue;
        O.expect(t1, new O._DeepMatcher(t2, 100, null), null, null, false);
        t1 = object._getValueOrUndefined$3(prop, object, null);
        O.expect(t1, new O._DeepMatcher(C.C__UndefinedValue, 100, null), null, null, false);
        t1 = wodWatcher._eventCount;
        O.expect(t1, new O._DeepMatcher(0, 100, null), null, null, false);
        object._bot$_set$2(prop, setValue);
        t1 = prop.get$1(object);
        O.expect(t1, new O._DeepMatcher(setValue, 100, null), null, null, false);
        t1 = object._getValueOrUndefined$3(prop, object, null);
        O.expect(t1, new O._DeepMatcher(setValue, 100, null), null, null, false);
        t1 = wodWatcher._eventCount;
        O.expect(t1, new O._DeepMatcher(1, 100, null), null, null, false);
        propFactory = new N.TestProperties_testFactories_closure(propFactoryValue);
        t1 = prop.get$2(object, propFactory);
        O.expect(t1, new O._DeepMatcher(setValue, 100, null), null, null, false);
        t1 = object._getValueOrUndefined$3(prop, object, null);
        O.expect(t1, new O._DeepMatcher(setValue, 100, null), null, null, false);
        t1 = wodWatcher._eventCount;
        O.expect(t1, new O._DeepMatcher(1, 100, null), null, null, false);
        object._remove$1(prop);
        t1 = wodWatcher._eventCount;
        O.expect(t1, new O._DeepMatcher(2, 100, null), null, null, false);
        t1 = prop.get$1(object);
        O.expect(t1, new O._DeepMatcher(t2, 100, null), null, null, false);
        t1 = object._getValueOrUndefined$3(prop, object, null);
        O.expect(t1, new O._DeepMatcher(C.C__UndefinedValue, 100, null), null, null, false);
        t1 = prop.get$2(object, propFactory);
        O.expect(t1, new O._DeepMatcher(propFactoryValue, 100, null), null, null, false);
        t1 = object._getValueOrUndefined$3(prop, object, null);
        O.expect(t1, new O._DeepMatcher(propFactoryValue, 100, null), null, null, false);
        t1 = wodWatcher._eventCount;
        O.expect(t1, new O._DeepMatcher(3, 100, null), null, null, false);
      }}
  },
  TestProperties_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("without default", new N.TestProperties_run__closure());
      N.test("with factories", new N.TestProperties_run__closure0());
      N.test("with listeners", new N.TestProperties_run__closure1());
      N.test("with default", new N.TestProperties_run__closure2());
    },
    $isFunction: true,
    $is_void_: true
  },
  TestProperties_run__closure: {
    "": "Closure;",
    call$0: function() {
      var testProperty, t1, object, t2;
      testProperty = new X.Property(null, "Test Property");
      H.setRuntimeTypeInfo(testProperty, [null]);
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object);
      object = new N.TestProperties(t1, P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
      O.expect(testProperty.get$1(object), C.C__IsNull, null, null, false);
      t2 = object._getValueOrUndefined$3(testProperty, object, null);
      O.expect(t2, new O._DeepMatcher(C.C__UndefinedValue, 100, null), null, null, false);
      if (object._disposed)
        H.throwExpression(X.DisposedError$());
      O.expect(t1.containsKey$1(testProperty), C.C__IsFalse, null, null, false);
      object._bot$_set$2(testProperty, "the foo!");
      t2 = testProperty.get$1(object);
      O.expect(t2, new O._StringEqualsMatcher("the foo!"), null, null, false);
      if (object._disposed)
        H.throwExpression(X.DisposedError$());
      O.expect(t1.containsKey$1(testProperty), C.C__IsTrue, null, null, false);
      object._remove$1(testProperty);
      O.expect(testProperty.get$1(object), C.C__IsNull, null, null, false);
      t2 = object._getValueOrUndefined$3(testProperty, object, null);
      O.expect(t2, new O._DeepMatcher(C.C__UndefinedValue, 100, null), null, null, false);
      if (object._disposed)
        H.throwExpression(X.DisposedError$());
      O.expect(t1.containsKey$1(testProperty), C.C__IsFalse, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestProperties_run__closure0: {
    "": "Closure;",
    call$0: function() {
      var prop = new X.Property(null, "withoutDefault");
      H.setRuntimeTypeInfo(prop, [J.JSInt]);
      N.TestProperties_testFactories(prop, 43, 18);
      N.TestProperties_testFactories(prop, 43, null);
      N.TestProperties_testFactories(prop, null, 18);
      N.TestProperties_testFactories(prop, null, null);
      prop = new X.Property(24, "withDefault");
      H.setRuntimeTypeInfo(prop, [J.JSInt]);
      N.TestProperties_testFactories(prop, 43, 18);
      N.TestProperties_testFactories(prop, 43, 24);
      N.TestProperties_testFactories(prop, 43, null);
      N.TestProperties_testFactories(prop, null, 18);
      N.TestProperties_testFactories(prop, null, 24);
      N.TestProperties_testFactories(prop, null, null);
      N.TestProperties_testFactories(prop, 24, 18);
      N.TestProperties_testFactories(prop, 24, 24);
      N.TestProperties_testFactories(prop, 24, null);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestProperties_run__closure1: {
    "": "Closure;",
    call$0: function() {
      var testProperty, t1, object, t2, h1, g1, h2, g2;
      testProperty = new X.Property(null, "Test Property");
      H.setRuntimeTypeInfo(testProperty, [J.JSString]);
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object);
      object = new N.TestProperties(t1, P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
      O.expect(testProperty.get$1(object), C.C__IsNull, null, null, false);
      t2 = object._getValueOrUndefined$3(testProperty, object, null);
      O.expect(t2, new O._DeepMatcher(C.C__UndefinedValue, 100, null), null, null, false);
      if (object._disposed)
        H.throwExpression(X.DisposedError$());
      O.expect(t1.containsKey$1(testProperty), C.C__IsFalse, null, null, false);
      h1 = new Y.EventWatcher(null, 0);
      H.setRuntimeTypeInfo(h1, [X.PropertyChangedEventArgs]);
      g1 = object._getStream$1(testProperty).listen$1(h1.get$handler());
      t1 = h1._eventCount;
      O.expect(t1, new O._DeepMatcher(0, 100, null), null, null, false);
      object._bot$_set$2(testProperty, "the foo!");
      t1 = h1._eventCount;
      O.expect(t1, new O._DeepMatcher(1, 100, null), null, null, false);
      object._remove$1(testProperty);
      t1 = h1._eventCount;
      O.expect(t1, new O._DeepMatcher(2, 100, null), null, null, false);
      h2 = new Y.EventWatcher(null, 0);
      H.setRuntimeTypeInfo(h2, [X.PropertyChangedEventArgs]);
      g2 = object._getStream$1(testProperty).listen$1(h2.get$handler());
      t1 = h2._eventCount;
      O.expect(t1, new O._DeepMatcher(0, 100, null), null, null, false);
      object._bot$_set$2(testProperty, "the foo!");
      t1 = h1._eventCount;
      O.expect(t1, new O._DeepMatcher(3, 100, null), null, null, false);
      t1 = h2._eventCount;
      O.expect(t1, new O._DeepMatcher(1, 100, null), null, null, false);
      g1.cancel$0();
      object._remove$1(testProperty);
      t1 = h1._eventCount;
      O.expect(t1, new O._DeepMatcher(3, 100, null), null, null, false);
      t1 = h2._eventCount;
      O.expect(t1, new O._DeepMatcher(2, 100, null), null, null, false);
      g2.cancel$0();
      object._bot$_set$2(testProperty, "the bar!");
      t1 = h1._eventCount;
      O.expect(t1, new O._DeepMatcher(3, 100, null), null, null, false);
      t1 = h2._eventCount;
      O.expect(t1, new O._DeepMatcher(2, 100, null), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestProperties_run__closure2: {
    "": "Closure;",
    call$0: function() {
      var testProperty, t1, object, t2;
      testProperty = new X.Property(42, "Test Property");
      H.setRuntimeTypeInfo(testProperty, [J.JSInt]);
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object);
      object = new N.TestProperties(t1, P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
      t2 = testProperty.get$1(object);
      O.expect(t2, new O._DeepMatcher(42, 100, null), null, null, false);
      t2 = object._getValueOrUndefined$3(testProperty, object, null);
      O.expect(t2, new O._DeepMatcher(C.C__UndefinedValue, 100, null), null, null, false);
      if (object._disposed)
        H.throwExpression(X.DisposedError$());
      O.expect(t1.containsKey$1(testProperty), C.C__IsFalse, null, null, false);
      object._bot$_set$2(testProperty, 57);
      t2 = testProperty.get$1(object);
      O.expect(t2, new O._DeepMatcher(57, 100, null), null, null, false);
      t2 = object._getValueOrUndefined$3(testProperty, object, null);
      O.expect(t2, new O._DeepMatcher(57, 100, null), null, null, false);
      if (object._disposed)
        H.throwExpression(X.DisposedError$());
      O.expect(t1.containsKey$1(testProperty), C.C__IsTrue, null, null, false);
      object._remove$1(testProperty);
      t2 = testProperty.get$1(object);
      O.expect(t2, new O._DeepMatcher(42, 100, null), null, null, false);
      t2 = object._getValueOrUndefined$3(testProperty, object, null);
      O.expect(t2, new O._DeepMatcher(C.C__UndefinedValue, 100, null), null, null, false);
      if (object._disposed)
        H.throwExpression(X.DisposedError$());
      O.expect(t1.containsKey$1(testProperty), C.C__IsFalse, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestProperties_testFactories_closure: {
    "": "Closure;propFactoryValue_0",
    call$1: function(obj) {
      return this.propFactoryValue_0;
    },
    $isFunction: true,
    $is_args1: true
  },
  TestPropertyEventIntegration: {
    "": "AttachableObject;_nameChangedEventHandle,_ageChangedEventHandle,_propertyValues,_eventHandlers,_disposed",
    get$name: function(_) {
      return $.get$TestPropertyEventIntegration__nameProperty().get$1(this);
    },
    TestPropertyEventIntegration$0: function() {
      var t1 = $.get$TestPropertyEventIntegration__nameProperty();
      t1.toString;
      this._getStream$1(t1).listen$1(new N.TestPropertyEventIntegration_closure(this));
      t1 = $.get$TestPropertyEventIntegration__ageProperty();
      t1.toString;
      this._getStream$1(t1).listen$1(new N.TestPropertyEventIntegration_closure0(this));
    },
    static: {"": "TestPropertyEventIntegration__nameProperty,TestPropertyEventIntegration__ageProperty", TestPropertyEventIntegration$: function() {
        var t1, t2;
        t1 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
        H.setRuntimeTypeInfo(t1, [X.EventArgs]);
        t2 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
        H.setRuntimeTypeInfo(t2, [X.EventArgs]);
        t2 = new N.TestPropertyEventIntegration(t1, t2, P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object), P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
        t2.TestPropertyEventIntegration$0();
        return t2;
      }, TestPropertyEventIntegration_doTest: function() {
        var nh, ah, obj, t1, t2, t3;
        nh = new Y.EventWatcher(null, 0);
        H.setRuntimeTypeInfo(nh, [X.EventArgs]);
        ah = new Y.EventWatcher(null, 0);
        H.setRuntimeTypeInfo(ah, [X.EventArgs]);
        obj = N.TestPropertyEventIntegration$();
        t1 = obj._nameChangedEventHandle._bot$_controller;
        t2 = new P._BroadcastStream(t1);
        H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
        t2.listen$1(nh.get$handler());
        t2 = obj._ageChangedEventHandle._bot$_controller;
        t1 = new P._BroadcastStream(t2);
        H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(t2, 0)]);
        t1.listen$1(ah.get$handler());
        t1 = $.get$TestPropertyEventIntegration__nameProperty();
        O.expect(t1.get$1(obj), C.C__IsNull, null, null, false);
        t2 = $.get$TestPropertyEventIntegration__ageProperty();
        t3 = t2.get$1(obj);
        O.expect(t3, new O._DeepMatcher(0, 100, null), null, null, false);
        t3 = nh._eventCount;
        O.expect(t3, new O._DeepMatcher(0, 100, null), null, null, false);
        t3 = ah._eventCount;
        O.expect(t3, new O._DeepMatcher(0, 100, null), null, null, false);
        obj._bot$_set$2(t1, "Bob");
        t3 = t1.get$1(obj);
        O.expect(t3, new O._StringEqualsMatcher("Bob"), null, null, false);
        t3 = t2.get$1(obj);
        O.expect(t3, new O._DeepMatcher(0, 100, null), null, null, false);
        t3 = nh._eventCount;
        O.expect(t3, new O._DeepMatcher(1, 100, null), null, null, false);
        t3 = ah._eventCount;
        O.expect(t3, new O._DeepMatcher(0, 100, null), null, null, false);
        obj._bot$_set$2(t1, "Bob");
        t3 = t1.get$1(obj);
        O.expect(t3, new O._StringEqualsMatcher("Bob"), null, null, false);
        t3 = t2.get$1(obj);
        O.expect(t3, new O._DeepMatcher(0, 100, null), null, null, false);
        t3 = nh._eventCount;
        O.expect(t3, new O._DeepMatcher(2, 100, null), null, null, false);
        t3 = ah._eventCount;
        O.expect(t3, new O._DeepMatcher(0, 100, null), null, null, false);
        obj._bot$_set$2(t2, 19);
        t3 = t1.get$1(obj);
        O.expect(t3, new O._StringEqualsMatcher("Bob"), null, null, false);
        t3 = t2.get$1(obj);
        O.expect(t3, new O._DeepMatcher(19, 100, null), null, null, false);
        t3 = nh._eventCount;
        O.expect(t3, new O._DeepMatcher(2, 100, null), null, null, false);
        t3 = ah._eventCount;
        O.expect(t3, new O._DeepMatcher(1, 100, null), null, null, false);
        obj._remove$1(t1);
        obj._remove$1(t2);
        O.expect(t1.get$1(obj), C.C__IsNull, null, null, false);
        t1 = t2.get$1(obj);
        O.expect(t1, new O._DeepMatcher(0, 100, null), null, null, false);
        t1 = nh._eventCount;
        O.expect(t1, new O._DeepMatcher(3, 100, null), null, null, false);
        t1 = ah._eventCount;
        O.expect(t1, new O._DeepMatcher(2, 100, null), null, null, false);
        if (obj._disposed)
          H.throwExpression(X.DisposedError$());
        obj._disposed = true;
        obj.disposeInternal$0();
      }}
  },
  TestPropertyEventIntegration_closure: {
    "": "Closure;this_0",
    call$1: function(args) {
      var t1 = this.this_0._nameChangedEventHandle._bot$_controller;
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(C.C_EventArgs);
    },
    $isFunction: true,
    $is_args1: true
  },
  TestPropertyEventIntegration_closure0: {
    "": "Closure;this_1",
    call$1: function(args) {
      var t1 = this.this_1._ageChangedEventHandle._bot$_controller;
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(C.C_EventArgs);
    },
    $isFunction: true,
    $is_args1: true
  },
  TestArray2d_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("test collection", N.TestArray2d__testCollectionEquals$closure);
      N.test("readonlyFrom ctor params", N.TestArray2d__testReadonlyFromCtorParams$closure);
      N.test("set/get", N.TestArray2d__testSetGet$closure);
      N.test("getAdjacent", N.TestArray2d__testGetAdjacent$closure);
      N.test("default ctor", N.TestArray2d__testDefaultCtor$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestArray2d__testReadonlyFromCtorParams_closure: {
    "": "Closure;",
    call$0: function() {
      return X.Array2d_Array2d$readonlyFrom(null, [0, 1, 2, 3], J.JSInt);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestArray2d__testReadonlyFromCtorParams_closure0: {
    "": "Closure;",
    call$0: function() {
      return X.Array2d_Array2d$readonlyFrom(2, null, J.JSInt);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestArray2d__testReadonlyFromCtorParams_closure1: {
    "": "Closure;",
    call$0: function() {
      return X.Array2d_Array2d$readonlyFrom(0, [0, 1, 2, 3], J.JSInt);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestArray2d__testReadonlyFromCtorParams_closure2: {
    "": "Closure;",
    call$0: function() {
      return X.Array2d_Array2d$readonlyFrom(3, [0, 1, 2, 3], J.JSInt);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestCollectionUtil_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("allUnique", N.TestCollectionUtil__testAllUnique$closure);
      N.test("listish", N.TestCollectionUtil__testListish$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestEnumerable_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("count", N.TestEnumerable__testCount$closure);
      N.test("distinct", N.TestEnumerable__testDistinct$closure);
      N.test("exclude", N.TestEnumerable__testExclude$closure);
      N.test("forEachWithIndex", N.TestEnumerable__testForEachWithIndex$closure);
      N.group("group", new N.TestEnumerable_run__closure());
      N.test("selectNumbers", N.TestEnumerable__testSelectNumbers$closure);
      N.test("toMap", N.TestEnumerable__testToMap$closure);
      N.test("concat", N.TestEnumerable__testConcat$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestEnumerable_run__closure: {
    "": "Closure;",
    call$0: function() {
      N.test("simple", N.TestEnumerable__testSimpleGrouping$closure);
      N.test("complex", N.TestEnumerable__testComplexGrouping$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestEnumerable__testDistinct_closure: {
    "": "Closure;",
    call$2: function(a, b) {
      return J.$mod$n(a, 2) === J.$mod$n(b, 2);
    },
    $isFunction: true,
    $is_args2: true
  },
  TestEnumerable__testForEachWithIndex_closure: {
    "": "Closure;",
    call$2: function(e, i) {
      O.expect(i, typeof e === "string" ? new O._StringEqualsMatcher(e) : new O._DeepMatcher(e, 100, null), null, null, false);
    },
    $isFunction: true,
    $is_args2: true
  },
  TestEnumerable__testToMap_closure: {
    "": "Closure;",
    call$1: function(s) {
      return J.get$length$asx(s);
    },
    $isFunction: true,
    $is_args1: true
  },
  TestEnumerable__testToMap_closure0: {
    "": "Closure;",
    call$2: function(k, v) {
      var t1 = J.get$length$asx(k);
      O.expect(t1, typeof v === "string" ? new O._StringEqualsMatcher(v) : new O._DeepMatcher(v, 100, null), null, null, false);
    },
    $isFunction: true,
    $is_args2: true
  },
  TestEnumerable__testToMap_closure1: {
    "": "Closure;",
    call$1: function(s) {
      return s;
    },
    $isFunction: true,
    $is_args1: true
  },
  TestEnumerable__testToMap_closure2: {
    "": "Closure;",
    call$1: function(s) {
      return J.$index$asx(s, 0);
    },
    $isFunction: true,
    $is_args1: true
  },
  TestEnumerable__testToMap_closure3: {
    "": "Closure;",
    call$2: function(k, v) {
      var t1 = J.$index$asx(v, 0);
      O.expect(k, typeof t1 === "string" ? new O._StringEqualsMatcher(t1) : new O._DeepMatcher(t1, 100, null), null, null, false);
    },
    $isFunction: true,
    $is_args2: true
  },
  TestEnumerable__testToMap_closure4: {
    "": "Closure;noDupes_0",
    call$0: function() {
      return X.CollectionUtil_toMap(this.noDupes_0, new N.TestEnumerable__testToMap__closure0(), new N.TestEnumerable__testToMap__closure1());
    },
    $isFunction: true,
    $is_void_: true
  },
  TestEnumerable__testToMap__closure0: {
    "": "Closure;",
    call$1: function(s) {
      return s;
    },
    $isFunction: true,
    $is_args1: true
  },
  TestEnumerable__testToMap__closure1: {
    "": "Closure;",
    call$1: function(s) {
      return J.get$length$asx(s);
    },
    $isFunction: true,
    $is_args1: true
  },
  TestEnumerable__testToMap_closure5: {
    "": "Closure;withDupes_1",
    call$0: function() {
      return X.CollectionUtil_toMap(this.withDupes_1, new N.TestEnumerable__testToMap__closure(), null);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestEnumerable__testToMap__closure: {
    "": "Closure;",
    call$1: function(s) {
      return J.get$length$asx(s);
    },
    $isFunction: true,
    $is_args1: true
  },
  TestEnumerable__testCount_closure: {
    "": "Closure;",
    call$1: function(x) {
      return J.$mod$n(x, 2) === 0;
    },
    $isFunction: true,
    $is_args1: true
  },
  TestEnumerable__testSelectNumbers_closure: {
    "": "Closure;",
    call$1: function(x) {
      return J.get$length$asx(x);
    },
    $isFunction: true,
    $is_args1: true
  },
  TestEnumerable__testComplexGrouping_closure: {
    "": "Closure;",
    call$1: function(str) {
      return J.get$length$asx(str);
    },
    $isFunction: true,
    $is_args1: true
  },
  TestNumberEnumerable_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("sum", N.TestNumberEnumerable__testSum$closure);
      N.test("min", N.TestNumberEnumerable__testMin$closure);
      N.test("max", N.TestNumberEnumerable__testMax$closure);
      N.test("average", N.TestNumberEnumerable__testAverage$closure);
      N.test("range", N.TestNumberEnumerable__testRange$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestNumberEnumerable__testSum_closure: {
    "": "Closure;",
    call$0: function() {
      Y._metaRequireArgumentNotNullOrEmpty("source");
      var t1 = new X._SimpleNumEnumerable([1, 2, 3, null]);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1.sum$0();
    },
    $isFunction: true,
    $is_void_: true
  },
  TestNumberEnumerable__testMin_closure: {
    "": "Closure;",
    call$0: function() {
      Y._metaRequireArgumentNotNullOrEmpty("source");
      var t1 = new X._SimpleNumEnumerable([1, 2, 3, null]);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1.min$0(t1);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestNumberEnumerable__testMax_closure: {
    "": "Closure;",
    call$0: function() {
      Y._metaRequireArgumentNotNullOrEmpty("source");
      var t1 = new X._SimpleNumEnumerable([1, 2, 3, null]);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1.max$0(t1);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestNumberEnumerable__testAverage_closure: {
    "": "Closure;",
    call$0: function() {
      Y._metaRequireArgumentNotNullOrEmpty("source");
      var t1 = new X._SimpleNumEnumerable([1, 2, 3, null]);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1.average$0();
    },
    $isFunction: true,
    $is_void_: true
  },
  TestSequence: {
    "": "Sequence;flip",
    get$length: function(_) {
      return this.flip ? 10 : 5;
    },
    $index: function(_, index) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 5)) {
        if (typeof index !== "number")
          return H.iae(index);
        return 5 - index;
      }
      return J.$add$ns(t1.$sub(index, 5), 1);
    },
    $asSequence: function() {
      return [J.JSInt];
    },
    $asEnumerable: function() {
      return [J.JSInt];
    },
    $asIterable: function() {
      return [J.JSInt];
    },
    static: {"": "TestSequence__length,TestSequence_instance,TestSequence_flipped,TestSequence_empty", TestSequence_run: function() {
        N.group("ListBase", new N.TestSequence_run_closure());
      }, TestSequence__testLast: function() {
        O.expect(C.TestSequence_false.get$last(C.TestSequence_false), 1, null, null, false);
      }, TestSequence__testSimple: function() {
        var t1, t2;
        t1 = C.TestSequence_false.flip ? 10 : 5;
        O.expect(t1, new O._DeepMatcher(5, 100, null), null, null, false);
        t1 = [5, 4, 3, 2, 1];
        t2 = new O._OrderedEquals(t1, null);
        t2._matcher = new O._DeepMatcher(t1, 1, null);
        O.expect(C.TestSequence_false, t2, null, null, false);
      }, TestSequence__testIndexOf: function() {
        var i, t1;
        for (i = 1; i <= 5; ++i) {
          t1 = C.TestSequence_true.indexOf$1(C.TestSequence_true, i);
          O.expect(t1, new O._DeepMatcher(5 - i, 100, null), null, null, false);
          t1 = C.TestSequence_true.lastIndexOf$1(C.TestSequence_true, i);
          O.expect(t1, new O._DeepMatcher(5 + i - 1, 100, null), null, null, false);
        }
        for (i = 1; i <= 5; ++i) {
          t1 = C.TestSequence_true.indexOf$2(C.TestSequence_true, i, 5);
          O.expect(t1, new O._DeepMatcher(5 + i - 1, 100, null), null, null, false);
        }
        for (i = 1; i <= 5; ++i)
          O.expect(C.TestSequence_true.lastIndexOf$2(C.TestSequence_true, i, 4), 5 - i, null, null, false);
        t1 = C.TestSequence_true.indexOf$2(C.TestSequence_true, 1, 6);
        O.expect(t1, new O._DeepMatcher(-1, 100, null), null, null, false);
        t1 = C.TestSequence_true.lastIndexOf$2(C.TestSequence_true, 1, 3);
        O.expect(t1, new O._DeepMatcher(-1, 100, null), null, null, false);
        t1 = C.TestSequence_true.indexOf$1(C.TestSequence_true, 0);
        O.expect(t1, new O._DeepMatcher(-1, 100, null), null, null, false);
        t1 = C.TestSequence_true.lastIndexOf$1(C.TestSequence_true, 0);
        O.expect(t1, new O._DeepMatcher(-1, 100, null), null, null, false);
      }}
  },
  TestSequence_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("indexOf", N.TestSequence__testIndexOf$closure);
      N.test("simple", N.TestSequence__testSimple$closure);
      N.test("last", N.TestSequence__testLast$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestHslColor_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("Equals", N.TestHslColor__testEquals$closure);
      N.test("Invalid", N.TestHslColor__testInvalid$closure);
      N.test("hue normaliazing", new N.TestHslColor_run__closure());
    },
    $isFunction: true,
    $is_void_: true
  },
  TestHslColor_run__closure: {
    "": "Closure;",
    call$0: function() {
      var i, color, t1;
      for (i = 0; i < 10; i += 2) {
        color = X.HslColor_HslColor(C.List_yyN[i], 0, 0);
        t1 = i + 1;
        if (t1 >= 10)
          return H.ioore(C.List_yyN, t1);
        O.expect(color.h, C.List_yyN[t1], null, null, false);
      }
    },
    $isFunction: true,
    $is_void_: true
  },
  TestHslColor__testInvalid_closure: {
    "": "Closure;",
    call$0: function() {
      return X.HslColor_HslColor(0, 0, 0);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestHslColor__testInvalid_closure0: {
    "": "Closure;invalidNumber_0",
    call$0: function() {
      return X.HslColor_HslColor(this.invalidNumber_0, 0, 0);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestHslColor__testInvalid_closure1: {
    "": "Closure;invalidNumber_1",
    call$0: function() {
      return X.HslColor_HslColor(0, this.invalidNumber_1, 0);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestHslColor__testInvalid_closure2: {
    "": "Closure;invalidNumber_2",
    call$0: function() {
      return X.HslColor_HslColor(0, 0, this.invalidNumber_2);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestHslColor__testInvalid_closure3: {
    "": "Closure;invalidNumber_3",
    call$0: function() {
      var t1 = this.invalidNumber_3;
      return X.HslColor_HslColor(t1, t1, t1);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestHslColor__testInvalid_closure4: {
    "": "Closure;",
    call$0: function() {
      return X.HslColor_HslColor(0, -1, 0);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestHslColor__testInvalid_closure5: {
    "": "Closure;",
    call$0: function() {
      return X.HslColor_HslColor(0, 0, 256);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestRgbColor_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("Equals", N.TestRgbColor__testEquals$closure);
      N.test("Invalid", N.TestRgbColor__testInvalid$closure);
      N.test("HslColor round-trip", N.TestRgbColor__testHslRoundTrip$closure);
      N.test("Hex round-trip", N.TestRgbColor__testHexRoundTrip$closure);
      N.test("fromHex", N.TestRgbColor__testFromHex$closure);
      N.test("invalid hex", N.TestRgbColor__testInvalidHex$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestRgbColor__testInvalid_closure: {
    "": "Closure;",
    call$0: function() {
      return X.RgbColor_RgbColor(null, 0, 0);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestRgbColor__testInvalid_closure0: {
    "": "Closure;",
    call$0: function() {
      return X.RgbColor_RgbColor(0, -1, 0);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestRgbColor__testInvalid_closure1: {
    "": "Closure;",
    call$0: function() {
      return X.RgbColor_RgbColor(0, 0, 256);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestRgbColor__testFromHex_closure: {
    "": "Closure;",
    call$2: function(hex, rgb) {
      var rgb2, t1, t2;
      rgb2 = X.RgbColor_RgbColor$fromHex(hex);
      O.expect(rgb2, typeof rgb === "string" ? new O._StringEqualsMatcher(rgb) : new O._DeepMatcher(rgb, 100, null), null, null, false);
      t1 = J.toLowerCase$0$s(hex);
      t2 = rgb.toHex$0();
      O.expect(t1, new O._StringEqualsMatcher(t2), null, null, false);
    },
    $isFunction: true,
    $is_args2: true
  },
  TestRgbColor__testInvalidHex_closure: {
    "": "Closure;",
    call$1: function(hex) {
      O.expect(new N.TestRgbColor__testInvalidHex__closure(hex), C.Throws__ArgumentError_ArgumentError, null, null, false);
    },
    $isFunction: true,
    $is_args1: true
  },
  TestRgbColor__testInvalidHex__closure: {
    "": "Closure;hex_0",
    call$0: function() {
      return X.RgbColor_RgbColor$fromHex(this.hex_0);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestEvents: {
    "": "Object;_testEventHandle",
    static: {TestEvents_run: function() {
        N.test("Event, EventHandle", new N.TestEvents_run_closure());
      }}
  },
  TestEvents_run_closure: {
    "": "Closure;",
    call$0: function() {
      var t1, watcher, t2, eventId;
      t1 = P.StreamController_StreamController$broadcast(null, null, true, null);
      H.setRuntimeTypeInfo(new X.EventHandle(t1, false), [J.JSString]);
      watcher = new Y.EventWatcher(null, 0);
      H.setRuntimeTypeInfo(watcher, [J.JSString]);
      O.expect(watcher._lastArgs, C.C__IsNull, null, null, false);
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1("bar");
      O.expect(watcher._lastArgs, C.C__IsNull, null, null, false);
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
      eventId = t2.listen$1(watcher.get$handler());
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1("bar");
      t2 = watcher._lastArgs;
      O.expect(t2, new O._StringEqualsMatcher("bar"), null, null, false);
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1("foo");
      t2 = watcher._lastArgs;
      O.expect(t2, new O._StringEqualsMatcher("foo"), null, null, false);
      O.expect(t1._async$_next !== t1, C.C__IsTrue, null, null, false);
      eventId.cancel$0();
      O.expect(t1._async$_next !== t1, C.C__IsFalse, null, null, false);
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1("bar");
      t1 = watcher._lastArgs;
      O.expect(t1, new O._StringEqualsMatcher("foo"), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestAffineTransform_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("constructors", new N.TestAffineTransform_run__closure());
      N.test("set from transform", new N.TestAffineTransform_run__closure0());
      N.test("identity", new N.TestAffineTransform_run__closure1());
      N.test("concatenate", new N.TestAffineTransform_run__closure2());
      N.test("rotate", new N.TestAffineTransform_run__closure3());
      N.test("translate", new N.TestAffineTransform_run__closure4());
      N.test("createInverse", new N.TestAffineTransform_run__closure5());
      N.test("equals and clone", new N.TestAffineTransform_run__closure6());
    },
    $isFunction: true,
    $is_void_: true
  },
  TestAffineTransform_run__closure: {
    "": "Closure;",
    call$0: function() {
      O.expect(X.AffineTransform$(1, 0, 0, 2, 0, 0), X.AffineTransform$(1, 0, 0, 2, 0, 0), null, null, false);
      O.expect(X.AffineTransform$(1, 0, 0, 1, 1, 2), X.AffineTransform$(1, 0, 0, 1, 1, 2), null, null, false);
      var rotateTx = X.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(1, 2, 3);
      O.expect(rotateTx._scX, new O._IsCloseTo(0.540302, 0.001), null, null, false);
      O.expect(rotateTx._shY, new O._IsCloseTo(0.84147, 0.001), null, null, false);
      O.expect(rotateTx._shX, new O._IsCloseTo(-0.84147, 0.001), null, null, false);
      O.expect(rotateTx._scY, new O._IsCloseTo(0.540302, 0.001), null, null, false);
      O.expect(rotateTx._tX, new O._IsCloseTo(3.443808, 0.001), null, null, false);
      O.expect(rotateTx._tY, new O._IsCloseTo(-0.303848, 0.001), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestAffineTransform_run__closure0: {
    "": "Closure;",
    call$0: function() {
      var tx1, tx2;
      tx1 = X.AffineTransform$(1, 2, 3, 4, 5, 6);
      tx2 = X.AffineTransform$(6, 5, 4, 3, 2, 1);
      O.expect(tx1, new O._IsNot(O.wrapMatcher(tx2)), null, null, false);
      Y._metaRequireArgumentNotNullOrEmpty("tx");
      tx1.setTransform$6(tx2._scX, tx2._shY, tx2._shX, tx2._scY, tx2._tX, tx2._tY);
      O.expect(tx1, tx2, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestAffineTransform_run__closure1: {
    "": "Closure;",
    call$0: function() {
      var tx = X.AffineTransform$(1, 2, 3, 4, 5, 6);
      O.expect(tx.get$isIdentity(), C.C__IsFalse, null, null, false);
      tx.setTransform$6(1, 0, 0, 1, 0, 0);
      O.expect(tx.get$isIdentity(), C.C__IsTrue, null, null, false);
      O.expect(X.AffineTransform$(1, 0, 0, 1, 0, 0).get$isIdentity(), C.C__IsTrue, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestAffineTransform_run__closure2: {
    "": "Closure;",
    call$0: function() {
      var tx, t1;
      tx = X.AffineTransform$(1, 2, 3, 4, 5, 6);
      tx.concatenate$1(X.AffineTransform$(2, 1, 6, 5, 4, 3));
      t1 = tx._scX;
      O.expect(t1, new O._DeepMatcher(5, 100, null), null, null, false);
      t1 = tx._shY;
      O.expect(t1, new O._DeepMatcher(8, 100, null), null, null, false);
      t1 = tx._shX;
      O.expect(t1, new O._DeepMatcher(21, 100, null), null, null, false);
      t1 = tx._scY;
      O.expect(t1, new O._DeepMatcher(32, 100, null), null, null, false);
      t1 = tx._tX;
      O.expect(t1, new O._DeepMatcher(18, 100, null), null, null, false);
      t1 = tx._tY;
      O.expect(t1, new O._DeepMatcher(26, 100, null), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestAffineTransform_run__closure3: {
    "": "Closure;",
    call$0: function() {
      var tx = X.AffineTransform$(1, 2, 3, 4, 5, 6);
      tx.concatenate$1(X.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(1.5707963267948966, 1, 1));
      O.expect(tx._scX, new O._IsCloseTo(3, 0.001), null, null, false);
      O.expect(tx._shY, new O._IsCloseTo(4, 0.001), null, null, false);
      O.expect(tx._shX, new O._IsCloseTo(-1, 0.001), null, null, false);
      O.expect(tx._scY, new O._IsCloseTo(-2, 0.001), null, null, false);
      O.expect(tx._tX, new O._IsCloseTo(7, 0.001), null, null, false);
      O.expect(tx._tY, new O._IsCloseTo(10, 0.001), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestAffineTransform_run__closure4: {
    "": "Closure;",
    call$0: function() {
      var tx, t1;
      tx = X.AffineTransform$(1, 2, 3, 4, 5, 6);
      tx.translate$2(tx, 2, 3);
      t1 = tx._scX;
      O.expect(t1, new O._DeepMatcher(1, 100, null), null, null, false);
      t1 = tx._shY;
      O.expect(t1, new O._DeepMatcher(2, 100, null), null, null, false);
      t1 = tx._shX;
      O.expect(t1, new O._DeepMatcher(3, 100, null), null, null, false);
      t1 = tx._scY;
      O.expect(t1, new O._DeepMatcher(4, 100, null), null, null, false);
      t1 = tx._tX;
      O.expect(t1, new O._DeepMatcher(16, 100, null), null, null, false);
      t1 = tx._tY;
      O.expect(t1, new O._DeepMatcher(22, 100, null), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestAffineTransform_run__closure5: {
    "": "Closure;",
    call$0: function() {
      var tx, t1, t2, t3, t4, det, t5, t6, inverse;
      tx = X.AffineTransform$(2, 0, 0, 3, 0, 0);
      tx.translate$2(tx, 5, 10);
      tx.concatenate$1(X.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(0.7853981633974483, 5, 10));
      t1 = tx._scX;
      t2 = tx._scY;
      t3 = tx._shX;
      t4 = tx._shY;
      det = t1 * t2 - t3 * t4;
      t5 = tx._tY;
      t6 = tx._tX;
      inverse = X.AffineTransform$(t2 / det, -t4 / det, -t3 / det, t1 / det, (t3 * t5 - t2 * t6) / det, (t4 * t6 - t1 * t5) / det);
      O.expect(inverse._scX, new O._IsCloseTo(0.353553, 0.001), null, null, false);
      O.expect(inverse._shY, new O._IsCloseTo(-0.353553, 0.001), null, null, false);
      O.expect(inverse._shX, new O._IsCloseTo(0.235702, 0.001), null, null, false);
      O.expect(inverse._scY, new O._IsCloseTo(0.235702, 0.001), null, null, false);
      O.expect(inverse._tX, new O._IsCloseTo(-16.213203, 0.001), null, null, false);
      O.expect(inverse._tY, new O._IsCloseTo(2.928932, 0.001), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestAffineTransform_run__closure6: {
    "": "Closure;",
    call$0: function() {
      var val, val2, val3, clone;
      val = X.AffineTransform$(1, 2, 3, 4, 5, 6);
      O.expect(val, new O._DeepMatcher(val, 100, null), null, null, false);
      O.expect(val, new O._IsSameAs(val), null, null, false);
      val2 = X.AffineTransform$(7, 8, 9, 10, 11, 12);
      O.expect(val2, new O._IsNot(O.wrapMatcher(new O._DeepMatcher(val, 100, null))), null, null, false);
      O.expect(val2, new O._IsNot(O.wrapMatcher(new O._IsSameAs(val))), null, null, false);
      val3 = X.AffineTransform$(1, 2, 3, 4, 5, 6);
      O.expect(val3, new O._DeepMatcher(val, 100, null), null, null, false);
      O.expect(val3, new O._IsNot(O.wrapMatcher(new O._IsSameAs(val))), null, null, false);
      clone = X.AffineTransform$(val._scX, val._shY, val._shX, val._scY, val._tX, val._tY);
      O.expect(clone, new O._DeepMatcher(val, 100, null), null, null, false);
      O.expect(val, new O._IsNot(O.wrapMatcher(new O._IsSameAs(clone))), null, null, false);
      O.expect(val3, new O._DeepMatcher(clone, 100, null), null, null, false);
      O.expect(clone, new O._IsNot(O.wrapMatcher(new O._IsSameAs(val3))), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestCoordinate_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("should be subtract by other Coordinate", new N.TestCoordinate_run__closure());
      N.test("should be compared by other Coordinate", new N.TestCoordinate_run__closure0());
      N.test("should obey const equality", new N.TestCoordinate_run__closure1());
      N.test("should get the distance to another point", new N.TestCoordinate_run__closure2());
    },
    $isFunction: true,
    $is_void_: true
  },
  TestCoordinate_run__closure: {
    "": "Closure;",
    call$0: function() {
      var t1, t2, coor;
      t1 = new X.Coordinate(5, 3);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new X.Coordinate(2, 1);
      H.setRuntimeTypeInfo(t2, [null]);
      coor = X.Coordinate_difference(t1, t2);
      O.expect(3, coor.x, null, null, false);
      O.expect(2, coor.y, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestCoordinate_run__closure0: {
    "": "Closure;",
    call$0: function() {
      var t1, t2;
      t1 = new X.Coordinate(2, 2);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new X.Coordinate(2, 2);
      H.setRuntimeTypeInfo(t2, [null]);
      O.expect(t1, new O._DeepMatcher(t2, 100, null), null, null, false);
      t1 = new X.Coordinate(2, 1);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new X.Coordinate(2, 2);
      H.setRuntimeTypeInfo(t2, [null]);
      O.expect(t1, new O._IsNot(O.wrapMatcher(new O._DeepMatcher(t2, 100, null))), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestCoordinate_run__closure1: {
    "": "Closure;",
    call$0: function() {
      var t1, t2;
      t1 = new X.Coordinate(2, 2);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new X.Coordinate(2, 2);
      H.setRuntimeTypeInfo(t2, [null]);
      O.expect(t1, new O._IsNot(O.wrapMatcher(new O._IsSameAs(t2))), null, null, false);
      O.expect(C.Coordinate_2_2, new O._IsSameAs(C.Coordinate_2_2), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestCoordinate_run__closure2: {
    "": "Closure;",
    call$0: function() {
      H.setRuntimeTypeInfo(new X.Coordinate(0, 0), [null]);
      H.setRuntimeTypeInfo(new X.Coordinate(3, 4), [null]);
      O.expect(5, Math.sqrt(25), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestBox_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("equals", N.TestBox__testEquals$closure);
      N.test("size and location", N.TestBox__testSizeLocation$closure);
      N.test("isValid", N.TestBox__testValid$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("should be sum with other Vector", new N.TestVector_run__closure());
      N.test("should be subtract by other Vector", new N.TestVector_run__closure0());
      N.test("should scale by another number", new N.TestVector_run__closure1());
      N.test("should be compared by other Vector", new N.TestVector_run__closure2());
      N.test("should obey const equality", new N.TestVector_run__closure3());
      N.test("should get magnitude of the vector", new N.TestVector_run__closure4());
      N.test("should calc the dot product", new N.TestVector_run__closure5());
      N.test("should calc the cross product", new N.TestVector_run__closure6());
      N.test("should have valid normal", new N.TestVector_run__closure7());
      N.test("getAngle", new N.TestVector_run__closure8());
      N.test("rotate", new N.TestVector_run__closure9());
      N.test("rotateAroundPoint", new N.TestVector_run__closure10());
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure: {
    "": "Closure;",
    call$0: function() {
      var t1, t2, v;
      t1 = new X.Vector(1, 1);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new X.Vector(2, 1);
      H.setRuntimeTypeInfo(t2, [null]);
      v = t1.$add(t1, t2);
      O.expect(3, v.x, null, null, false);
      O.expect(2, v.y, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure0: {
    "": "Closure;",
    call$0: function() {
      var t1, t2, v;
      t1 = new X.Vector(5, 3);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new X.Vector(2, 1);
      H.setRuntimeTypeInfo(t2, [null]);
      v = X.Coordinate_difference(t1, t2);
      O.expect(3, v.x, null, null, false);
      O.expect(2, v.y, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure1: {
    "": "Closure;",
    call$0: function() {
      var t1, v;
      t1 = new X.Vector(2, 3);
      H.setRuntimeTypeInfo(t1, [null]);
      v = t1.scale$1(t1, 5);
      O.expect(10, v.x, null, null, false);
      O.expect(15, v.y, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure2: {
    "": "Closure;",
    call$0: function() {
      var t1, t2;
      t1 = new X.Vector(2, 2);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new X.Vector(2, 2);
      H.setRuntimeTypeInfo(t2, [null]);
      O.expect(t1, new O._DeepMatcher(t2, 100, null), null, null, false);
      t1 = new X.Vector(2, 1);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new X.Vector(2, 2);
      H.setRuntimeTypeInfo(t2, [null]);
      O.expect(t1, new O._IsNot(O.wrapMatcher(new O._DeepMatcher(t2, 100, null))), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure3: {
    "": "Closure;",
    call$0: function() {
      var t1, t2;
      t1 = new X.Vector(2, 2);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new X.Vector(2, 2);
      H.setRuntimeTypeInfo(t2, [null]);
      O.expect(t1, t2, null, null, false);
      O.expect(C.Vector_2_2, new O._IsSameAs(C.Vector_2_2), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure4: {
    "": "Closure;",
    call$0: function() {
      var t1 = new X.Vector(3, 4);
      H.setRuntimeTypeInfo(t1, [null]);
      O.expect(5, t1.get$magnitude(), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure5: {
    "": "Closure;",
    call$0: function() {
      H.setRuntimeTypeInfo(new X.Vector(2, 3), [null]);
      H.setRuntimeTypeInfo(new X.Vector(4, 5), [null]);
      O.expect(23, 23, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure6: {
    "": "Closure;",
    call$0: function() {
      H.setRuntimeTypeInfo(new X.Vector(2, 3), [null]);
      H.setRuntimeTypeInfo(new X.Vector(4, 5), [null]);
      O.expect(-2, -2, null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure7: {
    "": "Closure;",
    call$0: function() {
      var n = new X.Vector(4, 4);
      H.setRuntimeTypeInfo(n, [null]);
      O.expect(n.get$magnitude(), new O._IsCloseTo(5.656854249492381, 0.001), null, null, false);
      O.expect(n.scale$1(n, 1 / n.get$magnitude()).get$magnitude(), new O._IsCloseTo(1, 0.001), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure8: {
    "": "Closure;",
    call$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = C.Vector_10_0.y;
      t2 = C.Vector_10_0.x;
      t3 = typeof t1 !== "number";
      if (t3)
        H.throwExpression(new P.ArgumentError(t1));
      t4 = typeof t2 !== "number";
      if (t4)
        H.throwExpression(new P.ArgumentError(t2));
      O.expect(Math.atan2(t1, t2), new O._IsCloseTo(0, 0.001), null, null, false);
      t5 = C.Vector_10_10.y;
      t6 = C.Vector_10_10.x;
      t7 = typeof t5 !== "number";
      if (t7)
        H.throwExpression(new P.ArgumentError(t5));
      t8 = typeof t6 !== "number";
      if (t8)
        H.throwExpression(new P.ArgumentError(t6));
      O.expect(Math.atan2(t5, t6), new O._IsCloseTo(0.7853981633974483, 0.001), null, null, false);
      if (t7)
        H.throwExpression(new P.ArgumentError(t5));
      if (t8)
        H.throwExpression(new P.ArgumentError(t6));
      t5 = Math.atan2(t5, t6);
      if (t3)
        H.throwExpression(new P.ArgumentError(t1));
      if (t4)
        H.throwExpression(new P.ArgumentError(t2));
      O.expect(t5 - Math.atan2(t1, t2), new O._IsCloseTo(0.7853981633974483, 0.001), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure9: {
    "": "Closure;",
    call$0: function() {
      var a = C.Vector_1_m1.rotate$1(C.Vector_1_m1, 1.5707963267948966);
      O.expect(a.x, new O._IsCloseTo(1, 0.000001), null, null, false);
      O.expect(a.y, new O._IsCloseTo(1, 0.000001), null, null, false);
      a = a.rotate$1(a, -3.141592653589793);
      O.expect(a.x, new O._IsCloseTo(-1, 0.000001), null, null, false);
      O.expect(a.y, new O._IsCloseTo(-1, 0.000001), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestVector_run__closure10: {
    "": "Closure;",
    call$0: function() {
      var t1, a;
      t1 = X.Coordinate_difference(C.Vector_1_m1, C.Coordinate_1_0);
      t1 = t1.rotate$1(t1, 1.5707963267948966);
      a = t1.$add(t1, C.Coordinate_1_0);
      O.expect(a.x, new O._IsCloseTo(2, 0.000001), null, null, false);
      O.expect(a.y, new O._IsCloseTo(0, 0.000001), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestCloneable: {
    "": "Object;_test_bot$_id<",
    get$id: function(_) {
      return this._test_bot$_id;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this._test_bot$_id === other.get$_test_bot$_id();
    },
    toString$0: function(_) {
      return "TestCloneable: " + this._test_bot$_id;
    },
    static: {"": "TestCloneable__globalId", TestCloneable_run: function() {
        N.test("Cloneable", new N.TestCloneable_run_closure());
      }}
  },
  TestCloneable_run_closure: {
    "": "Closure;",
    call$0: function() {
      var t1, val, t2, t3, clone;
      t1 = $.TestCloneable__globalId;
      $.TestCloneable__globalId = t1 + 1;
      val = new N.TestCloneable(t1);
      O.expect(val, new O._DeepMatcher(val, 100, null), null, null, false);
      O.expect(val, new O._IsSameAs(val), null, null, false);
      t2 = $.TestCloneable__globalId;
      $.TestCloneable__globalId = t2 + 1;
      t3 = t2 === t1;
      O.expect(t3, C.C__IsFalse, null, null, false);
      O.expect(t3, C.C__IsFalse, null, null, false);
      O.expect(new N.TestCloneable(t2), new O._IsNot(O.wrapMatcher(new O._IsSameAs(val))), null, null, false);
      clone = new N.TestCloneable(t1);
      O.expect(t1, new O._DeepMatcher(t1, 100, null), null, null, false);
      O.expect(clone, new O._DeepMatcher(val, 100, null), null, null, false);
      O.expect(val, new O._IsNot(O.wrapMatcher(new O._IsSameAs(clone))), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestTuple_run_closure: {
    "": "Closure;",
    call$0: function() {
      var t1, t2;
      t1 = new X.Tuple(5, 4);
      H.setRuntimeTypeInfo(t1, [J.JSInt, J.JSInt]);
      O.expect(t1, new O._DeepMatcher(t1, 100, null), null, null, false);
      O.expect(5, new O._DeepMatcher(5, 100, null), null, null, false);
      O.expect(4, new O._DeepMatcher(4, 100, null), null, null, false);
      t2 = new X.Tuple(5, 4);
      H.setRuntimeTypeInfo(t2, [J.JSInt, J.JSInt]);
      O.expect(t2, new O._DeepMatcher(t1, 100, null), null, null, false);
      O.expect(t2, new O._IsNot(O.wrapMatcher(new O._IsSameAs(t1))), null, null, false);
      t2 = new X.Tuple(6, 4);
      H.setRuntimeTypeInfo(t2, [J.JSInt, J.JSInt]);
      O.expect(t2, new O._IsNot(O.wrapMatcher(new O._DeepMatcher(t1, 100, null))), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestTuple_run_closure0: {
    "": "Closure;",
    call$0: function() {
      var t1, t2;
      t1 = new X.Tuple3("cool", 5, 4);
      H.setRuntimeTypeInfo(t1, [J.JSInt, J.JSInt, J.JSString]);
      O.expect(t1, new O._DeepMatcher(t1, 100, null), null, null, false);
      O.expect(5, new O._DeepMatcher(5, 100, null), null, null, false);
      O.expect(4, new O._DeepMatcher(4, 100, null), null, null, false);
      O.expect("cool", new O._StringEqualsMatcher("cool"), null, null, false);
      t2 = new X.Tuple3("cool", 5, 4);
      H.setRuntimeTypeInfo(t2, [J.JSInt, J.JSInt, J.JSString]);
      O.expect(t2, new O._DeepMatcher(t1, 100, null), null, null, false);
      O.expect(t2, new O._IsNot(O.wrapMatcher(new O._IsSameAs(t1))), null, null, false);
      t2 = new X.Tuple3("beans", 6, 4);
      H.setRuntimeTypeInfo(t2, [J.JSInt, J.JSInt, J.JSString]);
      O.expect(t2, new O._IsNot(O.wrapMatcher(new O._DeepMatcher(t1, 100, null))), null, null, false);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestUtil_run_closure: {
    "": "Closure;",
    call$0: function() {
      N.test("getHashcode", N.TestUtil__testGetHashCode$closure);
      N.test("split lines", N.TestUtil__testSplitLines$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestUtil__testSplitLines_closure: {
    "": "Closure;",
    call$0: function() {
      return X.Util_splitLines(null);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestUtil__testGetHashCode_closure: {
    "": "Closure;",
    call$0: function() {
      return X.Util_getHashCode(null);
    },
    $isFunction: true,
    $is_void_: true
  },
  TestUtil__hashCodeFun_closure: {
    "": "Closure;",
    call$1: function(i) {
      return N._SimpleHash__SimpleHash(i);
    },
    $isFunction: true,
    $is_args1: true
  },
  _SimpleHash: {
    "": "Object;hashCode>",
    static: {_SimpleHash__SimpleHash: function(hashCode) {
        if (hashCode == null)
          return;
        else
          return new N._SimpleHash(hashCode);
      }}
  }
}],
["trace", "package:stack_trace/src/trace.dart", , R, {
  Trace: {
    "": "Object;frames<",
    get$terse: function() {
      var t1 = this.foldFrames$1(new R.Trace_terse_closure()).frames;
      t1 = t1.map$1(t1, new R.Trace_terse_closure0());
      t1 = new P.UnmodifiableListView(t1.toList$0(t1));
      H.setRuntimeTypeInfo(t1, [S.Frame]);
      return new R.Trace(t1);
    },
    foldFrames$1: function(predicate) {
      var newFrames, t1, t2, frame;
      newFrames = [];
      H.setRuntimeTypeInfo(newFrames, [S.Frame]);
      for (t1 = this.frames, t1 = t1.get$reversed(t1), t2 = new H.ListIterator(t1, t1.get$length(t1), 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "ListIterable", 0)]); t2.moveNext$0();) {
        frame = t2._dev$_current;
        if (predicate.call$1(frame) !== true)
          newFrames.push(frame);
        else if (newFrames.length === 0 || predicate.call$1(C.JSArray_methods.get$last(newFrames)) !== true)
          newFrames.push(new S.Frame(frame.get$uri(), frame.get$line(), frame.get$column(), frame.get$member()));
      }
      t1 = new H.ReversedListIterable(newFrames);
      H.setRuntimeTypeInfo(t1, [null]);
      t1 = new P.UnmodifiableListView(t1.toList$0(t1));
      H.setRuntimeTypeInfo(t1, [S.Frame]);
      return new R.Trace(t1);
    },
    toString$0: function(_) {
      var t1, t2;
      t1 = this.frames;
      t2 = t1.map$1(t1, new R.Trace_toString_closure());
      t2 = t1.map$1(t1, new R.Trace_toString_closure0(t2.fold$2(t2, 0, P.max$closure)));
      return t2.join$0(t2);
    },
    $isTrace: true,
    $isStackTrace: true,
    static: {Trace_Trace$from: function(trace) {
        if (!!trace.$isTrace)
          return trace;
        return new S.LazyTrace(new R.Trace_Trace$from_closure(trace), null);
      }, Trace_Trace$parse: function(trace) {
        var error, t1, exception, t2;
        try {
          if (J.get$isEmpty$asx(trace) === true) {
            t1 = [];
            H.setRuntimeTypeInfo(t1, [S.Frame]);
            t1 = new P.UnmodifiableListView(C.JSArray_methods.toList$0(t1));
            H.setRuntimeTypeInfo(t1, [S.Frame]);
            return new R.Trace(t1);
          }
          if (J.contains$1$asx(trace, $.get$_v8Trace()) === true) {
            t1 = R.Trace$parseV8(trace);
            return t1;
          }
          if (J.contains$1$asx(trace, $.get$_safariTrace()) === true) {
            t1 = R.Trace$parseSafari6_1(trace);
            return t1;
          }
          if (J.contains$1$asx(trace, $.get$_firefoxTrace()) === true) {
            t1 = R.Trace$parseSafari6_0(trace);
            return t1;
          }
          if (J.contains$1$asx(trace, $.get$_friendlyTrace()) === true) {
            t1 = R.Trace$parseFriendly(trace);
            return t1;
          }
          t1 = R.Trace$parseVM(trace);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          t2 = J.getInterceptor(t1);
          if (typeof t1 === "object" && t1 !== null && !!t2.$isFormatException) {
            error = t1;
            throw H.wrapException(P.FormatException$(H.S(J.get$message$x(error)) + "\nStack trace:\n" + H.S(trace)));
          } else
            throw exception;
        }

      }, Trace$parseVM: function(trace) {
        var t1 = new H.MappedListIterable(J.trim$0$s(trace).split("\n"), new R.Trace$parseVM_closure());
        H.setRuntimeTypeInfo(t1, [null, null]);
        t1 = new P.UnmodifiableListView(t1.toList$0(t1));
        H.setRuntimeTypeInfo(t1, [S.Frame]);
        return new R.Trace(t1);
      }, Trace$parseV8: function(trace) {
        var t1 = H.SubListIterable$(J.split$1$s(trace, "\n"), 1, null, null);
        t1 = P.IterableBase.prototype.skipWhile$1.call(t1, t1, new R.Trace$parseV8_closure());
        t1 = H.MappedIterable_MappedIterable(t1, new R.Trace$parseV8_closure0(), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
        t1 = new P.UnmodifiableListView(t1.toList$0(t1));
        H.setRuntimeTypeInfo(t1, [S.Frame]);
        return new R.Trace(t1);
      }, Trace$parseSafari6_1: function(trace) {
        var t1 = new H.MappedListIterable(J.trim$0$s(trace).split("\n"), new R.Trace$parseSafari6_1_closure());
        H.setRuntimeTypeInfo(t1, [null, null]);
        t1 = new P.UnmodifiableListView(t1.toList$0(t1));
        H.setRuntimeTypeInfo(t1, [S.Frame]);
        return new R.Trace(t1);
      }, Trace$parseSafari6_0: function(trace) {
        var t1 = new H.WhereIterable(J.trim$0$s(trace).split("\n"), new R.Trace$parseSafari6_0_closure());
        H.setRuntimeTypeInfo(t1, [null]);
        t1 = H.MappedIterable_MappedIterable(t1, new R.Trace$parseSafari6_0_closure0(), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
        t1 = new P.UnmodifiableListView(t1.toList$0(t1));
        H.setRuntimeTypeInfo(t1, [S.Frame]);
        return new R.Trace(t1);
      }, Trace$parseFriendly: function(trace) {
        var t1 = new H.MappedListIterable(J.trim$0$s(trace).split("\n"), new R.Trace$parseFriendly_closure());
        H.setRuntimeTypeInfo(t1, [null, null]);
        t1 = new P.UnmodifiableListView(t1.toList$0(t1));
        H.setRuntimeTypeInfo(t1, [S.Frame]);
        return new R.Trace(t1);
      }}
  },
  Trace_Trace$from_closure: {
    "": "Closure;trace_0",
    call$0: function() {
      var t1 = this.trace_0;
      return R.Trace_Trace$parse(t1.toString$0(t1));
    },
    $isFunction: true,
    $is_void_: true
  },
  Trace$parseVM_closure: {
    "": "Closure;",
    call$1: function(line) {
      return S.Frame_Frame$parseVM(line);
    },
    $isFunction: true,
    $is_args1: true
  },
  Trace$parseV8_closure: {
    "": "Closure;",
    call$1: function(line) {
      return !J.startsWith$1$s(line, $.get$_v8TraceLine());
    },
    $isFunction: true,
    $is_args1: true
  },
  Trace$parseV8_closure0: {
    "": "Closure;",
    call$1: function(line) {
      return S.Frame_Frame$parseV8(line);
    },
    $isFunction: true,
    $is_args1: true
  },
  Trace$parseSafari6_1_closure: {
    "": "Closure;",
    call$1: function(line) {
      var match, t1, t2, uri, member, column;
      match = $.get$_safariFrame().firstMatch$1(line);
      if (match == null)
        H.throwExpression(P.FormatException$("Couldn't parse Safari stack trace line '" + H.S(line) + "'."));
      t1 = match.__js_helper$_match;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t2 = t1[2];
      uri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t2));
      t2 = t1.length;
      if (1 >= t2)
        return H.ioore(t1, 1);
      member = t1[1];
      if (member == null)
        member = "<fn>";
      if (3 >= t2)
        return H.ioore(t1, 3);
      if (J.$eq(t1[3], ""))
        line = null;
      else {
        if (3 >= t1.length)
          return H.ioore(t1, 3);
        line = H.Primitives_parseInt(t1[3], null, null);
      }
      if (4 >= t1.length)
        return H.ioore(t1, 4);
      if (J.$eq(t1[4], ""))
        column = null;
      else {
        if (4 >= t1.length)
          return H.ioore(t1, 4);
        column = H.Primitives_parseInt(t1[4], null, null);
      }
      return new S.Frame(uri, line, column, member);
    },
    $isFunction: true,
    $is_args1: true
  },
  Trace$parseSafari6_0_closure: {
    "": "Closure;",
    call$1: function(line) {
      return !J.$eq(line, "[native code]");
    },
    $isFunction: true,
    $is_args1: true
  },
  Trace$parseSafari6_0_closure0: {
    "": "Closure;",
    call$1: function(line) {
      var match, t1, t2, uri, member;
      match = $.get$_firefoxFrame().firstMatch$1(line);
      if (match == null)
        H.throwExpression(P.FormatException$("Couldn't parse Firefox stack trace line '" + H.S(line) + "'."));
      t1 = match.__js_helper$_match;
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      t2 = t1[3];
      uri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t2));
      t2 = t1.length;
      if (1 >= t2)
        return H.ioore(t1, 1);
      member = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t2 = t1[2];
      if (typeof t2 !== "string")
        H.throwExpression(new P.ArgumentError(t2));
      member = J.$add$ns(member, C.JSArray_methods.join$0(P.List_List$filled(H.allMatchesInStringUnchecked("/", t2).length, ".<fn>", null)));
      if (J.$eq(member, ""))
        member = "<fn>";
      member = J.replaceFirst$2$s(member, $.get$_initialDot(), "");
      if (4 >= t1.length)
        return H.ioore(t1, 4);
      return new S.Frame(uri, H.Primitives_parseInt(t1[4], null, null), null, member);
    },
    $isFunction: true,
    $is_args1: true
  },
  Trace$parseFriendly_closure: {
    "": "Closure;",
    call$1: function(line) {
      var match, t1, t2, uri, t3, column;
      match = $.get$_friendlyFrame().firstMatch$1(line);
      if (match == null)
        H.throwExpression(P.FormatException$("Couldn't parse package:stack_trace stack trace line '" + H.S(line) + "'."));
      t1 = match.__js_helper$_match;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t2 = t1[1];
      uri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t2));
      if (J.$eq(uri.scheme, "")) {
        t2 = $.get$_builder();
        t3 = t2.style.pathFromUri$1(uri);
        uri = t2.toUri$1(t2.join$8(t2, B.current(), t3, null, null, null, null, null, null));
      }
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t2 = t1[2];
      line = t2 == null ? null : H.Primitives_parseInt(t2, null, null);
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      t2 = t1[3];
      column = t2 == null ? null : H.Primitives_parseInt(t2, null, null);
      if (4 >= t1.length)
        return H.ioore(t1, 4);
      return new S.Frame(uri, line, column, t1[4]);
    },
    $isFunction: true,
    $is_args1: true
  },
  Trace_terse_closure: {
    "": "Closure;",
    call$1: function(frame) {
      return frame.get$isCore();
    },
    $isFunction: true,
    $is_args1: true
  },
  Trace_terse_closure0: {
    "": "Closure;",
    call$1: function(frame) {
      var t1, t2, library;
      if (!frame.get$isCore())
        return frame;
      t1 = frame.get$library();
      t2 = $.get$_terseRegExp();
      library = H.stringReplaceAllUnchecked(t1, t2, "");
      return new S.Frame(P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(library)), null, null, frame.get$member());
    },
    $isFunction: true,
    $is_args1: true
  },
  Trace_toString_closure: {
    "": "Closure;",
    call$1: function(frame) {
      return J.get$length$asx(J.get$location$x(frame));
    },
    $isFunction: true,
    $is_args1: true
  },
  Trace_toString_closure0: {
    "": "Closure;longest_0",
    call$1: function(frame) {
      return H.S(N.padRight(J.get$location$x(frame), this.longest_0)) + "  " + H.S(frame.get$member()) + "\n";
    },
    $isFunction: true,
    $is_args1: true
  }
}],
["unittest", "package:unittest/unittest.dart", , N, {
  unittestConfiguration: function() {
    var t1 = $._config;
    if (t1 == null) {
      t1 = [];
      H.setRuntimeTypeInfo(t1, [[N.Pair, J.JSString, P.StackTrace]]);
      t1 = new N.SimpleConfiguration(null, true, true, t1, C.Duration_120000000);
      if ($._assertErrorFormatter == null)
        $._assertErrorFormatter = O._defaultErrorFormatter$closure;
      O.configureExpectFailureHandler(new N._ExpectFailureHandler(t1));
      $._config = t1;
    }
    return t1;
  },
  currentTestCase: function() {
    var t1, t2;
    t1 = $._currentTestCaseIndex;
    if (t1 < $.get$testCases()._collection$_source.length) {
      t2 = $.get$testCases()._collection$_source;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      t1 = t2[t1];
    } else
      t1 = null;
    return t1;
  },
  test: function(spec, body) {
    var t1, t2, t3, t4, t5;
    N._ensureInitialized(true);
    if (!$._soloTestSeen || $._soloNestingLevel > 0) {
      t1 = $.get$testCases()._collection$_source.length;
      t2 = N._fullSpec(spec);
      t3 = $.get$_currentContext().get$fullName();
      t4 = $.get$_currentContext();
      t5 = t4._testSetup;
      t4 = t4._testTeardown;
      $.get$_testCases().push(new N.TestCase(t1 + 1, t2, t5, t4, body, 0, "", null, null, t3, null, null, true, false, null));
    }
  },
  group: function(description, body) {
    var e, trace, stack, t1, t2, t3, exception;
    N._ensureInitialized(true);
    t1 = $.get$_currentContext();
    t2 = new N._GroupContext(t1, description, null, null);
    t3 = t1 == null;
    t2._testSetup = t3 ? null : t1._testSetup;
    t2._testTeardown = t3 ? null : t1._testTeardown;
    $._currentContext = t2;
    try {
      body.call$0();
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      trace = new H._StackTrace(exception, null);
      stack = trace == null ? "" : ": " + H.S(J.toString$0(trace));
      $._uncaughtErrorMessage = H.S(J.toString$0(e)) + H.S(stack);
    }
 finally {
      $._currentContext = $.get$_currentContext().parent;
    }
  },
  _nextTestCase: function() {
    $._currentTestCaseIndex = $._currentTestCaseIndex + 1;
    N._runTest();
  },
  handleExternalError: function(e, message, stack) {
    var msg = message + "\nCaught " + H.S(e);
    if (N.currentTestCase() != null)
      J.error$2$x(N.currentTestCase(), msg, stack);
    else
      $._uncaughtErrorMessage = msg + ": " + H.S(stack);
  },
  runTests: function() {
    N._ensureInitialized(false);
    $._currentTestCaseIndex = 0;
    $._config.onStart$0();
    N._runTest();
  },
  _guardAsync: function(tryBody, finallyBody, testCase) {
    var e, trace, t1, exception;
    try {
      t1 = tryBody.call$0();
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      trace = new H._StackTrace(exception, null);
      N._registerException(testCase, e, trace);
    }
 finally {
      if (finallyBody != null)
        finallyBody.call$0();
    }
  },
  _registerException: function(testCase, e, trace) {
    var t1, message;
    t1 = J.getInterceptor(e);
    message = typeof e === "object" && e !== null && !!t1.$isTestFailure ? e.message : "Caught " + H.S(e);
    t1 = J.getInterceptor$x(testCase);
    if (t1.get$result(testCase) == null)
      testCase.fail$2(message, trace);
    else
      t1.error$2(testCase, message, trace);
  },
  _runTest: function() {
    var t1, testCase, timeout, e, t2, t3, f, exception;
    t1 = {};
    t2 = $._currentTestCaseIndex;
    t3 = $.get$testCases()._collection$_source;
    if (t2 >= t3.length)
      N._completeTests();
    else {
      testCase = t3[t2];
      f = N._guardAsync(testCase.get$_run(), null, testCase);
      t1.timer_0 = null;
      timeout = N.unittestConfiguration().timeout;
      if (timeout != null)
        try {
          t1.timer_0 = P.Timer_Timer(timeout, new N._runTest_closure(testCase, timeout));
        } catch (exception) {
          t2 = H.unwrapException(exception);
          t3 = J.getInterceptor(t2);
          if (typeof t2 === "object" && t2 !== null && !!t3.$isUnsupportedError) {
            e = t2;
            if (!J.$eq(J.get$message$x(e), "Timer greater than 0."))
              throw exception;
          } else
            throw exception;
        }

      f.whenComplete$1(new N._runTest_closure0(t1));
    }
  },
  _completeTests: function() {
    var t1, passed, failed, errors;
    if (!$._initialized)
      return;
    for (t1 = $.get$testCases(), t1 = t1.get$iterator(t1), passed = 0, failed = 0, errors = 0; t1.moveNext$0();)
      switch (J.get$result$x(t1._dev$_current)) {
        case "pass":
          ++passed;
          break;
        case "fail":
          ++failed;
          break;
        case "error":
          ++errors;
          break;
        default:
      }
    $._config.onSummary$5(passed, failed, errors, $.get$testCases(), $._uncaughtErrorMessage);
    t1 = $._config;
    t1.onDone$1(passed > 0 && failed === 0 && errors === 0 && $._uncaughtErrorMessage == null);
    $._initialized = false;
  },
  _fullSpec: function(spec) {
    var group = $.get$_currentContext().get$fullName();
    return group !== "" ? group + $.groupSep + spec : spec;
  },
  _ensureInitialized: function(configAutoStart) {
    var t1;
    if ($._initialized)
      return;
    $._initialized = true;
    $.wrapAsync = new N._ensureInitialized_closure();
    $._uncaughtErrorMessage = null;
    N.unittestConfiguration().onInit$0();
    if (configAutoStart) {
      $._config.toString;
      t1 = true;
    } else
      t1 = false;
    if (t1)
      P.scheduleMicrotask(N.runTests$closure);
  },
  _getTrace: function(stack) {
    var trace, t1;
    if (stack == null || !$.formatStacks)
      return;
    if (typeof stack === "string")
      trace = R.Trace_Trace$parse(stack);
    else {
      t1 = J.getInterceptor(stack);
      if (typeof stack === "object" && stack !== null && !!t1.$isStackTrace)
        trace = R.Trace_Trace$from(stack);
      else
        throw H.wrapException(P.Exception_Exception("Invalid stack type " + H.S(t1.get$runtimeType(stack)) + " for " + H.S(stack) + "."));
    }
    if (!$.filterStacks)
      return trace;
    t1 = trace.get$frames();
    t1 = t1.takeWhile$1(t1, new N._getTrace_closure());
    t1 = new P.UnmodifiableListView(t1.toList$0(t1));
    H.setRuntimeTypeInfo(t1, [S.Frame]);
    return new R.Trace(t1).get$terse().foldFrames$1(new N._getTrace_closure0());
  },
  Configuration: {
    "": "Object;",
    onStart$0: function() {
      return;
    }
  },
  _ExpectFailureHandler: {
    "": "DefaultFailureHandler;_config",
    fail$1: function(reason) {
      this._config.onExpectFailure$1(reason);
    }
  },
  SimpleConfiguration: {
    "": "Configuration;_receivePort,throwOnTestFailures,stopTestOnExpectFailure,_testLogBuffer,timeout",
    get$name: function(_) {
      return "Configuration";
    },
    onInit$0: function() {
      $.filterStacks = false;
      this._receivePort = P.ReceivePort_ReceivePort();
      P.print("unittest-suite-wait-for-done");
    },
    onTestResult$1: function(testCase) {
      var reason, t1, t2, t3, reasonAndTrace, str, t4, lastReasonAndTrace;
      if (!this.stopTestOnExpectFailure && this._testLogBuffer.length > 0) {
        reason = P.StringBuffer$("");
        for (t1 = this._testLogBuffer, t2 = H.SubListIterable$(t1, 0, t1.length - 1, null), t3 = new H.ListIterator(t2, t2.get$length(t2), 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "ListIterable", 0)]); t3.moveNext$0();) {
          reasonAndTrace = t3._dev$_current;
          t2 = J.getInterceptor$ax(reasonAndTrace);
          str = t2.get$first(reasonAndTrace);
          str = typeof str === "string" ? str : H.S(str);
          t4 = reason._contents + str;
          reason._contents = t4;
          reason._contents = t4 + "\n";
          str = t2.get$last(reasonAndTrace);
          str = typeof str === "string" ? str : H.S(str);
          t2 = reason._contents + str;
          reason._contents = t2;
          reason._contents = t2 + "\n";
        }
        lastReasonAndTrace = C.JSArray_methods.get$last(t1);
        reason.write$1(lastReasonAndTrace.first);
        t1 = lastReasonAndTrace.last;
        if (testCase._result === "pass") {
          testCase._result = "fail";
          testCase._unittest$_message = reason._contents;
          testCase._stackTrace = t1;
        } else {
          reason.write$1(t1);
          reason.write$1("\n");
          testCase._unittest$_message = reason._contents + "\n" + H.S(testCase._unittest$_message);
        }
      }
    },
    onExpectFailure$1: function(reason) {
      var stack, trace, exception, t1;
      if (this.stopTestOnExpectFailure)
        throw H.wrapException(O.TestFailure$(reason));
      else
        try {
          throw H.wrapException("");
        } catch (exception) {
          H.unwrapException(exception);
          stack = new H._StackTrace(exception, null);
          trace = N._getTrace(stack);
          if (trace == null)
            trace = stack;
          t1 = new N.Pair(reason, trace);
          H.setRuntimeTypeInfo(t1, [J.JSString, P.StackTrace]);
          this._testLogBuffer.push(t1);
        }

    },
    onSummary$5: function(passed, failed, errors, results, uncaughtError) {
      var t1, t, result, t2, t3, t4, line;
      for (t1 = results.get$iterator(results); t1.moveNext$0();) {
        t = t1._dev$_current;
        result = new P.StringBuffer("");
        result._contents = "";
        t2 = J.getInterceptor$x(t);
        t3 = J.toUpperCase$0$s(t2.get$result(t));
        t3 = "" + t3;
        result._contents = t3;
        t3 += ": ";
        result._contents = t3;
        t4 = t.get$description();
        t3 += t4;
        result._contents = t3;
        t3 += "\n";
        result._contents = t3;
        if (!J.$eq(t2.get$message(t), "")) {
          t2 = J.replaceAll$2$s(t2.get$message(t), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^", true, true, false), null, null), "  ");
          t2 = t3 + t2;
          result._contents = t2;
          t2 += "\n";
          result._contents = t2;
        } else
          t2 = t3;
        if (t.get$stackTrace() != null) {
          t3 = J.replaceAll$2$s(J.toString$0(t.get$stackTrace()), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^", true, true, false), null, null), "  ");
          t2 += t3;
          result._contents = t2;
          t2 += "\n";
          result._contents = t2;
        }
        line = C.JSString_methods.trim$0(t2);
        H.printString(line);
      }
      P.print("");
      if (passed === 0 && failed === 0 && errors === 0 && uncaughtError == null)
        P.print("No tests found.");
      else if (failed === 0 && errors === 0 && uncaughtError == null)
        P.print("All " + passed + " tests passed.");
      else {
        if (uncaughtError != null)
          P.print("Top-level uncaught error: " + uncaughtError);
        P.print("" + passed + " PASSED, " + failed + " FAILED, " + errors + " ERRORS");
      }
    },
    onDone$1: function(success) {
      var t1, t2;
      if (success) {
        P.print("unittest-suite-success");
        t1 = this._receivePort;
        t2 = t1._rawPort;
        t2.close$0(t2);
        t1 = t1._controller;
        t1.close$0(t1);
      } else {
        t1 = this._receivePort;
        t2 = t1._rawPort;
        t2.close$0(t2);
        t1 = t1._controller;
        t1.close$0(t1);
        if (this.throwOnTestFailures)
          throw H.wrapException(P.Exception_Exception("Some tests failed."));
      }
    }
  },
  TestCase: {
    "": "Object;id>,description<,setUp,tearDown,testFunction,_callbackFunctionsOutstanding@,_unittest$_message,_result,_stackTrace,currentGroup<,_startTime,_runningTime,enabled,_doneTeardown,_testComplete",
    testFunction$0: function() {
      return this.testFunction.call$0();
    },
    get$message: function(_) {
      return this._unittest$_message;
    },
    get$result: function(_) {
      return this._result;
    },
    get$stackTrace: function() {
      return this._stackTrace;
    },
    get$isComplete: function() {
      return !this.enabled || this._result != null;
    },
    _errorHandler$1: function(stage) {
      return new N.TestCase__errorHandler_closure(this, stage);
    },
    _run$0: function() {
      if (!this.enabled)
        return P._Future$immediate(null, null);
      this._stackTrace = null;
      this._result = null;
      this._unittest$_message = "";
      return P._Future$immediate(null, null).then$1(new N.TestCase__run_closure(this)).catchError$1(this._errorHandler$1("Setup")).then$1(new N.TestCase__run_closure0(this)).catchError$1(this._errorHandler$1("Test")).then$1(new N.TestCase__run_closure1(this)).catchError$1(this._errorHandler$1("Teardown"));
    },
    get$_run: function() {
      return new P.BoundClosure$0(this, N.TestCase.prototype._run$0, null, "_run$0");
    },
    _unittest$_complete$3: function(testResult, messageText, stack) {
      var t1, t2;
      if (this._runningTime == null)
        if (this._startTime != null)
          this._runningTime = P.Duration$(0, 0, 0, P.DateTime$_now().millisecondsSinceEpoch - this._startTime.millisecondsSinceEpoch, 0, 0);
        else
          this._runningTime = C.Duration_0;
      this._unittest$_message = messageText;
      t1 = N._getTrace(stack);
      this._stackTrace = t1;
      if (t1 == null)
        this._stackTrace = stack;
      t1 = this._result;
      t2 = $._config;
      if (t1 == null) {
        this._result = testResult;
        t2.onTestResult$1(this);
      } else {
        this._result = testResult;
        t2.toString;
      }
      t1 = this._testComplete;
      if (t1 != null) {
        this._testComplete = null;
        t1 = t1.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(this);
      }
    },
    _unittest$_complete$1: function(testResult) {
      return this._unittest$_complete$3(testResult, "", null);
    },
    fail$2: function(messageText, stack) {
      var t1 = this._result;
      if (t1 != null)
        this._unittest$_complete$3("error", t1 === "pass" ? "Test failed after initially passing: " + H.S(messageText) : "Test failed more than once: " + H.S(messageText), stack);
      else
        this._unittest$_complete$3("fail", messageText, stack);
    },
    error$2: function(_, messageText, stack) {
      this._unittest$_complete$3("error", messageText, stack);
    },
    error$1: function($receiver, messageText) {
      return this.error$2($receiver, messageText, null);
    },
    get$error: function(_receiver) {
      return new N.BoundClosure$i2(this, N.TestCase.prototype.error$2, _receiver, "error$2");
    },
    _markCallbackComplete$0: function() {
      var t1 = this._callbackFunctionsOutstanding - 1;
      this._callbackFunctionsOutstanding = t1;
      if (t1 === 0)
        t1 = !(!this.enabled || this._result != null);
      else
        t1 = false;
      if (t1)
        this._unittest$_complete$1("pass");
    },
    toString$0: function(_) {
      var t1, t2;
      t1 = this._result;
      t2 = this.description;
      return t1 != null ? t2 + ": " + t1 : t2;
    },
    $isTestCase: true
  },
  TestCase__errorHandler_closure: {
    "": "Closure;this_0,stage_1",
    call$2: function(e, stack) {
      var t1, t2;
      t1 = J.getInterceptor(e);
      t1 = typeof e === "object" && e !== null && !!t1.$isError;
      stack = t1 ? e.get$stackTrace() : null;
      t1 = this.this_0;
      t2 = t1._result;
      if (t2 == null || t2 === "pass") {
        t2 = J.getInterceptor(e);
        if (typeof e === "object" && e !== null && !!t2.$isTestFailure)
          t1.fail$2(H.S(e), stack);
        else
          t1._unittest$_complete$3("error", this.stage_1 + " failed: Caught " + H.S(e), stack);
      }
    },
    $isFunction: true,
    $is_args2: true
  },
  TestCase__run_closure: {
    "": "Closure;this_0",
    call$1: function(_) {
    },
    $isFunction: true,
    $is_args1: true
  },
  TestCase__run_closure0: {
    "": "Closure;this_1",
    call$1: function(_) {
      var t1 = this.this_1;
      if (t1._result != null)
        return P._Future$immediate(null, null);
      C.JSArray_methods.set$length($._config._testLogBuffer, 0);
      t1._startTime = P.DateTime$_now();
      t1._runningTime = null;
      t1._callbackFunctionsOutstanding = t1._callbackFunctionsOutstanding + 1;
      return t1.testFunction$0();
    },
    $isFunction: true,
    $is_args1: true
  },
  TestCase__run_closure1: {
    "": "Closure;this_2",
    call$1: function(_) {
      var t1, t2, t3;
      t1 = this.this_2;
      t1._markCallbackComplete$0();
      if (t1._result == null) {
        t2 = P._Future$(null);
        t3 = new P._AsyncCompleter(t2);
        H.setRuntimeTypeInfo(t3, [null]);
        t1._testComplete = t3;
        return t2.whenComplete$1(new N.TestCase__run__closure(t1)).catchError$1(t1._errorHandler$1("Teardown"));
      }
    },
    $isFunction: true,
    $is_args1: true
  },
  TestCase__run__closure: {
    "": "Closure;this_3",
    call$0: function() {
    },
    $isFunction: true,
    $is_void_: true
  },
  _GroupContext: {
    "": "Object;parent,_unittest$_name,_testSetup,_testTeardown",
    get$fullName: function() {
      var t1, t2, t3;
      t1 = this.parent;
      if (t1 != null) {
        t2 = $.get$_rootContext();
        t2 = t1 == null ? t2 == null : t1 === t2;
      } else
        t2 = true;
      t3 = this._unittest$_name;
      return t2 ? t3 : t1.get$fullName() + $.groupSep + t3;
    }
  },
  _SpreadArgsHelper: {
    "": "Object;callback,minExpectedCalls,maxExpectedCalls,isDone,id>,actualCalls,testCase,complete",
    callback$1: function(arg0) {
      return this.callback.call$1(arg0);
    },
    complete$0: function($receiver) {
      return this.complete.call$0();
    },
    shouldCallBack$0: function() {
      var t1, t2;
      this.actualCalls = this.actualCalls + 1;
      t1 = this.testCase;
      if (t1.get$isComplete()) {
        t2 = J.getInterceptor$x(t1);
        if (t2.get$result(t1) === "pass")
          t2.error$1(t1, "Callback " + this.id + "called (" + this.actualCalls + ") after test case " + t1.get$description() + " has already been marked as " + H.S(t2.get$result(t1)) + ".");
        return false;
      } else {
        t1 = this.maxExpectedCalls;
        if (this.actualCalls > t1)
          throw H.wrapException(O.TestFailure$("Callback " + this.id + "called more times than expected (" + t1 + ")."));
      }
      return true;
    },
    after$0: function() {
      if (!this.complete) {
        var t1 = this.minExpectedCalls;
        if (t1 > 0 && this.actualCalls < t1)
          return;
        this.complete = true;
        this.testCase._markCallbackComplete$0();
      }
    },
    get$after: function() {
      return new P.BoundClosure$0(this, N._SpreadArgsHelper.prototype.after$0, null, "after$0");
    },
    invoke1$1: function(arg1) {
      return N._guardAsync(new N._SpreadArgsHelper_invoke1_closure(this, arg1), this.get$after(), this.testCase);
    },
    get$invoke1: function() {
      return new H.BoundClosure$1(this, N._SpreadArgsHelper.prototype.invoke1$1, null, "invoke1$1");
    },
    _SpreadArgsHelper$5: function(callback, minExpected, maxExpected, isDone, id) {
      var t1;
      N._ensureInitialized(true);
      t1 = this.testCase;
      if (t1 == null)
        throw H.wrapException(new P.StateError("No valid test. Did you forget to run your test inside a call to test()?"));
      if (minExpected > 0) {
        t1.set$_callbackFunctionsOutstanding(t1.get$_callbackFunctionsOutstanding() + 1);
        this.complete = false;
      } else
        this.complete = true;
    },
    static: {"": "_SpreadArgsHelper_sentinel", _SpreadArgsHelper__makeCallbackId: function(id, callback) {
        var fname, t1, pos, epos;
        if (id != null)
          return H.S(id) + " ";
        else {
          fname = J.toString$0(callback);
          t1 = J.getInterceptor$asx(fname);
          pos = t1.indexOf$1(fname, "Function '");
          if (pos > 0) {
            pos += 10;
            epos = t1.indexOf$2(fname, "'", pos);
            if (epos > 0)
              return t1.substring$2(fname, pos, epos) + " ";
          }
        }
        return "";
      }}
  },
  _SpreadArgsHelper_invoke1_closure: {
    "": "Closure;this_0,arg1_1",
    call$0: function() {
      var t1 = this.this_0;
      if (t1.shouldCallBack$0())
        return t1.callback$1(this.arg1_1);
    },
    $isFunction: true,
    $is_void_: true
  },
  _runTest_closure: {
    "": "Closure;testCase_1,timeout_2",
    call$0: function() {
      J.error$1$x(this.testCase_1, "Test timed out after " + H.S(C.JSNumber_methods.$tdiv(this.timeout_2._duration, 1000000)) + " seconds.");
      $._currentTestCaseIndex = $._currentTestCaseIndex + 1;
      N._runTest();
    },
    $isFunction: true,
    $is_void_: true
  },
  _runTest_closure0: {
    "": "Closure;box_0",
    call$0: function() {
      var t1, now;
      t1 = this.box_0.timer_0;
      if (t1 != null)
        t1.cancel$0();
      now = P.DateTime$_now().millisecondsSinceEpoch;
      t1 = $.get$_lastBreath();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (now - t1 >= 200) {
        $._lastBreath = now;
        P.Timer_Timer(C.Duration_0, N._nextTestCase$closure);
      } else
        P.scheduleMicrotask(N._nextTestCase$closure);
    },
    $isFunction: true,
    $is_void_: true
  },
  _ensureInitialized_closure: {
    "": "Closure;",
    call$2: function(f, id) {
      var t1 = N.currentTestCase();
      t1 = new N._SpreadArgsHelper(f, 1, 1, null, N._SpreadArgsHelper__makeCallbackId(id, f), 0, t1, null);
      t1._SpreadArgsHelper$5(f, 1, 0, null, id);
      return t1.get$invoke1();
    },
    call$1: function(f) {
      return this.call$2(f, null);
    },
    $isFunction: true,
    $is_args2: true,
    $is_args1: true
  },
  _getTrace_closure: {
    "": "Closure;",
    call$1: function(frame) {
      return !J.$eq(frame.get$$package(), "unittest") || !J.$eq(frame.get$member(), "TestCase._runTest");
    },
    $isFunction: true,
    $is_args1: true
  },
  _getTrace_closure0: {
    "": "Closure;",
    call$1: function(frame) {
      return J.$eq(frame.get$$package(), "unittest") || frame.get$isCore();
    },
    $isFunction: true,
    $is_args1: true
  }
}],
["unittest_html_enhanced_config", "package:unittest/html_enhanced_config.dart", , N, {
  HtmlEnhancedConfiguration: {
    "": "SimpleConfiguration;_isLayoutTest,_onErrorSubscription,_onMessageSubscription,_receivePort,throwOnTestFailures,stopTestOnExpectFailure,_testLogBuffer,timeout",
    _installOnErrorHandler$0: function() {
      var t1, t2, t3;
      if (this._onErrorSubscription == null) {
        t1 = window;
        t2 = C.EventStreamProvider_error._eventType;
        t3 = new W._EventStream(t1, t2, false);
        H.setRuntimeTypeInfo(t3, [null]);
        t2 = new W._EventStreamSubscription(0, t1, t2, W._wrapZone(new N.HtmlEnhancedConfiguration__installOnErrorHandler_closure()), false);
        H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t3, 0)]);
        t2._tryResume$0();
        this._onErrorSubscription = t2;
      }
    },
    _installOnMessageHandler$0: function() {
      var t1, t2, t3;
      if (this._onMessageSubscription == null) {
        t1 = window;
        t2 = C.EventStreamProvider_message._eventType;
        t3 = new W._EventStream(t1, t2, false);
        H.setRuntimeTypeInfo(t3, [null]);
        t2 = new W._EventStreamSubscription(0, t1, t2, W._wrapZone(new N.HtmlEnhancedConfiguration__installOnMessageHandler_closure(this)), false);
        H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t3, 0)]);
        t2._tryResume$0();
        this._onMessageSubscription = t2;
      }
    },
    onInit$0: function() {
      var cssElement, t1;
      this._installOnErrorHandler$0();
      this._installOnMessageHandler$0();
      cssElement = document.head.querySelector("#_unittestcss_");
      if (cssElement == null) {
        cssElement = document.createElement("style", null);
        cssElement.id = "_unittestcss_";
        document.head.appendChild(cssElement);
      }
      t1 = "  body{\n    font-size: 14px;\n    font-family: 'Open Sans', 'Lucida Sans Unicode', 'Lucida Grande', sans-serif;\n    background: WhiteSmoke;\n  }\n\n  .unittest-group\n  {\n    background: rgb(75,75,75);\n    width:98%;\n    color: WhiteSmoke;\n    font-weight: bold;\n    padding: 6px;\n    cursor: pointer;\n\n    /* Provide some visual separation between groups for IE */\n    " + (J.contains$1$asx(window.navigator.userAgent, "MSIE") ? "border-bottom:solid black 1px;" : "") + "\n    ";
      cssElement.textContent = t1 + (J.contains$1$asx(window.navigator.userAgent, "MSIE") ? "border-top:solid #777777 1px;" : "") + "\n\n    background-image: -webkit-linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n    background-image: -moz-linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n    background-image: -ms-linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n    background-image: linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-box;\n    display: box;\n\n    -webkit-box-orient: horizontal;\n    -moz-box-orient: horizontal;\n    -ms-box-orient: horizontal;\n    box-orient: horizontal;\n\n    -webkit-box-align: center;\n    -moz-box-align: center;\n    -ms-box-align: center;\n    box-align: center;\n   }\n\n  .unittest-group-status\n  {\n    width: 20px;\n    height: 20px;\n    border-radius: 20px;\n    margin-left: 10px;\n  }\n\n  .unittest-group-status-pass{\n    background: Green;\n    background: -webkit-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: -moz-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: -ms-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n  }\n\n  .unittest-group-status-fail{\n    background: Red;\n    background: -webkit-radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n    background: -moz-radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n    background: -ms-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n  }\n\n  .unittest-overall{\n    font-size: 20px;\n  }\n\n  .unittest-summary{\n    font-size: 18px;\n  }\n\n  .unittest-pass{\n    color: Green;\n  }\n\n  .unittest-fail, .unittest-error\n  {\n    color: Red;\n  }\n\n  .unittest-row\n  {\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-box;\n    display: box;\n    -webkit-box-orient: horizontal;\n    -moz-box-orient: horizontal;\n    -ms-box-orient: horizontal;\n    box-orient: horizontal;\n    width: 100%;\n  }\n\n  .unittest-row-hidden\n  {\n    display: none;\n  }\n\n  .unittest-row-odd\n  {\n    background: WhiteSmoke;\n  }\n\n  .unittest-row-even\n  {\n    background: #E5E5E5;\n  }\n\n  .unittest-row-id\n  {\n    width: 3em;\n  }\n\n  .unittest-row-status\n  {\n    width: 4em;\n  }\n\n  .unittest-row-description\n  {\n  }\n\n  ";
      C.Window_methods.postMessage$2(window, "unittest-suite-wait-for-done", "*");
    },
    onStart$0: function() {
      this._installOnErrorHandler$0();
    },
    onSummary$5: function(passed, failed, errors, results, uncaughtError) {
      this._showInteractiveResultsInPage$6(passed, failed, errors, results, this._isLayoutTest, uncaughtError);
    },
    onDone$1: function(success) {
      var t1 = this._onErrorSubscription;
      if (t1 != null) {
        t1.cancel$0();
        this._onErrorSubscription = null;
      }
      t1 = this._onMessageSubscription;
      if (t1 != null) {
        t1.cancel$0();
        this._onMessageSubscription = null;
      }
      C.Window_methods.postMessage$2(window, "unittest-suite-done", "*");
    },
    _showInteractiveResultsInPage$6: function(passed, failed, errors, results, isLayoutTest, uncaughtError) {
      var t1, te, t2, t3, t4, t5, groupedBy, t, flattened, nonAlphanumeric, groupPassFail, test_, safeGroup, testsInGroup, groupTotalTestCount, groupTestPassedCount, passFailClass, t6, grp;
      t1 = {};
      if (isLayoutTest && passed === results._collection$_source.length)
        J.setInnerHtml$1$x(document.body, "PASS");
      else {
        te = W.Element_Element$html("<div class=\"unittest-table\"></div>", null, null);
        t2 = J.getInterceptor$x(te);
        t3 = t2.get$children(te);
        t4 = results._collection$_source;
        J.add$1$ax(t3, W.Element_Element$html(passed === t4.length ? "<div class='unittest-overall unittest-pass'>PASS</div>" : "<div class='unittest-overall unittest-fail'>FAIL</div>", null, null));
        if (passed === t4.length && uncaughtError == null)
          J.add$1$ax(t2.get$children(te), W.Element_Element$html("          <div class='unittest-pass'>All " + passed + " tests passed</div>", null, null));
        else {
          t3 = uncaughtError == null;
          if (!t3)
            J.add$1$ax(t2.get$children(te), W.Element_Element$html("            <div class='unittest-summary'>\n              <span class='unittest-error'>Uncaught error: " + uncaughtError + "</span>\n            </div>", null, null));
          t4 = t2.get$children(te);
          t5 = "          <div class='unittest-summary'>\n            <span class='unittest-pass'>Total " + passed + " passed</span>,\n            <span class='unittest-fail'>" + failed + " failed</span>,\n            <span class='unittest-error'>\n            ";
          J.add$1$ax(t4, W.Element_Element$html(t5 + (errors + (t3 ? 0 : 1)) + " errors</span>\n          </div>", null, null));
        }
        J.add$1$ax(t2.get$children(te), W.Element_Element$html("        <div><button id='btnCollapseAll'>Collapse All</button></div>\n       ", null, null));
        J.get$onClick$x(t2.query$1(te, "#btnCollapseAll")).listen$1(new N.HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure());
        t1.previousGroup_0 = "";
        groupedBy = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, [J.JSArray, N.TestCase]);
        for (t3 = results.get$iterator(results); t3.moveNext$0();) {
          t = t3._dev$_current;
          if (!groupedBy.containsKey$1(t.get$currentGroup()))
            groupedBy.$indexSet(groupedBy, t.get$currentGroup(), P.List_List(null, N.TestCase));
          J.add$1$ax(groupedBy.$index(groupedBy, t.get$currentGroup()), t);
        }
        flattened = P.List_List(null, N.TestCase);
        t3 = groupedBy.get$values(groupedBy);
        t3.forEach$1(t3, new N.HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0(flattened));
        nonAlphanumeric = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[^a-z0-9A-Z]", false, true, false), null, null);
        for (t3 = new H.ListIterator(flattened, flattened.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(flattened, 0)]), groupPassFail = true; t3.moveNext$0();) {
          test_ = t3._dev$_current;
          t4 = test_.get$currentGroup();
          safeGroup = H.stringReplaceAllUnchecked(t4, nonAlphanumeric, "_");
          if (test_.get$currentGroup() !== t1.previousGroup_0) {
            t1.previousGroup_0 = test_.get$currentGroup();
            t4 = results.where$1(results, new N.HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1(t1));
            testsInGroup = P.List_List$from(t4, true, H.getRuntimeTypeArgument(t4, "IterableBase", 0));
            groupTotalTestCount = testsInGroup.length;
            t4 = new H.WhereIterable(testsInGroup, new N.HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2());
            t4.$builtinTypeInfo = [null];
            groupTestPassedCount = t4.get$length(t4);
            groupPassFail = groupTotalTestCount === groupTestPassedCount;
            passFailClass = "unittest-group-status unittest-group-status-" + (groupPassFail ? "pass" : "fail");
            t4 = t2.get$children(te);
            t5 = "            <div>\n              <div id='" + safeGroup + "'\n                   class='unittest-group " + safeGroup + " test" + safeGroup + "'>\n                <div ";
            t6 = window.navigator.userAgent;
            t6.toString;
            t6.length;
            t5 = t5 + (H.stringContainsUnchecked(t6, "MSIE", 0) ? "style='display:inline-block' " : "") + "\n                     class='unittest-row-status'>\n                  <div class='" + passFailClass + "'></div>\n                </div>\n                <div ";
            t6 = window.navigator.userAgent;
            t6.toString;
            t6.length;
            t5 = t5 + (H.stringContainsUnchecked(t6, "MSIE", 0) ? "style='display:inline-block' " : "") + ">\n                    " + test_.get$currentGroup() + "</div>\n                &nbsp;\n                <div ";
            t6 = window.navigator.userAgent;
            t6.toString;
            t6.length;
            J.add$1$ax(t4, W.Element_Element$html(t5 + (H.stringContainsUnchecked(t6, "MSIE", 0) ? "style='display:inline-block' " : "") + ">\n                    (" + groupTestPassedCount + "/" + groupTotalTestCount + ")</div>\n              </div>\n            </div>", null, null));
            grp = safeGroup === "" ? null : t2.query$1(te, "#" + safeGroup);
            if (grp != null)
              J.get$onClick$x(grp).listen$1(new N.HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3(safeGroup));
          }
          this._buildRow$4(test_, te, safeGroup, !groupPassFail);
        }
        document.body.textContent = "";
        document.body.appendChild(te);
      }
    },
    _buildRow$4: function(test_, te, groupID, isVisible) {
      var t1, background, display, t2, t3, t4, t5, val;
      t1 = J.getInterceptor$x(test_);
      background = "unittest-row-" + (J.$mod$n(t1.get$id(test_), 2) === 0 ? "even" : "odd");
      display = isVisible ? "unittest-row" : "unittest-row-hidden";
      t2 = new N.HtmlEnhancedConfiguration__buildRow_addRowElement(test_, te, groupID, background, display);
      if (!test_.get$isComplete()) {
        t2.call$3(H.S(t1.get$id(test_)), "NO STATUS", "Test did not complete.");
        return;
      }
      t3 = H.S(t1.get$id(test_));
      t4 = J.toUpperCase$0$s(t1.get$result(test_));
      t5 = test_.get$description() + ". ";
      t1 = t1.get$message(test_);
      val = C.HtmlEscape_gsm._convert$3(t1, 0, J.get$length$asx(t1));
      t2.call$3(t3, t4, t5 + H.S(val == null ? t1 : val));
      if (test_.get$stackTrace() != null) {
        t1 = J.toString$0(test_.get$stackTrace());
        val = C.HtmlEscape_gsm._convert$3(t1, 0, J.get$length$asx(t1));
        t2.call$3("", "", "<pre>" + H.S(val == null ? t1 : val) + "</pre>");
      }
    }
  },
  HtmlEnhancedConfiguration__installOnErrorHandler_closure: {
    "": "Closure;",
    call$1: function(e) {
      return N.handleExternalError(e, "(DOM callback has errors)", null);
    },
    $isFunction: true,
    $is_args1: true
  },
  HtmlEnhancedConfiguration__installOnMessageHandler_closure: {
    "": "Closure;this_0",
    call$1: function(e) {
      if ("unittest-suite-external-error" === J.get$data$x(e))
        N.handleExternalError("<unknown>", "(external error detected)", null);
      return;
    },
    $isFunction: true,
    $is_args1: true
  },
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure: {
    "": "Closure;",
    call$1: function(_) {
      var t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".unittest-row"), null);
      t1.forEach$1(t1, new N.HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2());
    },
    $isFunction: true,
    $is_args1: true
  },
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2: {
    "": "Closure;",
    call$1: function(el) {
      var t1, t2;
      t1 = J.getInterceptor$x(el);
      t2 = t1.get$attributes(el);
      t1 = t1.get$attributes(el)._html$_element.getAttribute("class");
      t1.toString;
      t1 = H.stringReplaceAllUnchecked(t1, "unittest-row ", "unittest-row-hidden ");
      t2._html$_element.setAttribute("class", t1);
      return t1;
    },
    $isFunction: true,
    $is_args1: true
  },
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0: {
    "": "Closure;flattened_1",
    call$1: function(tList) {
      J.sort$1$ax(tList, new N.HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1());
      C.JSArray_methods.addAll$1(this.flattened_1, tList);
    },
    $isFunction: true,
    $is_args1: true
  },
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1: {
    "": "Closure;",
    call$2: function(tcA, tcB) {
      return J.$sub$n(J.get$id$x(tcA), J.get$id$x(tcB));
    },
    $isFunction: true,
    $is_args2: true
  },
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1: {
    "": "Closure;box_0",
    call$1: function(t) {
      return t.get$currentGroup() === this.box_0.previousGroup_0;
    },
    $isFunction: true,
    $is_args1: true
  },
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2: {
    "": "Closure;",
    call$1: function(t) {
      return J.get$result$x(t) === "pass";
    },
    $isFunction: true,
    $is_args1: true
  },
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3: {
    "": "Closure;safeGroup_2",
    call$1: function(_) {
      var t1 = this.safeGroup_2;
      if (J.contains$1$asx(document.querySelector(".unittest-row-" + t1).getAttribute("class"), "unittest-row ")) {
        t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".unittest-row-" + t1), null);
        t1.forEach$1(t1, new N.HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure());
      } else {
        t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".unittest-row-" + t1), null);
        t1.forEach$1(t1, new N.HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0());
      }
    },
    $isFunction: true,
    $is_args1: true
  },
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure: {
    "": "Closure;",
    call$1: function(e) {
      var t1, t2;
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$attributes(e);
      t1 = t1.get$attributes(e)._html$_element.getAttribute("class");
      t1.toString;
      t1 = H.stringReplaceAllUnchecked(t1, "unittest-row ", "unittest-row-hidden ");
      t2._html$_element.setAttribute("class", t1);
      return t1;
    },
    $isFunction: true,
    $is_args1: true
  },
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0: {
    "": "Closure;",
    call$1: function(e) {
      var t1, t2;
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$attributes(e);
      t1 = t1.get$attributes(e)._html$_element.getAttribute("class");
      t1.toString;
      t1 = H.stringReplaceAllUnchecked(t1, "unittest-row-hidden", "unittest-row");
      t2._html$_element.setAttribute("class", t1);
      return t1;
    },
    $isFunction: true,
    $is_args1: true
  },
  HtmlEnhancedConfiguration__buildRow_addRowElement: {
    "": "Closure;test__0,te_1,groupID_2,background_3,display_4",
    call$3: function(id, $status, description) {
      var t1, t2;
      t1 = J.get$children$x(this.te_1);
      t2 = " <div>\n                <div class='" + this.display_4 + " unittest-row-" + this.groupID_2 + " " + this.background_3 + "'>\n                  <div ";
      t2 = t2 + (J.contains$1$asx(window.navigator.userAgent, "MSIE") ? "style='display:inline-block' " : "") + "\n                       class='unittest-row-id'>" + H.S(id) + "</div>\n                  <div ";
      t2 = t2 + (J.contains$1$asx(window.navigator.userAgent, "MSIE") ? "style='display:inline-block' " : "") + "\n                       class=\"unittest-row-status unittest-" + H.S(J.get$result$x(this.test__0)) + "\">\n                       " + H.S($status) + "</div>\n                  <div ";
      J.add$1$ax(t1, W.Element_Element$html(t2 + (J.contains$1$asx(window.navigator.userAgent, "MSIE") ? "style='display:inline-block' " : "") + "\n                       class='unittest-row-description'>" + H.S(description) + "</div>\n                </div>\n              </div>", null, null));
    },
    $isFunction: true
  }
}],
["utils", "package:unittest/src/utils.dart", , N, {
  typeName: function(x) {
    var type, t1, exception;
    try {
      if (x == null)
        return "null";
      t1 = J.get$runtimeType$(x);
      type = t1.toString$0(t1);
      t1 = J.startsWith$1$s(type, "_") ? "?" : type;
      return t1;
    } catch (exception) {
      H.unwrapException(exception);
      return "?";
    }

  },
  escapeString: function(source) {
    var t1 = new H.MappedListIterable(J.split$1$s(source, ""), N._escapeChar$closure);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1.join$1(t1, "");
  },
  _escapeChar: function(ch) {
    var t1 = J.getInterceptor(ch);
    if (t1.$eq(ch, "'"))
      return "\\'";
    else if (t1.$eq(ch, "\n"))
      return "\\n";
    else if (t1.$eq(ch, "\r"))
      return "\\r";
    else if (t1.$eq(ch, "\t"))
      return "\\t";
    else
      return ch;
  },
  Pair: {
    "": "Object;first>,last>",
    toString$0: function(_) {
      return "(" + H.S(this.first) + ", " + H.S(this.last) + ")";
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isPair)
        return false;
      return J.$eq(other.first, this.first) && J.$eq(other.last, this.last);
    },
    get$hashCode: function(_) {
      return J.$xor$n(J.get$hashCode$(this.first), J.get$hashCode$(this.last));
    },
    $isPair: true
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$1(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.isAssignable$closure = H.isAssignable$closure = new H.Closure$2(H.isAssignable, "isAssignable$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new H.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$21(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new H.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new H.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions._Html5NodeValidator__standardAttributeValidator$closure = W._Html5NodeValidator__standardAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__standardAttributeValidator, "_Html5NodeValidator__standardAttributeValidator$closure");
init.globalFunctions._Html5NodeValidator__uriAttributeValidator$closure = W._Html5NodeValidator__uriAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__uriAttributeValidator, "_Html5NodeValidator__uriAttributeValidator$closure");
init.globalFunctions.max$closure = P.max$closure = new H.Closure$2(P.max, "max$closure");
init.globalFunctions.main5$closure = L.main5$closure = new H.Closure$0(L.main5, "main5$closure");
init.globalFunctions._defaultErrorFormatter$closure = O._defaultErrorFormatter$closure = new O.Closure$5(O._defaultErrorFormatter, "_defaultErrorFormatter$closure");
init.globalFunctions.main1$closure = Z.main1$closure = new H.Closure$0(Z.main1, "main1$closure");
init.globalFunctions.main0$closure = Y.main0$closure = new H.Closure$0(Y.main0, "main0$closure");
init.globalFunctions._fromNumber$closure = Y._fromNumber$closure = new H.Closure$1(Y._fromNumber, "_fromNumber$closure");
init.globalFunctions._final$closure = Y._final$closure = new H.Closure$0(Y._final, "_final$closure");
init.globalFunctions.main4$closure = T.main4$closure = new H.Closure$0(T.main4, "main4$closure");
init.globalFunctions.main3$closure = G.main3$closure = new H.Closure$0(G.main3, "main3$closure");
init.globalFunctions.main2$closure = F.main2$closure = new H.Closure$0(F.main2, "main2$closure");
init.globalFunctions._sum$closure = F._sum$closure = new H.Closure$1(F._sum, "_sum$closure");
init.globalFunctions._testStringReader$closure = N._testStringReader$closure = new H.Closure$0(N._testStringReader, "_testStringReader$closure");
init.globalFunctions.TestAttachedEvents__testRemove$closure = N.TestAttachedEvents__testRemove$closure = new H.Closure$0(N.TestAttachedEvents__testRemove, "TestAttachedEvents__testRemove$closure");
init.globalFunctions.TestAttachedEvents__testWholeDeal$closure = N.TestAttachedEvents__testWholeDeal$closure = new H.Closure$0(N.TestAttachedEvents__testWholeDeal, "TestAttachedEvents__testWholeDeal$closure");
init.globalFunctions.TestPropertyEventIntegration_doTest$closure = N.TestPropertyEventIntegration_doTest$closure = new H.Closure$0(N.TestPropertyEventIntegration_doTest, "TestPropertyEventIntegration_doTest$closure");
init.globalFunctions.TestArray2d__testGetAdjacent$closure = N.TestArray2d__testGetAdjacent$closure = new H.Closure$0(N.TestArray2d__testGetAdjacent, "TestArray2d__testGetAdjacent$closure");
init.globalFunctions.TestArray2d__testSetGet$closure = N.TestArray2d__testSetGet$closure = new H.Closure$0(N.TestArray2d__testSetGet, "TestArray2d__testSetGet$closure");
init.globalFunctions.TestArray2d__testDefaultCtor$closure = N.TestArray2d__testDefaultCtor$closure = new H.Closure$0(N.TestArray2d__testDefaultCtor, "TestArray2d__testDefaultCtor$closure");
init.globalFunctions.TestArray2d__testReadonlyFromCtorParams$closure = N.TestArray2d__testReadonlyFromCtorParams$closure = new H.Closure$0(N.TestArray2d__testReadonlyFromCtorParams, "TestArray2d__testReadonlyFromCtorParams$closure");
init.globalFunctions.TestArray2d__testCollectionEquals$closure = N.TestArray2d__testCollectionEquals$closure = new H.Closure$0(N.TestArray2d__testCollectionEquals, "TestArray2d__testCollectionEquals$closure");
init.globalFunctions.TestCollectionUtil__testListish$closure = N.TestCollectionUtil__testListish$closure = new H.Closure$0(N.TestCollectionUtil__testListish, "TestCollectionUtil__testListish$closure");
init.globalFunctions.TestCollectionUtil__testAllUnique$closure = N.TestCollectionUtil__testAllUnique$closure = new H.Closure$0(N.TestCollectionUtil__testAllUnique, "TestCollectionUtil__testAllUnique$closure");
init.globalFunctions.TestEnumerable__testConcat$closure = N.TestEnumerable__testConcat$closure = new H.Closure$0(N.TestEnumerable__testConcat, "TestEnumerable__testConcat$closure");
init.globalFunctions.TestEnumerable__testExclude$closure = N.TestEnumerable__testExclude$closure = new H.Closure$0(N.TestEnumerable__testExclude, "TestEnumerable__testExclude$closure");
init.globalFunctions.TestEnumerable__testDistinct$closure = N.TestEnumerable__testDistinct$closure = new H.Closure$0(N.TestEnumerable__testDistinct, "TestEnumerable__testDistinct$closure");
init.globalFunctions.TestEnumerable__testForEachWithIndex$closure = N.TestEnumerable__testForEachWithIndex$closure = new H.Closure$0(N.TestEnumerable__testForEachWithIndex, "TestEnumerable__testForEachWithIndex$closure");
init.globalFunctions.TestEnumerable__testToMap$closure = N.TestEnumerable__testToMap$closure = new H.Closure$0(N.TestEnumerable__testToMap, "TestEnumerable__testToMap$closure");
init.globalFunctions.TestEnumerable__testCount$closure = N.TestEnumerable__testCount$closure = new H.Closure$0(N.TestEnumerable__testCount, "TestEnumerable__testCount$closure");
init.globalFunctions.TestEnumerable__testSelectNumbers$closure = N.TestEnumerable__testSelectNumbers$closure = new H.Closure$0(N.TestEnumerable__testSelectNumbers, "TestEnumerable__testSelectNumbers$closure");
init.globalFunctions.TestEnumerable__testComplexGrouping$closure = N.TestEnumerable__testComplexGrouping$closure = new H.Closure$0(N.TestEnumerable__testComplexGrouping, "TestEnumerable__testComplexGrouping$closure");
init.globalFunctions.TestEnumerable__testSimpleGrouping$closure = N.TestEnumerable__testSimpleGrouping$closure = new H.Closure$0(N.TestEnumerable__testSimpleGrouping, "TestEnumerable__testSimpleGrouping$closure");
init.globalFunctions.TestNumberEnumerable__testRange$closure = N.TestNumberEnumerable__testRange$closure = new H.Closure$0(N.TestNumberEnumerable__testRange, "TestNumberEnumerable__testRange$closure");
init.globalFunctions.TestNumberEnumerable__testSum$closure = N.TestNumberEnumerable__testSum$closure = new H.Closure$0(N.TestNumberEnumerable__testSum, "TestNumberEnumerable__testSum$closure");
init.globalFunctions.TestNumberEnumerable__testMin$closure = N.TestNumberEnumerable__testMin$closure = new H.Closure$0(N.TestNumberEnumerable__testMin, "TestNumberEnumerable__testMin$closure");
init.globalFunctions.TestNumberEnumerable__testMax$closure = N.TestNumberEnumerable__testMax$closure = new H.Closure$0(N.TestNumberEnumerable__testMax, "TestNumberEnumerable__testMax$closure");
init.globalFunctions.TestNumberEnumerable__testAverage$closure = N.TestNumberEnumerable__testAverage$closure = new H.Closure$0(N.TestNumberEnumerable__testAverage, "TestNumberEnumerable__testAverage$closure");
init.globalFunctions.TestSequence__testLast$closure = N.TestSequence__testLast$closure = new H.Closure$0(N.TestSequence__testLast, "TestSequence__testLast$closure");
init.globalFunctions.TestSequence__testSimple$closure = N.TestSequence__testSimple$closure = new H.Closure$0(N.TestSequence__testSimple, "TestSequence__testSimple$closure");
init.globalFunctions.TestSequence__testIndexOf$closure = N.TestSequence__testIndexOf$closure = new H.Closure$0(N.TestSequence__testIndexOf, "TestSequence__testIndexOf$closure");
init.globalFunctions.TestHslColor__testEquals$closure = N.TestHslColor__testEquals$closure = new H.Closure$0(N.TestHslColor__testEquals, "TestHslColor__testEquals$closure");
init.globalFunctions.TestHslColor__testInvalid$closure = N.TestHslColor__testInvalid$closure = new H.Closure$0(N.TestHslColor__testInvalid, "TestHslColor__testInvalid$closure");
init.globalFunctions.TestRgbColor__testEquals$closure = N.TestRgbColor__testEquals$closure = new H.Closure$0(N.TestRgbColor__testEquals, "TestRgbColor__testEquals$closure");
init.globalFunctions.TestRgbColor__testInvalid$closure = N.TestRgbColor__testInvalid$closure = new H.Closure$0(N.TestRgbColor__testInvalid, "TestRgbColor__testInvalid$closure");
init.globalFunctions.TestRgbColor__testHslRoundTrip$closure = N.TestRgbColor__testHslRoundTrip$closure = new H.Closure$0(N.TestRgbColor__testHslRoundTrip, "TestRgbColor__testHslRoundTrip$closure");
init.globalFunctions.TestRgbColor__testHexRoundTrip$closure = N.TestRgbColor__testHexRoundTrip$closure = new H.Closure$0(N.TestRgbColor__testHexRoundTrip, "TestRgbColor__testHexRoundTrip$closure");
init.globalFunctions.TestRgbColor__testFromHex$closure = N.TestRgbColor__testFromHex$closure = new H.Closure$0(N.TestRgbColor__testFromHex, "TestRgbColor__testFromHex$closure");
init.globalFunctions.TestRgbColor__testInvalidHex$closure = N.TestRgbColor__testInvalidHex$closure = new H.Closure$0(N.TestRgbColor__testInvalidHex, "TestRgbColor__testInvalidHex$closure");
init.globalFunctions.TestBox__testEquals$closure = N.TestBox__testEquals$closure = new H.Closure$0(N.TestBox__testEquals, "TestBox__testEquals$closure");
init.globalFunctions.TestBox__testSizeLocation$closure = N.TestBox__testSizeLocation$closure = new H.Closure$0(N.TestBox__testSizeLocation, "TestBox__testSizeLocation$closure");
init.globalFunctions.TestBox__testValid$closure = N.TestBox__testValid$closure = new H.Closure$0(N.TestBox__testValid, "TestBox__testValid$closure");
init.globalFunctions.TestUtil__testSplitLines$closure = N.TestUtil__testSplitLines$closure = new H.Closure$0(N.TestUtil__testSplitLines, "TestUtil__testSplitLines$closure");
init.globalFunctions.TestUtil__testGetHashCode$closure = N.TestUtil__testGetHashCode$closure = new H.Closure$0(N.TestUtil__testGetHashCode, "TestUtil__testGetHashCode$closure");
init.globalFunctions._nextTestCase$closure = N._nextTestCase$closure = new H.Closure$0(N._nextTestCase, "_nextTestCase$closure");
init.globalFunctions.runTests$closure = N.runTests$closure = new H.Closure$0(N.runTests, "runTests$closure");
init.globalFunctions.escapeString$closure = N.escapeString$closure = new H.Closure$1(N.escapeString, "escapeString$closure");
init.globalFunctions._escapeChar$closure = N._escapeChar$closure = new H.Closure$1(N._escapeChar, "_escapeChar$closure");
// Runtime type support
W.Node.$isNode = true;
W.Node.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
P.Match.$isObject = true;
J.JSArray.$isList = true;
J.JSArray.$isIterable = true;
J.JSArray.$isObject = true;
N.TestCloneable.$isObject = true;
X.AffineTransform.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isObject = true;
N.TestCase.$isTestCase = true;
N.TestCase.$isObject = true;
N.Pair.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
S.Frame.$isObject = true;
P.Uri.$isObject = true;
P.LibraryMirror.$isLibraryMirror = true;
P.LibraryMirror.$isMirror = true;
P.LibraryMirror.$isMirror = true;
P.LibraryMirror.$isObject = true;
P.Symbol0.$isSymbol0 = true;
P.Symbol0.$isObject = true;
P.DeclarationMirror.$isMirror = true;
P.DeclarationMirror.$isObject = true;
P.Mirror.$isMirror = true;
P.Mirror.$isObject = true;
P.VariableMirror.$isMirror = true;
P.VariableMirror.$isObject = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isObject = true;
P.MethodMirror.$isMirror = true;
P.MethodMirror.$isObject = true;
P.ClassMirror.$isMirror = true;
P.ClassMirror.$isMirror = true;
P.ClassMirror.$isObject = true;
P.TypeVariableMirror.$isMirror = true;
P.TypeVariableMirror.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
X.RgbColor.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
P.ArgumentError.$isObject = true;
X.EventArgs.$isObject = true;
X.Property.$isObject = true;
P.Object.$isObject = true;
X.Attachable.$isObject = true;
X.EventHandle.$isObject = true;
X.PropertyChangedEventArgs.$isObject = true;
P.Set.$isSet = true;
P.Set.$isIterable = true;
P.Set.$isObject = true;
M._GraphNode.$is_GraphNode = true;
M._GraphNode.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
W.MouseEvent.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
W.Event.$isObject = true;
W.MessageEvent.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
X.AttachableObject.$isAttachableObject = true;
X.AttachableObject.$isObject = true;
O.Matcher.$isMatcher = true;
O.Matcher.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
O.Description.$isDescription = true;
O.Description.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mod$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$mod(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.error$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).error$1(receiver, a0);
};
J.error$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).error$2(receiver, a0, a1);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$href$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$href(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$last$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$last(receiver);
};
J.get$lastChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lastChild(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$location$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$location(receiver);
};
J.get$message$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$message(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$onClick$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onClick(receiver);
};
J.get$path$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$path(receiver);
};
J.get$r$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$r(receiver);
};
J.get$result$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$result(receiver);
};
J.get$runtimeType$ = function(receiver) {
  return J.getInterceptor(receiver).get$runtimeType(receiver);
};
J.get$stream$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$stream(receiver);
};
J.get$tagName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$tagName(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.matchAsPrefix$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
};
J.matches$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).matches$2(receiver, a0, a1);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.reduce$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).reduce$1(receiver, a0);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceFirst$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceFirst$2(receiver, a0, a1);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.setInnerHtml$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).setInnerHtml$1(receiver, a0);
};
J.sort$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toUpperCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
C.Box_0_0_1_1 = new X.Box(0, 0, 1, 1);
C.C_EmptyIterator = new H.EmptyIterator();
C.C_EventArgs = new X.EventArgs();
C.C_JSArray = new J.JSArray();
C.C_JSBool = new J.JSBool();
C.C_JSDouble = new J.JSDouble();
C.C_JSInt = new J.JSInt();
C.C_JSNumber = new J.JSNumber();
C.C_JSString = new J.JSString();
C.C__DelayedDone = new P._DelayedDone();
C.C__IsFalse = new O._IsFalse();
C.C__IsNull = new O._IsNull();
C.C__IsTrue = new O._IsTrue();
C.C__Random = new P._Random();
C.C__ReturnsNormally = new O._ReturnsNormally();
C.C__RootZone = new P._RootZone();
C.C__UndefinedValue = new X._UndefinedValue();
C.Coordinate_1_0 = new X.Coordinate(1, 0);
C.Coordinate_2_2 = new X.Coordinate(2, 2);
C.Duration_0 = new P.Duration(0);
C.Duration_120000000 = new P.Duration(120000000);
C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
C.EventStreamProvider_error = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.Event]);
C.EventStreamProvider_message = H.setRuntimeTypeInfo(new W.EventStreamProvider("message"), [W.MessageEvent]);
C.HtmlEscapeMode_p2v = new P.HtmlEscapeMode("unknown", true, true, true, true);
C.HtmlEscape_gsm = new P.HtmlEscape(C.HtmlEscapeMode_p2v);
C.InvalidOperationError_61T = new Q.InvalidOperationError("Input contained a null item");
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_IX5 = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_U4w = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [J.JSInt]);
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_1_2_3 = Isolate.makeConstantList([1, 2, 3]);
C.List_6Pr = Isolate.makeConstantList([0, 0, 26624, 1023, 0, 0, 65534, 2047]);
C.List_test = Isolate.makeConstantList(["test"]);
C.Tuple_test_List_test = new X.Tuple("test", C.List_test);
C.List_test_test = Isolate.makeConstantList(["test", "test"]);
C.Tuple_46y = new X.Tuple("test\ntest", C.List_test_test);
C.List_O9m = Isolate.makeConstantList(["", ""]);
C.Tuple_sBb = new X.Tuple("\n", C.List_O9m);
C.List_qtl = Isolate.makeConstantList(["  ", "  "]);
C.Tuple_w05 = new X.Tuple("  \n  ", C.List_qtl);
C.List_2Vk = Isolate.makeConstantList(["  ", " ", ""]);
C.Tuple_CtR = new X.Tuple("  \n \n", C.List_2Vk);
C.List_Avr = Isolate.makeConstantList([C.Tuple_test_List_test, C.Tuple_46y, C.Tuple_sBb, C.Tuple_w05, C.Tuple_CtR, C.Tuple_CtR]);
C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
C.List_empty = Isolate.makeConstantList([]);
C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeVariableMirror]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.List_oaL = Isolate.makeConstantList([null, 1 / 0, -1 / 0, 0 / 0]);
C.List_qg4 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.List_yyN = Isolate.makeConstantList([0, 0, 360, 0, -1, 359, -361, 359, 721, 1]);
C.NodeList_methods = W.NodeList.prototype;
C.Symbol_Directory = new H.Symbol("Directory");
C.Symbol_Platform = new H.Symbol("Platform");
C.Symbol_current = new H.Symbol("current");
C.Symbol_dynamic = new H.Symbol("dynamic");
C.Symbol_operatingSystem = new H.Symbol("operatingSystem");
C.Symbol_window = new H.Symbol("window");
C.TestSequence_false = new N.TestSequence(false);
C.TestSequence_true = new N.TestSequence(true);
C._ArgumentError_ArgumentError = new O._ArgumentError("ArgumentError");
C.Throws__ArgumentError_ArgumentError = new O.Throws(C._ArgumentError_ArgumentError);
C._UnsupportedError_UnsupportedError = new O._UnsupportedError("UnsupportedError");
C.Throws_fPC = new O.Throws(C._UnsupportedError_UnsupportedError);
C._InvalidOperationError_InvalidOperationException = new Y._InvalidOperationError("InvalidOperationException");
C.Throws_fgL = new O.Throws(C._InvalidOperationError_InvalidOperationException);
C._NullArgumentError_NullArgumentException = new Y._NullArgumentError("NullArgumentException");
C.Throws_gT2 = new O.Throws(C._NullArgumentError_NullArgumentException);
C.Throws_null = new O.Throws(null);
C.Type_AGr = H.createRuntimeType('JsTypeVariableMirror');
C.Type_Ejg = H.createRuntimeType('String');
C.Type_EsU = H.createRuntimeType('bool');
C.Type_HqF = H.createRuntimeType('Object');
C.Type_SnA = H.createRuntimeType('int');
C.Type_XXD = H.createRuntimeType('JSObject');
C.Type_eZO = H.createRuntimeType('Null');
C.Type_oqh = H.createRuntimeType('Uint64List');
C.Type_qq1 = H.createRuntimeType('double');
C.Type_qxd = H.createRuntimeType('Int64List');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Utf8Codec_false = new P.Utf8Codec(false);
C.Vector_10_0 = new X.Vector(10, 0);
C.Vector_10_10 = new X.Vector(10, 10);
C.Vector_1_m1 = new X.Vector(1, -1);
C.Vector_2_2 = new X.Vector(2, 2);
C.Window_methods = W.Window.prototype;
C.isInstanceOf_B8J = H.setRuntimeTypeInfo(new O.isInstanceOf("specified type"), [P.ArgumentError]);
$.lazyPort = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$._botHelperRandom = null;
$.printToZone = null;
$.classMirrors = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$._assertFailureHandler = null;
$._assertErrorFormatter = null;
$._drValue = 0;
$.TestCloneable__globalId = 0;
$._config = null;
$.groupSep = " ";
$._soloNestingLevel = 0;
$._soloTestSeen = false;
$._currentTestCaseIndex = 0;
$._initialized = false;
$._uncaughtErrorMessage = null;
$.formatStacks = true;
$.filterStacks = true;
$.interceptedNames = ["$add", "$and", "$div", "$eq", "$ge", "$gt", "$index", "$indexSet", "$le", "$lt", "$mod", "$mul", "$shl", "$shr", "$sub", "$tdiv", "$xor", "_checkIndex$2", "_checkSublistArguments$3", "_invalidIndex$2", "_rangeCheck$2", "_replaceChild$2", "abs$0", "add$1", "addAll$1", "addEventListener$3", "allMatches$1", "clear$0", "close$0", "codeUnitAt$1", "compareTo$1", "complete$0", "complete$1", "contains$1", "contains$2", "createFragment$2$treeSanitizer", "createFragment$3$treeSanitizer$validator", "elementAt$1", "endsWith$1", "error$1", "error$2", "expand$1", "fold$2", "forEach$1", "get$attributes", "get$children", "get$className", "get$classes", "get$data", "get$error", "get$first", "get$hashCode", "get$host", "get$hostname", "get$href", "get$id", "get$isEmpty", "get$isInfinite", "get$isNaN", "get$isNegative", "get$isNotEmpty", "get$iterator", "get$last", "get$lastChild", "get$left", "get$length", "get$location", "get$message", "get$name", "get$nodeType", "get$nodes", "get$onClick", "get$path", "get$port", "get$protocol", "get$r", "get$result", "get$reversed", "get$runtimeType", "get$single", "get$stream", "get$tagName", "get$value", "get$values", "get$x", "get$y", "getRange$2", "indexOf$1", "indexOf$2", "insert$2", "join$0", "join$1", "join$2", "join$8", "lastIndexOf$1", "lastIndexOf$2", "map$1", "matchAsPrefix$1", "matchAsPrefix$2", "matches$2", "max$0", "min$0", "noSuchMethod$1", "onError$1", "pause$0", "pause$1", "postMessage$2", "postMessage$3", "query$1", "reduce$1", "register$2", "remainder$1", "remove$0", "remove$1", "removeAt$1", "removeEventListener$3", "removeLast$0", "removeRange$2", "replaceAll$2", "replaceFirst$2", "replaceWith$1", "reset$0", "rotate$1", "round$0", "roundToDouble$0", "scale$1", "send$1", "send$2", "set$className", "set$href", "set$length", "setInnerHtml$1", "setInnerHtml$3$treeSanitizer$validator", "skipWhile$1", "sort$1", "split$1", "startsWith$1", "startsWith$2", "sublist$1", "sublist$2", "substring$1", "substring$2", "takeWhile$1", "toInt$0", "toList$0", "toList$1$growable", "toLowerCase$0", "toRadixString$1", "toString$0", "toUpperCase$0", "translate$2", "trim$0", "where$1"];
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  var t1 = new P.Expando(null);
  H.setRuntimeTypeInfo(t1, [J.JSInt]);
  return t1;
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "_validHexColorRe", "RgbColor__validHexColorRe", "get$RgbColor__validHexColorRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^#(?:[0-9a-f]{6})$", false, false, false), null, null);
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_dynamicType", "JsMirrorSystem__dynamicType", "get$JsMirrorSystem__dynamicType", function() {
  return new H.JsTypeMirror(C.Symbol_dynamic);
});
Isolate.$lazy($, "librariesByName", "JsMirrorSystem_librariesByName", "get$JsMirrorSystem_librariesByName", function() {
  return H.JsMirrorSystem_computeLibrariesByName();
});
Isolate.$lazy($, "currentJsMirrorSystem", "currentJsMirrorSystem", "get$currentJsMirrorSystem", function() {
  return new H.JsMirrorSystem(null, new H.JsIsolateMirror(init.globalState.currentContext));
});
Isolate.$lazy($, "mangledNames", "mangledNames", "get$mangledNames", function() {
  return H.computeMangledNames(init.mangledNames, false);
});
Isolate.$lazy($, "reflectiveNames", "reflectiveNames", "get$reflectiveNames", function() {
  return H.computeReflectiveNames($.get$mangledNames());
});
Isolate.$lazy($, "mangledGlobalNames", "mangledGlobalNames", "get$mangledGlobalNames", function() {
  return H.computeMangledNames(init.mangledGlobalNames, true);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  var t1, t2;
  t1 = {func: "void_", void: true};
  t2 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t2, [t1]);
  t2.ListQueue$1(null, t1);
  return t2;
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_splitRe", "Uri__splitRe", "get$Uri__splitRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:([^:/?#]+):)?(?://(?:([^/?#]*)@)?(?:([\\w\\d\\-\\u0100-\\uffff.%]*)|\\[([A-Fa-f0-9:.]*)\\])(?::([0-9]+))?)?([^?#[]+)?(?:\\?([^#]*))?(?:#(.*))?$", false, true, false), null, null);
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_vmFrame", "_vmFrame", "get$_vmFrame", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^#\\d+\\s+([^\\s].*) \\((.+?):(\\d+)(?::(\\d+))?\\)$", false, true, false), null, null);
});
Isolate.$lazy($, "_v8Frame", "_v8Frame", "get$_v8Frame", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^\\s*at (?:([^\\s].*?)(?: \\[as [^\\]]+\\])? \\((.+):(\\d+):(\\d+)\\)|(.+):(\\d+):(\\d+))$", false, true, false), null, null);
});
Isolate.$lazy($, "_safariFrame", "_safariFrame", "get$_safariFrame", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:([0-9A-Za-z_$]*)@)?(.*):(\\d*):(\\d*)$", false, true, false), null, null);
});
Isolate.$lazy($, "_firefoxFrame", "_firefoxFrame", "get$_firefoxFrame", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^([^@(/]*)(?:\\(.*\\))?((?:/[^/]*)*)(?:\\(.*\\))?@(.*):(\\d+)$", false, true, false), null, null);
});
Isolate.$lazy($, "_friendlyFrame", "_friendlyFrame", "get$_friendlyFrame", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^([^\\s]+)(?: (\\d+)(?::(\\d+))?)?\\s+([^\\d][^\\s]*)$", false, true, false), null, null);
});
Isolate.$lazy($, "_initialDot", "_initialDot", "get$_initialDot", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^\\.", false, true, false), null, null);
});
Isolate.$lazy($, "wrapAsync", "wrapAsync", "get$wrapAsync", function() {
  return new O.closure();
});
Isolate.$lazy($, "_builder", "_builder", "get$_builder", function() {
  return B.Builder_Builder(null, null);
});
Isolate.$lazy($, "posix", "Style_posix", "get$Style_posix", function() {
  return new B._PosixStyle("posix", "/", new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("/", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[^/]$", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^/", false, true, false), null, null), null);
});
Isolate.$lazy($, "windows", "Style_windows", "get$Style_windows", function() {
  return new B._WindowsStyle("windows", "\\", new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[/\\\\]", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[^/\\\\]$", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(\\\\\\\\|[a-zA-Z]:[/\\\\])", false, true, false), null, null), null);
});
Isolate.$lazy($, "url", "Style_url", "get$Style_url", function() {
  return new B._UrlStyle("url", "/", new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("/", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^/", false, true, false), null, null), null);
});
Isolate.$lazy($, "platform", "Style_platform", "get$Style_platform", function() {
  return B.Style__getPlatformStyle();
});
Isolate.$lazy($, "_testEvent1", "TestAttachedEvents__testEvent1", "get$TestAttachedEvents__testEvent1", function() {
  var t1 = new X.AttachedEvent("testEvent1");
  H.setRuntimeTypeInfo(t1, [X.EventArgs]);
  return t1;
});
Isolate.$lazy($, "_testEvent2", "TestAttachedEvents__testEvent2", "get$TestAttachedEvents__testEvent2", function() {
  var t1 = new X.AttachedEvent("testEvent2");
  H.setRuntimeTypeInfo(t1, [X.EventArgs]);
  return t1;
});
Isolate.$lazy($, "_nameProperty", "TestPropertyEventIntegration__nameProperty", "get$TestPropertyEventIntegration__nameProperty", function() {
  var t1 = new X.Property(null, "name");
  H.setRuntimeTypeInfo(t1, [J.JSString]);
  return t1;
});
Isolate.$lazy($, "_ageProperty", "TestPropertyEventIntegration__ageProperty", "get$TestPropertyEventIntegration__ageProperty", function() {
  var t1 = new X.Property(0, "age");
  H.setRuntimeTypeInfo(t1, [J.JSInt]);
  return t1;
});
Isolate.$lazy($, "_terseRegExp", "_terseRegExp", "get$_terseRegExp", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("(-patch)?(/.*)?$", false, true, false), null, null);
});
Isolate.$lazy($, "_v8Trace", "_v8Trace", "get$_v8Trace", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\n    ?at ", false, true, false), null, null);
});
Isolate.$lazy($, "_v8TraceLine", "_v8TraceLine", "get$_v8TraceLine", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("    ?at ", false, true, false), null, null);
});
Isolate.$lazy($, "_safariTrace", "_safariTrace", "get$_safariTrace", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^([0-9A-Za-z_$]*@)?.*:\\d*:\\d*$", true, true, false), null, null);
});
Isolate.$lazy($, "_firefoxTrace", "_firefoxTrace", "get$_firefoxTrace", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^([.0-9A-Za-z_$/<]|\\(.*\\))*@", false, true, false), null, null);
});
Isolate.$lazy($, "_friendlyTrace", "_friendlyTrace", "get$_friendlyTrace", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^[^\\s]+( \\d+(:\\d+)?)?[ \\t]+[^\\s]+$", true, true, false), null, null);
});
Isolate.$lazy($, "_testCases", "_testCases", "get$_testCases", function() {
  return P.List_List(null, N.TestCase);
});
Isolate.$lazy($, "testCases", "testCases", "get$testCases", function() {
  var t1 = new P.UnmodifiableListView($.get$_testCases());
  H.setRuntimeTypeInfo(t1, [N.TestCase]);
  return t1;
});
Isolate.$lazy($, "_rootContext", "_rootContext", "get$_rootContext", function() {
  var t1 = new N._GroupContext(null, "", null, null);
  t1._testSetup = null;
  t1._testTeardown = null;
  return t1;
});
Isolate.$lazy($, "_currentContext", "_currentContext", "get$_currentContext", function() {
  return $.get$_rootContext();
});
Isolate.$lazy($, "_lastBreath", "_lastBreath", "get$_lastBreath", function() {
  return P.DateTime$_now().millisecondsSinceEpoch;
});
Isolate.$lazy($, "_singletonNotLayout", "_singletonNotLayout", "get$_singletonNotLayout", function() {
  var t1 = [];
  H.setRuntimeTypeInfo(t1, [[N.Pair, J.JSString, P.StackTrace]]);
  t1 = new N.HtmlEnhancedConfiguration(false, null, null, null, true, true, t1, C.Duration_120000000);
  if ($._assertErrorFormatter == null)
    $._assertErrorFormatter = O._defaultErrorFormatter$closure;
  O.configureExpectFailureHandler(new N._ExpectFailureHandler(t1));
  return t1;
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(L.main5$closure); });
  } else {
    H.startRootIsolate(L.main5$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      constructor["@"] = desc;
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    if (!init.lazies)
      init.lazies = {};
    init.lazies[fieldName] = getterName;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  AnchorElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AnchorElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  AnchorElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AnchorElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AnchorElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  AreaElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AreaElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  AreaElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AreaElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AreaElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  BaseElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  BaseElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function Blob() {
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Blob.prototype = $desc;
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  CompositionEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CssStyleDeclaration() {
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DocumentType() {
  }
  DocumentType.builtin$cls = "DocumentType";
  if (!"name" in DocumentType)
    DocumentType.name = "DocumentType";
  $desc = $collectedClasses.DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentType.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  DomError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  DomError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  DomException.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function DomImplementation() {
  }
  DomImplementation.builtin$cls = "DomImplementation";
  if (!"name" in DomImplementation)
    DomImplementation.name = "DomImplementation";
  $desc = $collectedClasses.DomImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomImplementation.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  Element.prototype.get$className = function(receiver) {
    return receiver.className;
  };
  Element.prototype.set$className = function(receiver, v) {
    return receiver.className = v;
  };
  Element.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  Element.prototype.get$tagName = function(receiver) {
    return receiver.tagName;
  };
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  ErrorEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  Event.prototype.get$path = function(receiver) {
    return receiver.path;
  };
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function File() {
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File;
  if ($desc instanceof Array)
    $desc = $desc[1];
  File.prototype = $desc;
  File.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function HtmlCollection() {
  }
  HtmlCollection.builtin$cls = "HtmlCollection";
  if (!"name" in HtmlCollection)
    HtmlCollection.name = "HtmlCollection";
  $desc = $collectedClasses.HtmlCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlCollection.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  function HtmlFormControlsCollection() {
  }
  HtmlFormControlsCollection.builtin$cls = "HtmlFormControlsCollection";
  if (!"name" in HtmlFormControlsCollection)
    HtmlFormControlsCollection.name = "HtmlFormControlsCollection";
  $desc = $collectedClasses.HtmlFormControlsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlFormControlsCollection.prototype = $desc;
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HtmlOptionsCollection() {
  }
  HtmlOptionsCollection.builtin$cls = "HtmlOptionsCollection";
  if (!"name" in HtmlOptionsCollection)
    HtmlOptionsCollection.name = "HtmlOptionsCollection";
  $desc = $collectedClasses.HtmlOptionsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlOptionsCollection.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  KeyboardEvent.prototype.get$location = function(receiver) {
    return receiver.location;
  };
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  LinkElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  LinkElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  function Location() {
  }
  Location.builtin$cls = "Location";
  if (!"name" in Location)
    Location.name = "Location";
  $desc = $collectedClasses.Location;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Location.prototype = $desc;
  Location.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  Location.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  Location.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  Location.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  Location.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  MediaKeyEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  MediaKeyMessageEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  MediaStream.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  MediaStreamEvent.prototype.get$stream = function(receiver) {
    return receiver.stream;
  };
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  MidiConnectionEvent.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  function MidiInput() {
  }
  MidiInput.builtin$cls = "MidiInput";
  if (!"name" in MidiInput)
    MidiInput.name = "MidiInput";
  $desc = $collectedClasses.MidiInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiInput.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  MidiMessageEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function MidiOutput() {
  }
  MidiOutput.builtin$cls = "MidiOutput";
  if (!"name" in MidiOutput)
    MidiOutput.name = "MidiOutput";
  $desc = $collectedClasses.MidiOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiOutput.prototype = $desc;
  function MidiPort() {
  }
  MidiPort.builtin$cls = "MidiPort";
  if (!"name" in MidiPort)
    MidiPort.name = "MidiPort";
  $desc = $collectedClasses.MidiPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiPort.prototype = $desc;
  MidiPort.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  MidiPort.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  NavigatorUserMediaError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  NavigatorUserMediaError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  Node.prototype.get$lastChild = function(receiver) {
    return receiver.lastChild;
  };
  Node.prototype.get$nodeType = function(receiver) {
    return receiver.nodeType;
  };
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  PositionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function Range() {
  }
  Range.builtin$cls = "Range";
  if (!"name" in Range)
    Range.name = "Range";
  $desc = $collectedClasses.Range;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Range.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.set$length = function(receiver, v) {
    return receiver.length = v;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  SpeechRecognitionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  SpeechSynthesisEvent.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  TextEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  Window.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function _Entity() {
  }
  _Entity.builtin$cls = "_Entity";
  if (!"name" in _Entity)
    _Entity.name = "_Entity";
  $desc = $collectedClasses._Entity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Entity.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLBaseFontElement() {
  }
  _HTMLBaseFontElement.builtin$cls = "_HTMLBaseFontElement";
  if (!"name" in _HTMLBaseFontElement)
    _HTMLBaseFontElement.name = "_HTMLBaseFontElement";
  $desc = $collectedClasses._HTMLBaseFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLBaseFontElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _NamedNodeMap() {
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NamedNodeMap.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  AElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  AltGlyphElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimatedString() {
  }
  AnimatedString.builtin$cls = "AnimatedString";
  if (!"name" in AnimatedString)
    AnimatedString.name = "AnimatedString";
  $desc = $collectedClasses.AnimatedString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedString.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  CircleElement.prototype.get$r = function(receiver) {
    return receiver.r;
  };
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FEImageElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FilterElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  ImageElement0.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  PatternElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  RadialGradientElement.prototype.get$r = function(receiver) {
    return receiver.r;
  };
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  ScriptElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  function SvgDocument() {
  }
  SvgDocument.builtin$cls = "SvgDocument";
  if (!"name" in SvgDocument)
    SvgDocument.name = "SvgDocument";
  $desc = $collectedClasses.SvgDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgDocument.prototype = $desc;
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  TextPathElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  UseElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  _GradientElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGAnimateColorElement() {
  }
  _SVGAnimateColorElement.builtin$cls = "_SVGAnimateColorElement";
  if (!"name" in _SVGAnimateColorElement)
    _SVGAnimateColorElement.name = "_SVGAnimateColorElement";
  $desc = $collectedClasses._SVGAnimateColorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAnimateColorElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  SqlError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function ByteBuffer() {
  }
  ByteBuffer.builtin$cls = "ByteBuffer";
  if (!"name" in ByteBuffer)
    ByteBuffer.name = "ByteBuffer";
  $desc = $collectedClasses.ByteBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteBuffer.prototype = $desc;
  function TypedData() {
  }
  TypedData.builtin$cls = "TypedData";
  if (!"name" in TypedData)
    TypedData.name = "TypedData";
  $desc = $collectedClasses.TypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData.prototype = $desc;
  function ByteData() {
  }
  ByteData.builtin$cls = "ByteData";
  if (!"name" in ByteData)
    ByteData.name = "ByteData";
  $desc = $collectedClasses.ByteData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteData.prototype = $desc;
  function Float32List() {
  }
  Float32List.builtin$cls = "Float32List";
  if (!"name" in Float32List)
    Float32List.name = "Float32List";
  $desc = $collectedClasses.Float32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float32List.prototype = $desc;
  function Float64List() {
  }
  Float64List.builtin$cls = "Float64List";
  if (!"name" in Float64List)
    Float64List.name = "Float64List";
  $desc = $collectedClasses.Float64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float64List.prototype = $desc;
  function Int16List() {
  }
  Int16List.builtin$cls = "Int16List";
  if (!"name" in Int16List)
    Int16List.name = "Int16List";
  $desc = $collectedClasses.Int16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int16List.prototype = $desc;
  function Int32List() {
  }
  Int32List.builtin$cls = "Int32List";
  if (!"name" in Int32List)
    Int32List.name = "Int32List";
  $desc = $collectedClasses.Int32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int32List.prototype = $desc;
  function Int8List() {
  }
  Int8List.builtin$cls = "Int8List";
  if (!"name" in Int8List)
    Int8List.name = "Int8List";
  $desc = $collectedClasses.Int8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int8List.prototype = $desc;
  function Uint16List() {
  }
  Uint16List.builtin$cls = "Uint16List";
  if (!"name" in Uint16List)
    Uint16List.name = "Uint16List";
  $desc = $collectedClasses.Uint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint16List.prototype = $desc;
  function Uint32List() {
  }
  Uint32List.builtin$cls = "Uint32List";
  if (!"name" in Uint32List)
    Uint32List.name = "Uint32List";
  $desc = $collectedClasses.Uint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint32List.prototype = $desc;
  function Uint8ClampedList() {
  }
  Uint8ClampedList.builtin$cls = "Uint8ClampedList";
  if (!"name" in Uint8ClampedList)
    Uint8ClampedList.name = "Uint8ClampedList";
  $desc = $collectedClasses.Uint8ClampedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8ClampedList.prototype = $desc;
  function Uint8List() {
  }
  Uint8List.builtin$cls = "Uint8List";
  if (!"name" in Uint8List)
    Uint8List.name = "Uint8List";
  $desc = $collectedClasses.Uint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "bool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "List";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSMutableArray() {
  }
  JSMutableArray.builtin$cls = "JSMutableArray";
  if (!"name" in JSMutableArray)
    JSMutableArray.name = "JSMutableArray";
  $desc = $collectedClasses.JSMutableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSMutableArray.prototype = $desc;
  function JSFixedArray() {
  }
  JSFixedArray.builtin$cls = "JSFixedArray";
  if (!"name" in JSFixedArray)
    JSFixedArray.name = "JSFixedArray";
  $desc = $collectedClasses.JSFixedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSFixedArray.prototype = $desc;
  function JSExtendableArray() {
  }
  JSExtendableArray.builtin$cls = "JSExtendableArray";
  if (!"name" in JSExtendableArray)
    JSExtendableArray.name = "JSExtendableArray";
  $desc = $collectedClasses.JSExtendableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSExtendableArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "num";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "int";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "double";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSPositiveInt() {
  }
  JSPositiveInt.builtin$cls = "JSPositiveInt";
  if (!"name" in JSPositiveInt)
    JSPositiveInt.name = "JSPositiveInt";
  $desc = $collectedClasses.JSPositiveInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSPositiveInt.prototype = $desc;
  function JSUInt32() {
  }
  JSUInt32.builtin$cls = "JSUInt32";
  if (!"name" in JSUInt32)
    JSUInt32.name = "JSUInt32";
  $desc = $collectedClasses.JSUInt32;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSUInt32.prototype = $desc;
  function JSUInt31() {
  }
  JSUInt31.builtin$cls = "JSUInt31";
  if (!"name" in JSUInt31)
    JSUInt31.name = "JSUInt31";
  $desc = $collectedClasses.JSUInt31;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSUInt31.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "String";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function startRootIsolate_closure(entry_0) {
    this.entry_0 = entry_0;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(entry_1) {
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.isolateStatics = isolateStatics;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$id = function(receiver) {
    return this.id;
  };
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  _IsolateEvent.prototype.get$message = function(receiver) {
    return this.message;
  };
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, replyTo_4) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.replyTo_4 = replyTo_4;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(__isolate_helper$_receivePort, _isolateId) {
    this.__isolate_helper$_receivePort = __isolate_helper$_receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(this_1, message_2) {
    this.this_1 = this_1;
    this.message_2 = message_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _NativeJsSendPort_send__closure(box_0, this_3, shouldSerialize_4) {
    this.box_0 = box_0;
    this.this_3 = this_3;
    this.shouldSerialize_4 = shouldSerialize_4;
  }
  _NativeJsSendPort_send__closure.builtin$cls = "_NativeJsSendPort_send__closure";
  if (!"name" in _NativeJsSendPort_send__closure)
    _NativeJsSendPort_send__closure.name = "_NativeJsSendPort_send__closure";
  $desc = $collectedClasses._NativeJsSendPort_send__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send__closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function _WorkerSendPort_send_closure(this_0, message_1) {
    this.this_0 = this_0;
    this.message_1 = message_1;
  }
  _WorkerSendPort_send_closure.builtin$cls = "_WorkerSendPort_send_closure";
  if (!"name" in _WorkerSendPort_send_closure)
    _WorkerSendPort_send_closure.name = "_WorkerSendPort_send_closure";
  $desc = $collectedClasses._WorkerSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort_send_closure.prototype = $desc;
  function RawReceivePortImpl(_id, _handler, _isClosed) {
    this._id = _id;
    this._handler = _handler;
    this._isClosed = _isClosed;
  }
  RawReceivePortImpl.builtin$cls = "RawReceivePortImpl";
  if (!"name" in RawReceivePortImpl)
    RawReceivePortImpl.name = "RawReceivePortImpl";
  $desc = $collectedClasses.RawReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RawReceivePortImpl.prototype = $desc;
  RawReceivePortImpl.prototype.get$_id = function() {
    return this._id;
  };
  RawReceivePortImpl.prototype.get$_isClosed = function() {
    return this._isClosed;
  };
  function ReceivePortImpl(_rawPort, _controller) {
    this._rawPort = _rawPort;
    this._controller = _controller;
  }
  ReceivePortImpl.builtin$cls = "ReceivePortImpl";
  if (!"name" in ReceivePortImpl)
    ReceivePortImpl.name = "ReceivePortImpl";
  $desc = $collectedClasses.ReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePortImpl.prototype = $desc;
  function BoundClosure$i0(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i0.builtin$cls = "BoundClosure$i0";
  $desc = $collectedClasses.BoundClosure$i0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i0.prototype = $desc;
  function _waitForPendingPorts_closure(callback_0) {
    this.callback_0 = callback_0;
  }
  _waitForPendingPorts_closure.builtin$cls = "_waitForPendingPorts_closure";
  if (!"name" in _waitForPendingPorts_closure)
    _waitForPendingPorts_closure.name = "_waitForPendingPorts_closure";
  $desc = $collectedClasses._waitForPendingPorts_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _waitForPendingPorts_closure.prototype = $desc;
  function _PendingSendPortFinder(ports, _visited) {
    this.ports = ports;
    this._visited = _visited;
  }
  _PendingSendPortFinder.builtin$cls = "_PendingSendPortFinder";
  if (!"name" in _PendingSendPortFinder)
    _PendingSendPortFinder.name = "_PendingSendPortFinder";
  $desc = $collectedClasses._PendingSendPortFinder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingSendPortFinder.prototype = $desc;
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function BoundClosure$1(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$1.builtin$cls = "BoundClosure$1";
  $desc = $collectedClasses.BoundClosure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$1.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function JSInvocationMirror(__js_helper$_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _namedIndices) {
    this.__js_helper$_memberName = __js_helper$_memberName;
    this._internalName = _internalName;
    this._kind = _kind;
    this._arguments = _arguments;
    this._namedArgumentNames = _namedArgumentNames;
    this._namedIndices = _namedIndices;
  }
  JSInvocationMirror.builtin$cls = "JSInvocationMirror";
  if (!"name" in JSInvocationMirror)
    JSInvocationMirror.name = "JSInvocationMirror";
  $desc = $collectedClasses.JSInvocationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInvocationMirror.prototype = $desc;
  function CachedInvocation(jsFunction, isIntercepted, cachedInterceptor) {
    this.jsFunction = jsFunction;
    this.isIntercepted = isIntercepted;
    this.cachedInterceptor = cachedInterceptor;
  }
  CachedInvocation.builtin$cls = "CachedInvocation";
  if (!"name" in CachedInvocation)
    CachedInvocation.name = "CachedInvocation";
  $desc = $collectedClasses.CachedInvocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CachedInvocation.prototype = $desc;
  function CachedNoSuchMethodInvocation(interceptor) {
    this.interceptor = interceptor;
  }
  CachedNoSuchMethodInvocation.builtin$cls = "CachedNoSuchMethodInvocation";
  if (!"name" in CachedNoSuchMethodInvocation)
    CachedNoSuchMethodInvocation.name = "CachedNoSuchMethodInvocation";
  $desc = $collectedClasses.CachedNoSuchMethodInvocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CachedNoSuchMethodInvocation.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function BoundClosure(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function CastErrorImplementation(message) {
    this.message = message;
  }
  CastErrorImplementation.builtin$cls = "CastErrorImplementation";
  if (!"name" in CastErrorImplementation)
    CastErrorImplementation.name = "CastErrorImplementation";
  $desc = $collectedClasses.CastErrorImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CastErrorImplementation.prototype = $desc;
  CastErrorImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RuntimeError(message) {
    this.message = message;
  }
  RuntimeError.builtin$cls = "RuntimeError";
  if (!"name" in RuntimeError)
    RuntimeError.name = "RuntimeError";
  $desc = $collectedClasses.RuntimeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeError.prototype = $desc;
  RuntimeError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeImpl.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function JSSyntaxRegExp(_nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
    this._nativeRegExp = _nativeRegExp;
    this._nativeGlobalRegExp = _nativeGlobalRegExp;
    this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
  }
  JSSyntaxRegExp.builtin$cls = "JSSyntaxRegExp";
  if (!"name" in JSSyntaxRegExp)
    JSSyntaxRegExp.name = "JSSyntaxRegExp";
  $desc = $collectedClasses.JSSyntaxRegExp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSSyntaxRegExp.prototype = $desc;
  function _MatchImplementation(pattern, __js_helper$_match) {
    this.pattern = pattern;
    this.__js_helper$_match = __js_helper$_match;
  }
  _MatchImplementation.builtin$cls = "_MatchImplementation";
  if (!"name" in _MatchImplementation)
    _MatchImplementation.name = "_MatchImplementation";
  $desc = $collectedClasses._MatchImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MatchImplementation.prototype = $desc;
  function _AllMatchesIterable(_re, _string) {
    this._re = _re;
    this._string = _string;
  }
  _AllMatchesIterable.builtin$cls = "_AllMatchesIterable";
  if (!"name" in _AllMatchesIterable)
    _AllMatchesIterable.name = "_AllMatchesIterable";
  $desc = $collectedClasses._AllMatchesIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterable.prototype = $desc;
  function _AllMatchesIterator(_regExp, _string, __js_helper$_current) {
    this._regExp = _regExp;
    this._string = _string;
    this.__js_helper$_current = __js_helper$_current;
  }
  _AllMatchesIterator.builtin$cls = "_AllMatchesIterator";
  if (!"name" in _AllMatchesIterator)
    _AllMatchesIterator.name = "_AllMatchesIterator";
  $desc = $collectedClasses._AllMatchesIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterator.prototype = $desc;
  function StringMatch(start, input, pattern) {
    this.start = start;
    this.input = input;
    this.pattern = pattern;
  }
  StringMatch.builtin$cls = "StringMatch";
  if (!"name" in StringMatch)
    StringMatch.name = "StringMatch";
  $desc = $collectedClasses.StringMatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringMatch.prototype = $desc;
  function Attachable(name) {
    this.name = name;
  }
  Attachable.builtin$cls = "Attachable";
  if (!"name" in Attachable)
    Attachable.name = "Attachable";
  $desc = $collectedClasses.Attachable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Attachable.prototype = $desc;
  Attachable.prototype.get$name = function(receiver) {
    return this.name;
  };
  function AttachableObject() {
  }
  AttachableObject.builtin$cls = "AttachableObject";
  if (!"name" in AttachableObject)
    AttachableObject.name = "AttachableObject";
  $desc = $collectedClasses.AttachableObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttachableObject.prototype = $desc;
  function AttachableObject_disposeInternal_closure() {
  }
  AttachableObject_disposeInternal_closure.builtin$cls = "AttachableObject_disposeInternal_closure";
  if (!"name" in AttachableObject_disposeInternal_closure)
    AttachableObject_disposeInternal_closure.name = "AttachableObject_disposeInternal_closure";
  $desc = $collectedClasses.AttachableObject_disposeInternal_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttachableObject_disposeInternal_closure.prototype = $desc;
  function AttachableObject__getStream_closure(this_0, property_1) {
    this.this_0 = this_0;
    this.property_1 = property_1;
  }
  AttachableObject__getStream_closure.builtin$cls = "AttachableObject__getStream_closure";
  if (!"name" in AttachableObject__getStream_closure)
    AttachableObject__getStream_closure.name = "AttachableObject__getStream_closure";
  $desc = $collectedClasses.AttachableObject__getStream_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttachableObject__getStream_closure.prototype = $desc;
  function AttachableObject__getStream__closure(this_2, property_3) {
    this.this_2 = this_2;
    this.property_3 = property_3;
  }
  AttachableObject__getStream__closure.builtin$cls = "AttachableObject__getStream__closure";
  if (!"name" in AttachableObject__getStream__closure)
    AttachableObject__getStream__closure.name = "AttachableObject__getStream__closure";
  $desc = $collectedClasses.AttachableObject__getStream__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttachableObject__getStream__closure.prototype = $desc;
  function AttachedEvent(name) {
    this.name = name;
  }
  AttachedEvent.builtin$cls = "AttachedEvent";
  if (!"name" in AttachedEvent)
    AttachedEvent.name = "AttachedEvent";
  $desc = $collectedClasses.AttachedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttachedEvent.prototype = $desc;
  function Property(defaultValue, name) {
    this.defaultValue = defaultValue;
    this.name = name;
  }
  Property.builtin$cls = "Property";
  if (!"name" in Property)
    Property.name = "Property";
  $desc = $collectedClasses.Property;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Property.prototype = $desc;
  function _UndefinedValue() {
  }
  _UndefinedValue.builtin$cls = "_UndefinedValue";
  if (!"name" in _UndefinedValue)
    _UndefinedValue.name = "_UndefinedValue";
  $desc = $collectedClasses._UndefinedValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UndefinedValue.prototype = $desc;
  function PropertyChangedEventArgs(property, newValue, cleared) {
    this.property = property;
    this.newValue = newValue;
    this.cleared = cleared;
  }
  PropertyChangedEventArgs.builtin$cls = "PropertyChangedEventArgs";
  if (!"name" in PropertyChangedEventArgs)
    PropertyChangedEventArgs.name = "PropertyChangedEventArgs";
  $desc = $collectedClasses.PropertyChangedEventArgs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PropertyChangedEventArgs.prototype = $desc;
  function Array2d(width, height, _bot$_source) {
    this.width = width;
    this.height = height;
    this._bot$_source = _bot$_source;
  }
  Array2d.builtin$cls = "Array2d";
  if (!"name" in Array2d)
    Array2d.name = "Array2d";
  $desc = $collectedClasses.Array2d;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Array2d.prototype = $desc;
  function Array2d_getAdjacent_closure(this_0) {
    this.this_0 = this_0;
  }
  Array2d_getAdjacent_closure.builtin$cls = "Array2d_getAdjacent_closure";
  if (!"name" in Array2d_getAdjacent_closure)
    Array2d_getAdjacent_closure.name = "Array2d_getAdjacent_closure";
  $desc = $collectedClasses.Array2d_getAdjacent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Array2d_getAdjacent_closure.prototype = $desc;
  function CollectionUtil_count_closure(test_0) {
    this.test_0 = test_0;
  }
  CollectionUtil_count_closure.builtin$cls = "CollectionUtil_count_closure";
  if (!"name" in CollectionUtil_count_closure)
    CollectionUtil_count_closure.name = "CollectionUtil_count_closure";
  $desc = $collectedClasses.CollectionUtil_count_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollectionUtil_count_closure.prototype = $desc;
  function CollectionUtil_exclude_closure(itemsToExclude_0) {
    this.itemsToExclude_0 = itemsToExclude_0;
  }
  CollectionUtil_exclude_closure.builtin$cls = "CollectionUtil_exclude_closure";
  if (!"name" in CollectionUtil_exclude_closure)
    CollectionUtil_exclude_closure.name = "CollectionUtil_exclude_closure";
  $desc = $collectedClasses.CollectionUtil_exclude_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollectionUtil_exclude_closure.prototype = $desc;
  function CollectionUtil_distinct_closure() {
  }
  CollectionUtil_distinct_closure.builtin$cls = "CollectionUtil_distinct_closure";
  if (!"name" in CollectionUtil_distinct_closure)
    CollectionUtil_distinct_closure.name = "CollectionUtil_distinct_closure";
  $desc = $collectedClasses.CollectionUtil_distinct_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollectionUtil_distinct_closure.prototype = $desc;
  function CollectionUtil_distinct_closure0(box_0) {
    this.box_0 = box_0;
  }
  CollectionUtil_distinct_closure0.builtin$cls = "CollectionUtil_distinct_closure0";
  if (!"name" in CollectionUtil_distinct_closure0)
    CollectionUtil_distinct_closure0.name = "CollectionUtil_distinct_closure0";
  $desc = $collectedClasses.CollectionUtil_distinct_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollectionUtil_distinct_closure0.prototype = $desc;
  function CollectionUtil_toMap_closure() {
  }
  CollectionUtil_toMap_closure.builtin$cls = "CollectionUtil_toMap_closure";
  if (!"name" in CollectionUtil_toMap_closure)
    CollectionUtil_toMap_closure.name = "CollectionUtil_toMap_closure";
  $desc = $collectedClasses.CollectionUtil_toMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollectionUtil_toMap_closure.prototype = $desc;
  function _DistinctIterator(_bot$_source, _comparer, _found, _bot$_current) {
    this._bot$_source = _bot$_source;
    this._comparer = _comparer;
    this._found = _found;
    this._bot$_current = _bot$_current;
  }
  _DistinctIterator.builtin$cls = "_DistinctIterator";
  if (!"name" in _DistinctIterator)
    _DistinctIterator.name = "_DistinctIterator";
  $desc = $collectedClasses._DistinctIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DistinctIterator.prototype = $desc;
  function _DistinctIterator_moveNext_closure(this_0, candidate_1) {
    this.this_0 = this_0;
    this.candidate_1 = candidate_1;
  }
  _DistinctIterator_moveNext_closure.builtin$cls = "_DistinctIterator_moveNext_closure";
  if (!"name" in _DistinctIterator_moveNext_closure)
    _DistinctIterator_moveNext_closure.name = "_DistinctIterator_moveNext_closure";
  $desc = $collectedClasses._DistinctIterator_moveNext_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DistinctIterator_moveNext_closure.prototype = $desc;
  function _SequenceIterator(_list, _bot$_length, _bot$_position, _bot$_current) {
    this._list = _list;
    this._bot$_length = _bot$_length;
    this._bot$_position = _bot$_position;
    this._bot$_current = _bot$_current;
  }
  _SequenceIterator.builtin$cls = "_SequenceIterator";
  if (!"name" in _SequenceIterator)
    _SequenceIterator.name = "_SequenceIterator";
  $desc = $collectedClasses._SequenceIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SequenceIterator.prototype = $desc;
  function Enumerable() {
  }
  Enumerable.builtin$cls = "Enumerable";
  if (!"name" in Enumerable)
    Enumerable.name = "Enumerable";
  $desc = $collectedClasses.Enumerable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Enumerable.prototype = $desc;
  function Enumerable_concat_closure() {
  }
  Enumerable_concat_closure.builtin$cls = "Enumerable_concat_closure";
  if (!"name" in Enumerable_concat_closure)
    Enumerable_concat_closure.name = "Enumerable_concat_closure";
  $desc = $collectedClasses.Enumerable_concat_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Enumerable_concat_closure.prototype = $desc;
  function _SimpleEnumerable(_bot$_source) {
    this._bot$_source = _bot$_source;
  }
  _SimpleEnumerable.builtin$cls = "_SimpleEnumerable";
  if (!"name" in _SimpleEnumerable)
    _SimpleEnumerable.name = "_SimpleEnumerable";
  $desc = $collectedClasses._SimpleEnumerable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleEnumerable.prototype = $desc;
  function _FuncEnumerable(_bot$_source, _func) {
    this._bot$_source = _bot$_source;
    this._func = _func;
  }
  _FuncEnumerable.builtin$cls = "_FuncEnumerable";
  if (!"name" in _FuncEnumerable)
    _FuncEnumerable.name = "_FuncEnumerable";
  $desc = $collectedClasses._FuncEnumerable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FuncEnumerable.prototype = $desc;
  function Grouping(_values) {
    this._values = _values;
  }
  Grouping.builtin$cls = "Grouping";
  if (!"name" in Grouping)
    Grouping.name = "Grouping";
  $desc = $collectedClasses.Grouping;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Grouping.prototype = $desc;
  function Grouping_closure() {
  }
  Grouping_closure.builtin$cls = "Grouping_closure";
  if (!"name" in Grouping_closure)
    Grouping_closure.name = "Grouping_closure";
  $desc = $collectedClasses.Grouping_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Grouping_closure.prototype = $desc;
  function Grouping_closure0(V_0) {
    this.V_0 = V_0;
  }
  Grouping_closure0.builtin$cls = "Grouping_closure0";
  if (!"name" in Grouping_closure0)
    Grouping_closure0.name = "Grouping_closure0";
  $desc = $collectedClasses.Grouping_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Grouping_closure0.prototype = $desc;
  function Grouping_getValues_closure() {
  }
  Grouping_getValues_closure.builtin$cls = "Grouping_getValues_closure";
  if (!"name" in Grouping_getValues_closure)
    Grouping_getValues_closure.name = "Grouping_getValues_closure";
  $desc = $collectedClasses.Grouping_getValues_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Grouping_getValues_closure.prototype = $desc;
  function NumberEnumerable() {
  }
  NumberEnumerable.builtin$cls = "NumberEnumerable";
  if (!"name" in NumberEnumerable)
    NumberEnumerable.name = "NumberEnumerable";
  $desc = $collectedClasses.NumberEnumerable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NumberEnumerable.prototype = $desc;
  function NumberEnumerable_NumberEnumerable$fromRange_closure(start_0) {
    this.start_0 = start_0;
  }
  NumberEnumerable_NumberEnumerable$fromRange_closure.builtin$cls = "NumberEnumerable_NumberEnumerable$fromRange_closure";
  if (!"name" in NumberEnumerable_NumberEnumerable$fromRange_closure)
    NumberEnumerable_NumberEnumerable$fromRange_closure.name = "NumberEnumerable_NumberEnumerable$fromRange_closure";
  $desc = $collectedClasses.NumberEnumerable_NumberEnumerable$fromRange_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NumberEnumerable_NumberEnumerable$fromRange_closure.prototype = $desc;
  function NumberEnumerable_max_closure() {
  }
  NumberEnumerable_max_closure.builtin$cls = "NumberEnumerable_max_closure";
  if (!"name" in NumberEnumerable_max_closure)
    NumberEnumerable_max_closure.name = "NumberEnumerable_max_closure";
  $desc = $collectedClasses.NumberEnumerable_max_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NumberEnumerable_max_closure.prototype = $desc;
  function NumberEnumerable_min_closure() {
  }
  NumberEnumerable_min_closure.builtin$cls = "NumberEnumerable_min_closure";
  if (!"name" in NumberEnumerable_min_closure)
    NumberEnumerable_min_closure.name = "NumberEnumerable_min_closure";
  $desc = $collectedClasses.NumberEnumerable_min_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NumberEnumerable_min_closure.prototype = $desc;
  function _SimpleNumEnumerable(_bot$_source) {
    this._bot$_source = _bot$_source;
  }
  _SimpleNumEnumerable.builtin$cls = "_SimpleNumEnumerable";
  if (!"name" in _SimpleNumEnumerable)
    _SimpleNumEnumerable.name = "_SimpleNumEnumerable";
  $desc = $collectedClasses._SimpleNumEnumerable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleNumEnumerable.prototype = $desc;
  function ReadOnlyCollection(_items) {
    this._items = _items;
  }
  ReadOnlyCollection.builtin$cls = "ReadOnlyCollection";
  if (!"name" in ReadOnlyCollection)
    ReadOnlyCollection.name = "ReadOnlyCollection";
  $desc = $collectedClasses.ReadOnlyCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReadOnlyCollection.prototype = $desc;
  function Sequence() {
  }
  Sequence.builtin$cls = "Sequence";
  if (!"name" in Sequence)
    Sequence.name = "Sequence";
  $desc = $collectedClasses.Sequence;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Sequence.prototype = $desc;
  function _SequenceList(_bot$_source) {
    this._bot$_source = _bot$_source;
  }
  _SequenceList.builtin$cls = "_SequenceList";
  if (!"name" in _SequenceList)
    _SequenceList.name = "_SequenceList";
  $desc = $collectedClasses._SequenceList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SequenceList.prototype = $desc;
  function Sequence_ListMixin() {
  }
  Sequence_ListMixin.builtin$cls = "Sequence_ListMixin";
  if (!"name" in Sequence_ListMixin)
    Sequence_ListMixin.name = "Sequence_ListMixin";
  $desc = $collectedClasses.Sequence_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Sequence_ListMixin.prototype = $desc;
  function HslColor(h, s, l) {
    this.h = h;
    this.s = s;
    this.l = l;
  }
  HslColor.builtin$cls = "HslColor";
  if (!"name" in HslColor)
    HslColor.name = "HslColor";
  $desc = $collectedClasses.HslColor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HslColor.prototype = $desc;
  HslColor.prototype.get$h = function() {
    return this.h;
  };
  HslColor.prototype.get$s = function() {
    return this.s;
  };
  HslColor.prototype.get$l = function() {
    return this.l;
  };
  function RgbColor(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
  }
  RgbColor.builtin$cls = "RgbColor";
  if (!"name" in RgbColor)
    RgbColor.name = "RgbColor";
  $desc = $collectedClasses.RgbColor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RgbColor.prototype = $desc;
  RgbColor.prototype.get$r = function(receiver) {
    return this.r;
  };
  RgbColor.prototype.get$g = function() {
    return this.g;
  };
  RgbColor.prototype.get$b = function() {
    return this.b;
  };
  function RgbColor_toHex_closure(buffer_0) {
    this.buffer_0 = buffer_0;
  }
  RgbColor_toHex_closure.builtin$cls = "RgbColor_toHex_closure";
  if (!"name" in RgbColor_toHex_closure)
    RgbColor_toHex_closure.name = "RgbColor_toHex_closure";
  $desc = $collectedClasses.RgbColor_toHex_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RgbColor_toHex_closure.prototype = $desc;
  function DisposedError(message) {
    this.message = message;
  }
  DisposedError.builtin$cls = "DisposedError";
  if (!"name" in DisposedError)
    DisposedError.name = "DisposedError";
  $desc = $collectedClasses.DisposedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DisposedError.prototype = $desc;
  function DisposableImpl() {
  }
  DisposableImpl.builtin$cls = "DisposableImpl";
  if (!"name" in DisposableImpl)
    DisposableImpl.name = "DisposableImpl";
  $desc = $collectedClasses.DisposableImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DisposableImpl.prototype = $desc;
  function EventArgs() {
  }
  EventArgs.builtin$cls = "EventArgs";
  if (!"name" in EventArgs)
    EventArgs.name = "EventArgs";
  $desc = $collectedClasses.EventArgs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventArgs.prototype = $desc;
  function EventHandle(_bot$_controller, _disposed) {
    this._bot$_controller = _bot$_controller;
    this._disposed = _disposed;
  }
  EventHandle.builtin$cls = "EventHandle";
  if (!"name" in EventHandle)
    EventHandle.name = "EventHandle";
  $desc = $collectedClasses.EventHandle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventHandle.prototype = $desc;
  function AffineTransform(_scX, _shY, _shX, _scY, _tX, _tY) {
    this._scX = _scX;
    this._shY = _shY;
    this._shX = _shX;
    this._scY = _scY;
    this._tX = _tX;
    this._tY = _tY;
  }
  AffineTransform.builtin$cls = "AffineTransform";
  if (!"name" in AffineTransform)
    AffineTransform.name = "AffineTransform";
  $desc = $collectedClasses.AffineTransform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AffineTransform.prototype = $desc;
  AffineTransform.prototype.get$_scX = function() {
    return this._scX;
  };
  AffineTransform.prototype.get$_shY = function() {
    return this._shY;
  };
  AffineTransform.prototype.get$_shX = function() {
    return this._shX;
  };
  AffineTransform.prototype.get$_scY = function() {
    return this._scY;
  };
  AffineTransform.prototype.get$_tX = function() {
    return this._tX;
  };
  AffineTransform.prototype.get$_tY = function() {
    return this._tY;
  };
  function Box(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  Box.builtin$cls = "Box";
  if (!"name" in Box)
    Box.name = "Box";
  $desc = $collectedClasses.Box;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Box.prototype = $desc;
  function Coordinate(x, y) {
    this.x = x;
    this.y = y;
  }
  Coordinate.builtin$cls = "Coordinate";
  if (!"name" in Coordinate)
    Coordinate.name = "Coordinate";
  $desc = $collectedClasses.Coordinate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Coordinate.prototype = $desc;
  function Vector(x, y) {
    this.x = x;
    this.y = y;
  }
  Vector.builtin$cls = "Vector";
  if (!"name" in Vector)
    Vector.name = "Vector";
  $desc = $collectedClasses.Vector;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector.prototype = $desc;
  function StringLineReader(source, _bot$_position) {
    this.source = source;
    this._bot$_position = _bot$_position;
  }
  StringLineReader.builtin$cls = "StringLineReader";
  if (!"name" in StringLineReader)
    StringLineReader.name = "StringLineReader";
  $desc = $collectedClasses.StringLineReader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringLineReader.prototype = $desc;
  function _StringLineIterator(_reader, _bot$_current) {
    this._reader = _reader;
    this._bot$_current = _bot$_current;
  }
  _StringLineIterator.builtin$cls = "_StringLineIterator";
  if (!"name" in _StringLineIterator)
    _StringLineIterator.name = "_StringLineIterator";
  $desc = $collectedClasses._StringLineIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StringLineIterator.prototype = $desc;
  function Tuple(item1, item2) {
    this.item1 = item1;
    this.item2 = item2;
  }
  Tuple.builtin$cls = "Tuple";
  if (!"name" in Tuple)
    Tuple.name = "Tuple";
  $desc = $collectedClasses.Tuple;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tuple.prototype = $desc;
  Tuple.prototype.get$item1 = function() {
    return this.item1;
  };
  Tuple.prototype.get$item2 = function() {
    return this.item2;
  };
  function Tuple3(item3, item1, item2) {
    this.item3 = item3;
    this.item1 = item1;
    this.item2 = item2;
  }
  Tuple3.builtin$cls = "Tuple3";
  if (!"name" in Tuple3)
    Tuple3.name = "Tuple3";
  $desc = $collectedClasses.Tuple3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tuple3.prototype = $desc;
  Tuple3.prototype.get$item3 = function() {
    return this.item3;
  };
  function Util_splitLines_closure() {
  }
  Util_splitLines_closure.builtin$cls = "Util_splitLines_closure";
  if (!"name" in Util_splitLines_closure)
    Util_splitLines_closure.name = "Util_splitLines_closure";
  $desc = $collectedClasses.Util_splitLines_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Util_splitLines_closure.prototype = $desc;
  function getDelayedResult_closure() {
  }
  getDelayedResult_closure.builtin$cls = "getDelayedResult_closure";
  if (!"name" in getDelayedResult_closure)
    getDelayedResult_closure.name = "getDelayedResult_closure";
  $desc = $collectedClasses.getDelayedResult_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  getDelayedResult_closure.prototype = $desc;
  function DetailedArgumentError(argument, details, message) {
    this.argument = argument;
    this.details = details;
    this.message = message;
  }
  DetailedArgumentError.builtin$cls = "DetailedArgumentError";
  if (!"name" in DetailedArgumentError)
    DetailedArgumentError.name = "DetailedArgumentError";
  $desc = $collectedClasses.DetailedArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailedArgumentError.prototype = $desc;
  function InvalidOperationError(message) {
    this.message = message;
  }
  InvalidOperationError.builtin$cls = "InvalidOperationError";
  if (!"name" in InvalidOperationError)
    InvalidOperationError.name = "InvalidOperationError";
  $desc = $collectedClasses.InvalidOperationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvalidOperationError.prototype = $desc;
  InvalidOperationError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function NullArgumentError(argument, details, message) {
    this.argument = argument;
    this.details = details;
    this.message = message;
  }
  NullArgumentError.builtin$cls = "NullArgumentError";
  if (!"name" in NullArgumentError)
    NullArgumentError.name = "NullArgumentError";
  $desc = $collectedClasses.NullArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullArgumentError.prototype = $desc;
  function expandStream_closure(convert_0, controller_1) {
    this.convert_0 = convert_0;
    this.controller_1 = controller_1;
  }
  expandStream_closure.builtin$cls = "expandStream_closure";
  if (!"name" in expandStream_closure)
    expandStream_closure.name = "expandStream_closure";
  $desc = $collectedClasses.expandStream_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  expandStream_closure.prototype = $desc;
  function expandStream_closure0(onDone_2, controller_3) {
    this.onDone_2 = onDone_2;
    this.controller_3 = controller_3;
  }
  expandStream_closure0.builtin$cls = "expandStream_closure0";
  if (!"name" in expandStream_closure0)
    expandStream_closure0.name = "expandStream_closure0";
  $desc = $collectedClasses.expandStream_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  expandStream_closure0.prototype = $desc;
  function expandStream_closure1(controller_4) {
    this.controller_4 = controller_4;
  }
  expandStream_closure1.builtin$cls = "expandStream_closure1";
  if (!"name" in expandStream_closure1)
    expandStream_closure1.name = "expandStream_closure1";
  $desc = $collectedClasses.expandStream_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  expandStream_closure1.prototype = $desc;
  function _StreamForEachAsync(_action, _expand_stream$_iterator, _completer) {
    this._action = _action;
    this._expand_stream$_iterator = _expand_stream$_iterator;
    this._completer = _completer;
  }
  _StreamForEachAsync.builtin$cls = "_StreamForEachAsync";
  if (!"name" in _StreamForEachAsync)
    _StreamForEachAsync.name = "_StreamForEachAsync";
  $desc = $collectedClasses._StreamForEachAsync;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamForEachAsync.prototype = $desc;
  function _StreamForEachAsync__moveNext_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamForEachAsync__moveNext_closure.builtin$cls = "_StreamForEachAsync__moveNext_closure";
  if (!"name" in _StreamForEachAsync__moveNext_closure)
    _StreamForEachAsync__moveNext_closure.name = "_StreamForEachAsync__moveNext_closure";
  $desc = $collectedClasses._StreamForEachAsync__moveNext_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamForEachAsync__moveNext_closure.prototype = $desc;
  function _StreamForEachAsync__moveNext__closure(this_1) {
    this.this_1 = this_1;
  }
  _StreamForEachAsync__moveNext__closure.builtin$cls = "_StreamForEachAsync__moveNext__closure";
  if (!"name" in _StreamForEachAsync__moveNext__closure)
    _StreamForEachAsync__moveNext__closure.name = "_StreamForEachAsync__moveNext__closure";
  $desc = $collectedClasses._StreamForEachAsync__moveNext__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamForEachAsync__moveNext__closure.prototype = $desc;
  function _StreamForEachAsync__moveNext__closure0(this_2) {
    this.this_2 = this_2;
  }
  _StreamForEachAsync__moveNext__closure0.builtin$cls = "_StreamForEachAsync__moveNext__closure0";
  if (!"name" in _StreamForEachAsync__moveNext__closure0)
    _StreamForEachAsync__moveNext__closure0.name = "_StreamForEachAsync__moveNext__closure0";
  $desc = $collectedClasses._StreamForEachAsync__moveNext__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamForEachAsync__moveNext__closure0.prototype = $desc;
  function _StreamForEachAsync__moveNext__closure1(this_3) {
    this.this_3 = this_3;
  }
  _StreamForEachAsync__moveNext__closure1.builtin$cls = "_StreamForEachAsync__moveNext__closure1";
  if (!"name" in _StreamForEachAsync__moveNext__closure1)
    _StreamForEachAsync__moveNext__closure1.name = "_StreamForEachAsync__moveNext__closure1";
  $desc = $collectedClasses._StreamForEachAsync__moveNext__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamForEachAsync__moveNext__closure1.prototype = $desc;
  function _StreamForEachAsync__moveNext___closure(this_4, error_5, stackTrace_6) {
    this.this_4 = this_4;
    this.error_5 = error_5;
    this.stackTrace_6 = stackTrace_6;
  }
  _StreamForEachAsync__moveNext___closure.builtin$cls = "_StreamForEachAsync__moveNext___closure";
  if (!"name" in _StreamForEachAsync__moveNext___closure)
    _StreamForEachAsync__moveNext___closure.name = "_StreamForEachAsync__moveNext___closure";
  $desc = $collectedClasses._StreamForEachAsync__moveNext___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamForEachAsync__moveNext___closure.prototype = $desc;
  function _StreamForEachAsync__moveNext_closure0(this_7) {
    this.this_7 = this_7;
  }
  _StreamForEachAsync__moveNext_closure0.builtin$cls = "_StreamForEachAsync__moveNext_closure0";
  if (!"name" in _StreamForEachAsync__moveNext_closure0)
    _StreamForEachAsync__moveNext_closure0.name = "_StreamForEachAsync__moveNext_closure0";
  $desc = $collectedClasses._StreamForEachAsync__moveNext_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamForEachAsync__moveNext_closure0.prototype = $desc;
  function _Graph(_graph$_map) {
    this._graph$_map = _graph$_map;
  }
  _Graph.builtin$cls = "_Graph";
  if (!"name" in _Graph)
    _Graph.name = "_Graph";
  $desc = $collectedClasses._Graph;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Graph.prototype = $desc;
  function _Graph__Graph_getNode(T_0, map_1) {
    this.T_0 = T_0;
    this.map_1 = map_1;
  }
  _Graph__Graph_getNode.builtin$cls = "_Graph__Graph_getNode";
  if (!"name" in _Graph__Graph_getNode)
    _Graph__Graph_getNode.name = "_Graph__Graph_getNode";
  $desc = $collectedClasses._Graph__Graph_getNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Graph__Graph_getNode.prototype = $desc;
  function _Graph__Graph_getNode_closure(T_2, value_3) {
    this.T_2 = T_2;
    this.value_3 = value_3;
  }
  _Graph__Graph_getNode_closure.builtin$cls = "_Graph__Graph_getNode_closure";
  if (!"name" in _Graph__Graph_getNode_closure)
    _Graph__Graph_getNode_closure.name = "_Graph__Graph_getNode_closure";
  $desc = $collectedClasses._Graph__Graph_getNode_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Graph__Graph_getNode_closure.prototype = $desc;
  function _Graph__Graph_closure(T_4, getNode_5) {
    this.T_4 = T_4;
    this.getNode_5 = getNode_5;
  }
  _Graph__Graph_closure.builtin$cls = "_Graph__Graph_closure";
  if (!"name" in _Graph__Graph_closure)
    _Graph__Graph_closure.name = "_Graph__Graph_closure";
  $desc = $collectedClasses._Graph__Graph_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Graph__Graph_closure.prototype = $desc;
  function _Graph_toString_closure(this_0, sb_1) {
    this.this_0 = this_0;
    this.sb_1 = sb_1;
  }
  _Graph_toString_closure.builtin$cls = "_Graph_toString_closure";
  if (!"name" in _Graph_toString_closure)
    _Graph_toString_closure.name = "_Graph_toString_closure";
  $desc = $collectedClasses._Graph_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Graph_toString_closure.prototype = $desc;
  function _Graph_toString__closure() {
  }
  _Graph_toString__closure.builtin$cls = "_Graph_toString__closure";
  if (!"name" in _Graph_toString__closure)
    _Graph_toString__closure.name = "_Graph_toString__closure";
  $desc = $collectedClasses._Graph_toString__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Graph_toString__closure.prototype = $desc;
  function _GraphNode(value, outNodes) {
    this.value = value;
    this.outNodes = outNodes;
  }
  _GraphNode.builtin$cls = "_GraphNode";
  if (!"name" in _GraphNode)
    _GraphNode.name = "_GraphNode";
  $desc = $collectedClasses._GraphNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GraphNode.prototype = $desc;
  _GraphNode.prototype.get$value = function(receiver) {
    return this.value;
  };
  _GraphNode.prototype.get$outNodes = function() {
    return this.outNodes;
  };
  function _TarjanCycleDetect(_indexExpando, _linkExpando, _stack, _scc, _graph$_list, _graph$_index) {
    this._indexExpando = _indexExpando;
    this._linkExpando = _linkExpando;
    this._stack = _stack;
    this._scc = _scc;
    this._graph$_list = _graph$_list;
    this._graph$_index = _graph$_index;
  }
  _TarjanCycleDetect.builtin$cls = "_TarjanCycleDetect";
  if (!"name" in _TarjanCycleDetect)
    _TarjanCycleDetect.name = "_TarjanCycleDetect";
  $desc = $collectedClasses._TarjanCycleDetect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TarjanCycleDetect.prototype = $desc;
  function topologicalSort_closure(items_0) {
    this.items_0 = items_0;
  }
  topologicalSort_closure.builtin$cls = "topologicalSort_closure";
  if (!"name" in topologicalSort_closure)
    topologicalSort_closure.name = "topologicalSort_closure";
  $desc = $collectedClasses.topologicalSort_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  topologicalSort_closure.prototype = $desc;
  function topologicalSort__closure(items_1) {
    this.items_1 = items_1;
  }
  topologicalSort__closure.builtin$cls = "topologicalSort__closure";
  if (!"name" in topologicalSort__closure)
    topologicalSort__closure.name = "topologicalSort__closure";
  $desc = $collectedClasses.topologicalSort__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  topologicalSort__closure.prototype = $desc;
  function topologicalSort_closure0() {
  }
  topologicalSort_closure0.builtin$cls = "topologicalSort_closure0";
  if (!"name" in topologicalSort_closure0)
    topologicalSort_closure0.name = "topologicalSort_closure0";
  $desc = $collectedClasses.topologicalSort_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  topologicalSort_closure0.prototype = $desc;
  function ThrottledStream(_asyncMethod, _throttled_stream$_controller, _throttled_stream$_source, _sendingSource, _outputValue, _outputFuture, _forceUpdate) {
    this._asyncMethod = _asyncMethod;
    this._throttled_stream$_controller = _throttled_stream$_controller;
    this._throttled_stream$_source = _throttled_stream$_source;
    this._sendingSource = _sendingSource;
    this._outputValue = _outputValue;
    this._outputFuture = _outputFuture;
    this._forceUpdate = _forceUpdate;
  }
  ThrottledStream.builtin$cls = "ThrottledStream";
  if (!"name" in ThrottledStream)
    ThrottledStream.name = "ThrottledStream";
  $desc = $collectedClasses.ThrottledStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThrottledStream.prototype = $desc;
  function ThrottledStream__tryUpdate_closure(this_0) {
    this.this_0 = this_0;
  }
  ThrottledStream__tryUpdate_closure.builtin$cls = "ThrottledStream__tryUpdate_closure";
  if (!"name" in ThrottledStream__tryUpdate_closure)
    ThrottledStream__tryUpdate_closure.name = "ThrottledStream__tryUpdate_closure";
  $desc = $collectedClasses.ThrottledStream__tryUpdate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThrottledStream__tryUpdate_closure.prototype = $desc;
  function ThrottledStream__tryUpdate_closure0(this_1) {
    this.this_1 = this_1;
  }
  ThrottledStream__tryUpdate_closure0.builtin$cls = "ThrottledStream__tryUpdate_closure0";
  if (!"name" in ThrottledStream__tryUpdate_closure0)
    ThrottledStream__tryUpdate_closure0.name = "ThrottledStream__tryUpdate_closure0";
  $desc = $collectedClasses.ThrottledStream__tryUpdate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThrottledStream__tryUpdate_closure0.prototype = $desc;
  function ThrottledStream__tryUpdate_closure1(this_2) {
    this.this_2 = this_2;
  }
  ThrottledStream__tryUpdate_closure1.builtin$cls = "ThrottledStream__tryUpdate_closure1";
  if (!"name" in ThrottledStream__tryUpdate_closure1)
    ThrottledStream__tryUpdate_closure1.name = "ThrottledStream__tryUpdate_closure1";
  $desc = $collectedClasses.ThrottledStream__tryUpdate_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThrottledStream__tryUpdate_closure1.prototype = $desc;
  function ThrottledStream__tryUpdate_closure2(this_3) {
    this.this_3 = this_3;
  }
  ThrottledStream__tryUpdate_closure2.builtin$cls = "ThrottledStream__tryUpdate_closure2";
  if (!"name" in ThrottledStream__tryUpdate_closure2)
    ThrottledStream__tryUpdate_closure2.name = "ThrottledStream__tryUpdate_closure2";
  $desc = $collectedClasses.ThrottledStream__tryUpdate_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThrottledStream__tryUpdate_closure2.prototype = $desc;
  function EventWatcher(_lastArgs, _eventCount) {
    this._lastArgs = _lastArgs;
    this._eventCount = _eventCount;
  }
  EventWatcher.builtin$cls = "EventWatcher";
  if (!"name" in EventWatcher)
    EventWatcher.name = "EventWatcher";
  $desc = $collectedClasses.EventWatcher;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventWatcher.prototype = $desc;
  function _Finishes(_bot_test$_matcher) {
    this._bot_test$_matcher = _bot_test$_matcher;
  }
  _Finishes.builtin$cls = "_Finishes";
  if (!"name" in _Finishes)
    _Finishes.name = "_Finishes";
  $desc = $collectedClasses._Finishes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Finishes.prototype = $desc;
  function _Finishes_matches_closure() {
  }
  _Finishes_matches_closure.builtin$cls = "_Finishes_matches_closure";
  if (!"name" in _Finishes_matches_closure)
    _Finishes_matches_closure.name = "_Finishes_matches_closure";
  $desc = $collectedClasses._Finishes_matches_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Finishes_matches_closure.prototype = $desc;
  function _Finishes_matches_closure0(this_0, done_1) {
    this.this_0 = this_0;
    this.done_1 = done_1;
  }
  _Finishes_matches_closure0.builtin$cls = "_Finishes_matches_closure0";
  if (!"name" in _Finishes_matches_closure0)
    _Finishes_matches_closure0.name = "_Finishes_matches_closure0";
  $desc = $collectedClasses._Finishes_matches_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Finishes_matches_closure0.prototype = $desc;
  function _Finishes_matches__closure0(this_2, value_3) {
    this.this_2 = this_2;
    this.value_3 = value_3;
  }
  _Finishes_matches__closure0.builtin$cls = "_Finishes_matches__closure0";
  if (!"name" in _Finishes_matches__closure0)
    _Finishes_matches__closure0.name = "_Finishes_matches__closure0";
  $desc = $collectedClasses._Finishes_matches__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Finishes_matches__closure0.prototype = $desc;
  function _Finishes_matches_closure1(done_4) {
    this.done_4 = done_4;
  }
  _Finishes_matches_closure1.builtin$cls = "_Finishes_matches_closure1";
  if (!"name" in _Finishes_matches_closure1)
    _Finishes_matches_closure1.name = "_Finishes_matches_closure1";
  $desc = $collectedClasses._Finishes_matches_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Finishes_matches_closure1.prototype = $desc;
  function _Finishes_matches__closure(error_5, stack_6) {
    this.error_5 = error_5;
    this.stack_6 = stack_6;
  }
  _Finishes_matches__closure.builtin$cls = "_Finishes_matches__closure";
  if (!"name" in _Finishes_matches__closure)
    _Finishes_matches__closure.name = "_Finishes_matches__closure";
  $desc = $collectedClasses._Finishes_matches__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Finishes_matches__closure.prototype = $desc;
  function _InvalidOperationError(_matcher$_name) {
    this._matcher$_name = _matcher$_name;
  }
  _InvalidOperationError.builtin$cls = "_InvalidOperationError";
  if (!"name" in _InvalidOperationError)
    _InvalidOperationError.name = "_InvalidOperationError";
  $desc = $collectedClasses._InvalidOperationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InvalidOperationError.prototype = $desc;
  function _NullArgumentError(_matcher$_name) {
    this._matcher$_name = _matcher$_name;
  }
  _NullArgumentError.builtin$cls = "_NullArgumentError";
  if (!"name" in _NullArgumentError)
    _NullArgumentError.name = "_NullArgumentError";
  $desc = $collectedClasses._NullArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NullArgumentError.prototype = $desc;
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function SubListIterable(_iterable, _start, _endOrLength) {
    this._iterable = _iterable;
    this._start = _start;
    this._endOrLength = _endOrLength;
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SubListIterable.prototype = $desc;
  function ListIterator(_iterable, _dev$_length, _index, _dev$_current) {
    this._iterable = _iterable;
    this._dev$_length = _dev$_length;
    this._index = _index;
    this._dev$_current = _dev$_current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_dev$_current, _iterator, _f) {
    this._dev$_current = _dev$_current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function MappedListIterable(_source, _f) {
    this._source = _source;
    this._f = _f;
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedListIterable.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function ExpandIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  ExpandIterable.builtin$cls = "ExpandIterable";
  if (!"name" in ExpandIterable)
    ExpandIterable.name = "ExpandIterable";
  $desc = $collectedClasses.ExpandIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterable.prototype = $desc;
  function ExpandIterator(_iterator, _f, _currentExpansion, _dev$_current) {
    this._iterator = _iterator;
    this._f = _f;
    this._currentExpansion = _currentExpansion;
    this._dev$_current = _dev$_current;
  }
  ExpandIterator.builtin$cls = "ExpandIterator";
  if (!"name" in ExpandIterator)
    ExpandIterator.name = "ExpandIterator";
  $desc = $collectedClasses.ExpandIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterator.prototype = $desc;
  function TakeWhileIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  TakeWhileIterable.builtin$cls = "TakeWhileIterable";
  if (!"name" in TakeWhileIterable)
    TakeWhileIterable.name = "TakeWhileIterable";
  $desc = $collectedClasses.TakeWhileIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TakeWhileIterable.prototype = $desc;
  function TakeWhileIterator(_iterator, _f, _isFinished) {
    this._iterator = _iterator;
    this._f = _f;
    this._isFinished = _isFinished;
  }
  TakeWhileIterator.builtin$cls = "TakeWhileIterator";
  if (!"name" in TakeWhileIterator)
    TakeWhileIterator.name = "TakeWhileIterator";
  $desc = $collectedClasses.TakeWhileIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TakeWhileIterator.prototype = $desc;
  function SkipWhileIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  SkipWhileIterable.builtin$cls = "SkipWhileIterable";
  if (!"name" in SkipWhileIterable)
    SkipWhileIterable.name = "SkipWhileIterable";
  $desc = $collectedClasses.SkipWhileIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SkipWhileIterable.prototype = $desc;
  function SkipWhileIterator(_iterator, _f, _hasSkipped) {
    this._iterator = _iterator;
    this._f = _f;
    this._hasSkipped = _hasSkipped;
  }
  SkipWhileIterator.builtin$cls = "SkipWhileIterator";
  if (!"name" in SkipWhileIterator)
    SkipWhileIterator.name = "SkipWhileIterator";
  $desc = $collectedClasses.SkipWhileIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SkipWhileIterator.prototype = $desc;
  function EmptyIterator() {
  }
  EmptyIterator.builtin$cls = "EmptyIterator";
  if (!"name" in EmptyIterator)
    EmptyIterator.name = "EmptyIterator";
  $desc = $collectedClasses.EmptyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function UnmodifiableListMixin() {
  }
  UnmodifiableListMixin.builtin$cls = "UnmodifiableListMixin";
  if (!"name" in UnmodifiableListMixin)
    UnmodifiableListMixin.name = "UnmodifiableListMixin";
  $desc = $collectedClasses.UnmodifiableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListMixin.prototype = $desc;
  function UnmodifiableListBase() {
  }
  UnmodifiableListBase.builtin$cls = "UnmodifiableListBase";
  if (!"name" in UnmodifiableListBase)
    UnmodifiableListBase.name = "UnmodifiableListBase";
  $desc = $collectedClasses.UnmodifiableListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListBase.prototype = $desc;
  function ReversedListIterable(_source) {
    this._source = _source;
  }
  ReversedListIterable.builtin$cls = "ReversedListIterable";
  if (!"name" in ReversedListIterable)
    ReversedListIterable.name = "ReversedListIterable";
  $desc = $collectedClasses.ReversedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReversedListIterable.prototype = $desc;
  function Symbol(_name) {
    this._name = _name;
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  Symbol.prototype.get$_name = function() {
    return this._name;
  };
  function JsMirrorSystem(_cachedLibraries, isolate) {
    this._cachedLibraries = _cachedLibraries;
    this.isolate = isolate;
  }
  JsMirrorSystem.builtin$cls = "JsMirrorSystem";
  if (!"name" in JsMirrorSystem)
    JsMirrorSystem.name = "JsMirrorSystem";
  $desc = $collectedClasses.JsMirrorSystem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMirrorSystem.prototype = $desc;
  function JsMirrorSystem_computeLibrariesByName_closure() {
  }
  JsMirrorSystem_computeLibrariesByName_closure.builtin$cls = "JsMirrorSystem_computeLibrariesByName_closure";
  if (!"name" in JsMirrorSystem_computeLibrariesByName_closure)
    JsMirrorSystem_computeLibrariesByName_closure.name = "JsMirrorSystem_computeLibrariesByName_closure";
  $desc = $collectedClasses.JsMirrorSystem_computeLibrariesByName_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMirrorSystem_computeLibrariesByName_closure.prototype = $desc;
  function JsMirror() {
  }
  JsMirror.builtin$cls = "JsMirror";
  if (!"name" in JsMirror)
    JsMirror.name = "JsMirror";
  $desc = $collectedClasses.JsMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMirror.prototype = $desc;
  function JsIsolateMirror(_isolateContext) {
    this._isolateContext = _isolateContext;
  }
  JsIsolateMirror.builtin$cls = "JsIsolateMirror";
  if (!"name" in JsIsolateMirror)
    JsIsolateMirror.name = "JsIsolateMirror";
  $desc = $collectedClasses.JsIsolateMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsIsolateMirror.prototype = $desc;
  function JsDeclarationMirror(simpleName) {
    this.simpleName = simpleName;
  }
  JsDeclarationMirror.builtin$cls = "JsDeclarationMirror";
  if (!"name" in JsDeclarationMirror)
    JsDeclarationMirror.name = "JsDeclarationMirror";
  $desc = $collectedClasses.JsDeclarationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsDeclarationMirror.prototype = $desc;
  JsDeclarationMirror.prototype.get$simpleName = function() {
    return this.simpleName;
  };
  function JsTypeVariableMirror(owner, _typeVariable, _cachedUpperBound, simpleName) {
    this.owner = owner;
    this._typeVariable = _typeVariable;
    this._cachedUpperBound = _cachedUpperBound;
    this.simpleName = simpleName;
  }
  JsTypeVariableMirror.builtin$cls = "JsTypeVariableMirror";
  if (!"name" in JsTypeVariableMirror)
    JsTypeVariableMirror.name = "JsTypeVariableMirror";
  $desc = $collectedClasses.JsTypeVariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeVariableMirror.prototype = $desc;
  JsTypeVariableMirror.prototype.get$owner = function() {
    return this.owner;
  };
  function JsTypeMirror(simpleName) {
    this.simpleName = simpleName;
  }
  JsTypeMirror.builtin$cls = "JsTypeMirror";
  if (!"name" in JsTypeMirror)
    JsTypeMirror.name = "JsTypeMirror";
  $desc = $collectedClasses.JsTypeMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeMirror.prototype = $desc;
  function JsLibraryMirror(uri, _classes, _functions, _metadata, _compactFieldSpecification, _isRoot, _globalObject, _cachedFunctionMirrors, _cachedFields, _cachedClasses, _cachedFunctions, _cachedGetters, _cachedSetters, _cachedVariables, _cachedMembers, _cachedDeclarations, _cachedMetadata, simpleName) {
    this.uri = uri;
    this._classes = _classes;
    this._functions = _functions;
    this._metadata = _metadata;
    this._compactFieldSpecification = _compactFieldSpecification;
    this._isRoot = _isRoot;
    this._globalObject = _globalObject;
    this._cachedFunctionMirrors = _cachedFunctionMirrors;
    this._cachedFields = _cachedFields;
    this._cachedClasses = _cachedClasses;
    this._cachedFunctions = _cachedFunctions;
    this._cachedGetters = _cachedGetters;
    this._cachedSetters = _cachedSetters;
    this._cachedVariables = _cachedVariables;
    this._cachedMembers = _cachedMembers;
    this._cachedDeclarations = _cachedDeclarations;
    this._cachedMetadata = _cachedMetadata;
    this.simpleName = simpleName;
  }
  JsLibraryMirror.builtin$cls = "JsLibraryMirror";
  if (!"name" in JsLibraryMirror)
    JsLibraryMirror.name = "JsLibraryMirror";
  $desc = $collectedClasses.JsLibraryMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsLibraryMirror.prototype = $desc;
  JsLibraryMirror.prototype.get$uri = function() {
    return this.uri;
  };
  JsLibraryMirror.prototype.get$_globalObject = function() {
    return this._globalObject;
  };
  function JsDeclarationMirror_JsObjectMirror() {
  }
  JsDeclarationMirror_JsObjectMirror.builtin$cls = "JsDeclarationMirror_JsObjectMirror";
  if (!"name" in JsDeclarationMirror_JsObjectMirror)
    JsDeclarationMirror_JsObjectMirror.name = "JsDeclarationMirror_JsObjectMirror";
  $desc = $collectedClasses.JsDeclarationMirror_JsObjectMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsDeclarationMirror_JsObjectMirror.prototype = $desc;
  function JsLibraryMirror_members_addToResult(result_0) {
    this.result_0 = result_0;
  }
  JsLibraryMirror_members_addToResult.builtin$cls = "JsLibraryMirror_members_addToResult";
  if (!"name" in JsLibraryMirror_members_addToResult)
    JsLibraryMirror_members_addToResult.name = "JsLibraryMirror_members_addToResult";
  $desc = $collectedClasses.JsLibraryMirror_members_addToResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsLibraryMirror_members_addToResult.prototype = $desc;
  function JsLibraryMirror_declarations_addToResult(result_0) {
    this.result_0 = result_0;
  }
  JsLibraryMirror_declarations_addToResult.builtin$cls = "JsLibraryMirror_declarations_addToResult";
  if (!"name" in JsLibraryMirror_declarations_addToResult)
    JsLibraryMirror_declarations_addToResult.name = "JsLibraryMirror_declarations_addToResult";
  $desc = $collectedClasses.JsLibraryMirror_declarations_addToResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsLibraryMirror_declarations_addToResult.prototype = $desc;
  function filterMembers_closure(method_0) {
    this.method_0 = method_0;
  }
  filterMembers_closure.builtin$cls = "filterMembers_closure";
  if (!"name" in filterMembers_closure)
    filterMembers_closure.name = "filterMembers_closure";
  $desc = $collectedClasses.filterMembers_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  filterMembers_closure.prototype = $desc;
  function JsMixinApplication(superclass, mixin, _cachedSimpleName, simpleName) {
    this.superclass = superclass;
    this.mixin = mixin;
    this._cachedSimpleName = _cachedSimpleName;
    this.simpleName = simpleName;
  }
  JsMixinApplication.builtin$cls = "JsMixinApplication";
  if (!"name" in JsMixinApplication)
    JsMixinApplication.name = "JsMixinApplication";
  $desc = $collectedClasses.JsMixinApplication;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMixinApplication.prototype = $desc;
  function JsTypeMirror_JsObjectMirror() {
  }
  JsTypeMirror_JsObjectMirror.builtin$cls = "JsTypeMirror_JsObjectMirror";
  if (!"name" in JsTypeMirror_JsObjectMirror)
    JsTypeMirror_JsObjectMirror.name = "JsTypeMirror_JsObjectMirror";
  $desc = $collectedClasses.JsTypeMirror_JsObjectMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeMirror_JsObjectMirror.prototype = $desc;
  function JsObjectMirror() {
  }
  JsObjectMirror.builtin$cls = "JsObjectMirror";
  if (!"name" in JsObjectMirror)
    JsObjectMirror.name = "JsObjectMirror";
  $desc = $collectedClasses.JsObjectMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObjectMirror.prototype = $desc;
  function JsInstanceMirror(reflectee) {
    this.reflectee = reflectee;
  }
  JsInstanceMirror.builtin$cls = "JsInstanceMirror";
  if (!"name" in JsInstanceMirror)
    JsInstanceMirror.name = "JsInstanceMirror";
  $desc = $collectedClasses.JsInstanceMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsInstanceMirror.prototype = $desc;
  function JsTypeBoundClassMirror(_class, _typeArguments, _cachedTypeArguments, _cachedDeclarations, _cachedMembers, _cachedConstructors, _cachedVariables, _cachedGetters, _cachedSetters, _cachedMethodsMap, _cachedMethods, _superclass, _cachedSuperinterfaces, simpleName) {
    this._class = _class;
    this._typeArguments = _typeArguments;
    this._cachedTypeArguments = _cachedTypeArguments;
    this._cachedDeclarations = _cachedDeclarations;
    this._cachedMembers = _cachedMembers;
    this._cachedConstructors = _cachedConstructors;
    this._cachedVariables = _cachedVariables;
    this._cachedGetters = _cachedGetters;
    this._cachedSetters = _cachedSetters;
    this._cachedMethodsMap = _cachedMethodsMap;
    this._cachedMethods = _cachedMethods;
    this._superclass = _superclass;
    this._cachedSuperinterfaces = _cachedSuperinterfaces;
    this.simpleName = simpleName;
  }
  JsTypeBoundClassMirror.builtin$cls = "JsTypeBoundClassMirror";
  if (!"name" in JsTypeBoundClassMirror)
    JsTypeBoundClassMirror.name = "JsTypeBoundClassMirror";
  $desc = $collectedClasses.JsTypeBoundClassMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror.prototype = $desc;
  function JsTypeBoundClassMirror_declarations_closure(result_0) {
    this.result_0 = result_0;
  }
  JsTypeBoundClassMirror_declarations_closure.builtin$cls = "JsTypeBoundClassMirror_declarations_closure";
  if (!"name" in JsTypeBoundClassMirror_declarations_closure)
    JsTypeBoundClassMirror_declarations_closure.name = "JsTypeBoundClassMirror_declarations_closure";
  $desc = $collectedClasses.JsTypeBoundClassMirror_declarations_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror_declarations_closure.prototype = $desc;
  function JsClassMirror(_mangledName, _jsConstructorOrInterceptor, _fieldsDescriptor, _fieldsMetadata, _jsConstructorCache, _metadata, _superclass, _cachedMethods, _cachedFields, _cachedConstructors, _cachedMethodsMap, _cachedGetters, _cachedSetters, _cachedVariables, _cachedMembers, _cachedDeclarations, _cachedMetadata, _cachedSuperinterfaces, _cachedTypeVariables, _owner, simpleName) {
    this._mangledName = _mangledName;
    this._jsConstructorOrInterceptor = _jsConstructorOrInterceptor;
    this._fieldsDescriptor = _fieldsDescriptor;
    this._fieldsMetadata = _fieldsMetadata;
    this._jsConstructorCache = _jsConstructorCache;
    this._metadata = _metadata;
    this._superclass = _superclass;
    this._cachedMethods = _cachedMethods;
    this._cachedFields = _cachedFields;
    this._cachedConstructors = _cachedConstructors;
    this._cachedMethodsMap = _cachedMethodsMap;
    this._cachedGetters = _cachedGetters;
    this._cachedSetters = _cachedSetters;
    this._cachedVariables = _cachedVariables;
    this._cachedMembers = _cachedMembers;
    this._cachedDeclarations = _cachedDeclarations;
    this._cachedMetadata = _cachedMetadata;
    this._cachedSuperinterfaces = _cachedSuperinterfaces;
    this._cachedTypeVariables = _cachedTypeVariables;
    this._owner = _owner;
    this.simpleName = simpleName;
  }
  JsClassMirror.builtin$cls = "JsClassMirror";
  if (!"name" in JsClassMirror)
    JsClassMirror.name = "JsClassMirror";
  $desc = $collectedClasses.JsClassMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClassMirror.prototype = $desc;
  function JsTypeMirror_JsObjectMirror0() {
  }
  JsTypeMirror_JsObjectMirror0.builtin$cls = "JsTypeMirror_JsObjectMirror0";
  if (!"name" in JsTypeMirror_JsObjectMirror0)
    JsTypeMirror_JsObjectMirror0.name = "JsTypeMirror_JsObjectMirror0";
  $desc = $collectedClasses.JsTypeMirror_JsObjectMirror0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeMirror_JsObjectMirror0.prototype = $desc;
  function JsClassMirror_declarations_addToResult(result_0) {
    this.result_0 = result_0;
  }
  JsClassMirror_declarations_addToResult.builtin$cls = "JsClassMirror_declarations_addToResult";
  if (!"name" in JsClassMirror_declarations_addToResult)
    JsClassMirror_declarations_addToResult.name = "JsClassMirror_declarations_addToResult";
  $desc = $collectedClasses.JsClassMirror_declarations_addToResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClassMirror_declarations_addToResult.prototype = $desc;
  function JsClassMirror_declarations_closure(result_1) {
    this.result_1 = result_1;
  }
  JsClassMirror_declarations_closure.builtin$cls = "JsClassMirror_declarations_closure";
  if (!"name" in JsClassMirror_declarations_closure)
    JsClassMirror_declarations_closure.name = "JsClassMirror_declarations_closure";
  $desc = $collectedClasses.JsClassMirror_declarations_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClassMirror_declarations_closure.prototype = $desc;
  function JsVariableMirror(_jsName, isFinal, isStatic, _metadataFunction, _owner, _type, _metadata, simpleName) {
    this._jsName = _jsName;
    this.isFinal = isFinal;
    this.isStatic = isStatic;
    this._metadataFunction = _metadataFunction;
    this._owner = _owner;
    this._type = _type;
    this._metadata = _metadata;
    this.simpleName = simpleName;
  }
  JsVariableMirror.builtin$cls = "JsVariableMirror";
  if (!"name" in JsVariableMirror)
    JsVariableMirror.name = "JsVariableMirror";
  $desc = $collectedClasses.JsVariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsVariableMirror.prototype = $desc;
  JsVariableMirror.prototype.get$_jsName = function() {
    return this._jsName;
  };
  JsVariableMirror.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  function JsClosureMirror(reflectee) {
    this.reflectee = reflectee;
  }
  JsClosureMirror.builtin$cls = "JsClosureMirror";
  if (!"name" in JsClosureMirror)
    JsClosureMirror.name = "JsClosureMirror";
  $desc = $collectedClasses.JsClosureMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClosureMirror.prototype = $desc;
  function JsMethodMirror(_jsFunction, _parameterCount, isGetter, isSetter, isStatic, isConstructor, isOperator, _owner, _metadata, _returnType, _parameters, simpleName) {
    this._jsFunction = _jsFunction;
    this._parameterCount = _parameterCount;
    this.isGetter = isGetter;
    this.isSetter = isSetter;
    this.isStatic = isStatic;
    this.isConstructor = isConstructor;
    this.isOperator = isOperator;
    this._owner = _owner;
    this._metadata = _metadata;
    this._returnType = _returnType;
    this._parameters = _parameters;
    this.simpleName = simpleName;
  }
  JsMethodMirror.builtin$cls = "JsMethodMirror";
  if (!"name" in JsMethodMirror)
    JsMethodMirror.name = "JsMethodMirror";
  $desc = $collectedClasses.JsMethodMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMethodMirror.prototype = $desc;
  JsMethodMirror.prototype.get$isSetter = function() {
    return this.isSetter;
  };
  JsMethodMirror.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  JsMethodMirror.prototype.get$isConstructor = function() {
    return this.isConstructor;
  };
  function JsTypedefMirror(_mangledName, referent, simpleName) {
    this._mangledName = _mangledName;
    this.referent = referent;
    this.simpleName = simpleName;
  }
  JsTypedefMirror.builtin$cls = "JsTypedefMirror";
  if (!"name" in JsTypedefMirror)
    JsTypedefMirror.name = "JsTypedefMirror";
  $desc = $collectedClasses.JsTypedefMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypedefMirror.prototype = $desc;
  function JsFunctionTypeMirror(_typeData, _cachedToString, _cachedReturnType, _cachedParameters, owner) {
    this._typeData = _typeData;
    this._cachedToString = _cachedToString;
    this._cachedReturnType = _cachedReturnType;
    this._cachedParameters = _cachedParameters;
    this.owner = owner;
  }
  JsFunctionTypeMirror.builtin$cls = "JsFunctionTypeMirror";
  if (!"name" in JsFunctionTypeMirror)
    JsFunctionTypeMirror.name = "JsFunctionTypeMirror";
  $desc = $collectedClasses.JsFunctionTypeMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsFunctionTypeMirror.prototype = $desc;
  JsFunctionTypeMirror.prototype.get$owner = function() {
    return this.owner;
  };
  function UnmodifiableMapView(__js_mirrors$_source) {
    this.__js_mirrors$_source = __js_mirrors$_source;
  }
  UnmodifiableMapView.builtin$cls = "UnmodifiableMapView";
  if (!"name" in UnmodifiableMapView)
    UnmodifiableMapView.name = "UnmodifiableMapView";
  $desc = $collectedClasses.UnmodifiableMapView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableMapView.prototype = $desc;
  function computeReflectiveNames_closure(result_0) {
    this.result_0 = result_0;
  }
  computeReflectiveNames_closure.builtin$cls = "computeReflectiveNames_closure";
  if (!"name" in computeReflectiveNames_closure)
    computeReflectiveNames_closure.name = "computeReflectiveNames_closure";
  $desc = $collectedClasses.computeReflectiveNames_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  computeReflectiveNames_closure.prototype = $desc;
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _BroadcastStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _BroadcastStream.builtin$cls = "_BroadcastStream";
  if (!"name" in _BroadcastStream)
    _BroadcastStream.name = "_BroadcastStream";
  $desc = $collectedClasses._BroadcastStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStream.prototype = $desc;
  function _BroadcastSubscription(_eventState, _async$_next, _async$_previous, _async$_controller, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._eventState = _eventState;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._async$_controller = _async$_controller;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BroadcastSubscription.builtin$cls = "_BroadcastSubscription";
  if (!"name" in _BroadcastSubscription)
    _BroadcastSubscription.name = "_BroadcastSubscription";
  $desc = $collectedClasses._BroadcastSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastSubscription.prototype = $desc;
  _BroadcastSubscription.prototype.get$_eventState = function() {
    return this._eventState;
  };
  _BroadcastSubscription.prototype.set$_eventState = function(v) {
    return this._eventState = v;
  };
  _BroadcastSubscription.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastSubscription.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastSubscription.prototype.get$_async$_previous = function() {
    return this._async$_previous;
  };
  _BroadcastSubscription.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function BoundClosure$0(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$0.builtin$cls = "BoundClosure$0";
  $desc = $collectedClasses.BoundClosure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$0.prototype = $desc;
  function _BroadcastStreamController(_onListen, _onCancel, _async$_next, _async$_previous) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
  }
  _BroadcastStreamController.builtin$cls = "_BroadcastStreamController";
  if (!"name" in _BroadcastStreamController)
    _BroadcastStreamController.name = "_BroadcastStreamController";
  $desc = $collectedClasses._BroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStreamController.prototype = $desc;
  _BroadcastStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _BroadcastStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  _BroadcastStreamController.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastStreamController.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastStreamController.prototype.get$_async$_previous = function() {
    return this._async$_previous;
  };
  _BroadcastStreamController.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function BoundClosure$i1(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i1.builtin$cls = "BoundClosure$i1";
  $desc = $collectedClasses.BoundClosure$i1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i1.prototype = $desc;
  function BoundClosure$2(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$2.builtin$cls = "BoundClosure$2";
  $desc = $collectedClasses.BoundClosure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$2.prototype = $desc;
  function _SyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _SyncBroadcastStreamController.builtin$cls = "_SyncBroadcastStreamController";
  if (!"name" in _SyncBroadcastStreamController)
    _SyncBroadcastStreamController.name = "_SyncBroadcastStreamController";
  $desc = $collectedClasses._SyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController.prototype = $desc;
  function _SyncBroadcastStreamController__sendData_closure(this_0, data_1) {
    this.this_0 = this_0;
    this.data_1 = data_1;
  }
  _SyncBroadcastStreamController__sendData_closure.builtin$cls = "_SyncBroadcastStreamController__sendData_closure";
  if (!"name" in _SyncBroadcastStreamController__sendData_closure)
    _SyncBroadcastStreamController__sendData_closure.name = "_SyncBroadcastStreamController__sendData_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendData_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _SyncBroadcastStreamController__sendError_closure.builtin$cls = "_SyncBroadcastStreamController__sendError_closure";
  if (!"name" in _SyncBroadcastStreamController__sendError_closure)
    _SyncBroadcastStreamController__sendError_closure.name = "_SyncBroadcastStreamController__sendError_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendError_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendDone_closure(this_0) {
    this.this_0 = this_0;
  }
  _SyncBroadcastStreamController__sendDone_closure.builtin$cls = "_SyncBroadcastStreamController__sendDone_closure";
  if (!"name" in _SyncBroadcastStreamController__sendDone_closure)
    _SyncBroadcastStreamController__sendDone_closure.name = "_SyncBroadcastStreamController__sendDone_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendDone_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendDone_closure.prototype = $desc;
  function _AsyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _AsyncBroadcastStreamController.builtin$cls = "_AsyncBroadcastStreamController";
  if (!"name" in _AsyncBroadcastStreamController)
    _AsyncBroadcastStreamController.name = "_AsyncBroadcastStreamController";
  $desc = $collectedClasses._AsyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncBroadcastStreamController.prototype = $desc;
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function Future_Future_closure(computation_0, result_1) {
    this.computation_0 = computation_0;
    this.result_1 = result_1;
  }
  Future_Future_closure.builtin$cls = "Future_Future_closure";
  if (!"name" in Future_Future_closure)
    Future_Future_closure.name = "Future_Future_closure";
  $desc = $collectedClasses.Future_Future_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_Future_closure.prototype = $desc;
  function Future_Future$delayed_closure0(computation_0) {
    this.computation_0 = computation_0;
  }
  Future_Future$delayed_closure0.builtin$cls = "Future_Future$delayed_closure0";
  if (!"name" in Future_Future$delayed_closure0)
    Future_Future$delayed_closure0.name = "Future_Future$delayed_closure0";
  $desc = $collectedClasses.Future_Future$delayed_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_Future$delayed_closure0.prototype = $desc;
  function Future_Future$delayed_closure(completer_1) {
    this.completer_1 = completer_1;
  }
  Future_Future$delayed_closure.builtin$cls = "Future_Future$delayed_closure";
  if (!"name" in Future_Future$delayed_closure)
    Future_Future$delayed_closure.name = "Future_Future$delayed_closure";
  $desc = $collectedClasses.Future_Future$delayed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_Future$delayed_closure.prototype = $desc;
  function Future_wait_handleError(box_0, eagerError_1) {
    this.box_0 = box_0;
    this.eagerError_1 = eagerError_1;
  }
  Future_wait_handleError.builtin$cls = "Future_wait_handleError";
  if (!"name" in Future_wait_handleError)
    Future_wait_handleError.name = "Future_wait_handleError";
  $desc = $collectedClasses.Future_wait_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_handleError.prototype = $desc;
  function Future_wait_closure(box_0, eagerError_2, pos_3) {
    this.box_0 = box_0;
    this.eagerError_2 = eagerError_2;
    this.pos_3 = pos_3;
  }
  Future_wait_closure.builtin$cls = "Future_wait_closure";
  if (!"name" in Future_wait_closure)
    Future_wait_closure.name = "Future_wait_closure";
  $desc = $collectedClasses.Future_wait_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_closure.prototype = $desc;
  function Future_forEach_nextElement(f_0, doneSignal_1, iterator_2) {
    this.f_0 = f_0;
    this.doneSignal_1 = doneSignal_1;
    this.iterator_2 = iterator_2;
  }
  Future_forEach_nextElement.builtin$cls = "Future_forEach_nextElement";
  if (!"name" in Future_forEach_nextElement)
    Future_forEach_nextElement.name = "Future_forEach_nextElement";
  $desc = $collectedClasses.Future_forEach_nextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_forEach_nextElement.prototype = $desc;
  function Future_forEach_nextElement_closure(f_3, iterator_4) {
    this.f_3 = f_3;
    this.iterator_4 = iterator_4;
  }
  Future_forEach_nextElement_closure.builtin$cls = "Future_forEach_nextElement_closure";
  if (!"name" in Future_forEach_nextElement_closure)
    Future_forEach_nextElement_closure.name = "Future_forEach_nextElement_closure";
  $desc = $collectedClasses.Future_forEach_nextElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_forEach_nextElement_closure.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _SyncCompleter(future) {
    this.future = future;
  }
  _SyncCompleter.builtin$cls = "_SyncCompleter";
  if (!"name" in _SyncCompleter)
    _SyncCompleter.name = "_SyncCompleter";
  $desc = $collectedClasses._SyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncCompleter.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  _Future.prototype.set$_nextListener = function(v) {
    return this._nextListener = v;
  };
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainFutures_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainFutures_closure.builtin$cls = "_Future__chainFutures_closure";
  if (!"name" in _Future__chainFutures_closure)
    _Future__chainFutures_closure.name = "_Future__chainFutures_closure";
  $desc = $collectedClasses._Future__chainFutures_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure.prototype = $desc;
  function _Future__chainFutures_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainFutures_closure0.builtin$cls = "_Future__chainFutures_closure0";
  if (!"name" in _Future__chainFutures_closure0)
    _Future__chainFutures_closure0.name = "_Future__chainFutures_closure0";
  $desc = $collectedClasses._Future__chainFutures_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_closure(box_2, listener_3) {
    this.box_2 = box_2;
    this.listener_3 = listener_3;
  }
  _Future__propagateToListeners_closure.builtin$cls = "_Future__propagateToListeners_closure";
  if (!"name" in _Future__propagateToListeners_closure)
    _Future__propagateToListeners_closure.name = "_Future__propagateToListeners_closure";
  $desc = $collectedClasses._Future__propagateToListeners_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure.prototype = $desc;
  function _Future__propagateToListeners_closure0(box_2, box_1, hasError_4, listener_5) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_4 = hasError_4;
    this.listener_5 = listener_5;
  }
  _Future__propagateToListeners_closure0.builtin$cls = "_Future__propagateToListeners_closure0";
  if (!"name" in _Future__propagateToListeners_closure0)
    _Future__propagateToListeners_closure0.name = "_Future__propagateToListeners_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure0.prototype = $desc;
  function _Future__propagateToListeners__closure(box_2, listener_6) {
    this.box_2 = box_2;
    this.listener_6 = listener_6;
  }
  _Future__propagateToListeners__closure.builtin$cls = "_Future__propagateToListeners__closure";
  if (!"name" in _Future__propagateToListeners__closure)
    _Future__propagateToListeners__closure.name = "_Future__propagateToListeners__closure";
  $desc = $collectedClasses._Future__propagateToListeners__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure.prototype = $desc;
  function _Future__propagateToListeners__closure0(box_0, listener_7) {
    this.box_0 = box_0;
    this.listener_7 = listener_7;
  }
  _Future__propagateToListeners__closure0.builtin$cls = "_Future__propagateToListeners__closure0";
  if (!"name" in _Future__propagateToListeners__closure0)
    _Future__propagateToListeners__closure0.name = "_Future__propagateToListeners__closure0";
  $desc = $collectedClasses._Future__propagateToListeners__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure0.prototype = $desc;
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_Stream$fromIterable_closure(T_0, data_1) {
    this.T_0 = T_0;
    this.data_1 = data_1;
  }
  Stream_Stream$fromIterable_closure.builtin$cls = "Stream_Stream$fromIterable_closure";
  if (!"name" in Stream_Stream$fromIterable_closure)
    Stream_Stream$fromIterable_closure.name = "Stream_Stream$fromIterable_closure";
  $desc = $collectedClasses.Stream_Stream$fromIterable_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_Stream$fromIterable_closure.prototype = $desc;
  function Stream_reduce_closure(box_0, this_1, combine_2, result_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.combine_2 = combine_2;
    this.result_3 = result_3;
  }
  Stream_reduce_closure.builtin$cls = "Stream_reduce_closure";
  if (!"name" in Stream_reduce_closure)
    Stream_reduce_closure.name = "Stream_reduce_closure";
  $desc = $collectedClasses.Stream_reduce_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_reduce_closure.prototype = $desc;
  function Stream_reduce__closure(box_0, combine_4, element_5) {
    this.box_0 = box_0;
    this.combine_4 = combine_4;
    this.element_5 = element_5;
  }
  Stream_reduce__closure.builtin$cls = "Stream_reduce__closure";
  if (!"name" in Stream_reduce__closure)
    Stream_reduce__closure.name = "Stream_reduce__closure";
  $desc = $collectedClasses.Stream_reduce__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_reduce__closure.prototype = $desc;
  function Stream_reduce__closure0(box_0, this_6) {
    this.box_0 = box_0;
    this.this_6 = this_6;
  }
  Stream_reduce__closure0.builtin$cls = "Stream_reduce__closure0";
  if (!"name" in Stream_reduce__closure0)
    Stream_reduce__closure0.name = "Stream_reduce__closure0";
  $desc = $collectedClasses.Stream_reduce__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_reduce__closure0.prototype = $desc;
  function Stream_reduce_closure0(box_0, result_7) {
    this.box_0 = box_0;
    this.result_7 = result_7;
  }
  Stream_reduce_closure0.builtin$cls = "Stream_reduce_closure0";
  if (!"name" in Stream_reduce_closure0)
    Stream_reduce_closure0.name = "Stream_reduce_closure0";
  $desc = $collectedClasses.Stream_reduce_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_reduce_closure0.prototype = $desc;
  function Stream_contains_closure(box_0, this_1, needle_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.needle_2 = needle_2;
    this.future_3 = future_3;
  }
  Stream_contains_closure.builtin$cls = "Stream_contains_closure";
  if (!"name" in Stream_contains_closure)
    Stream_contains_closure.name = "Stream_contains_closure";
  $desc = $collectedClasses.Stream_contains_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure.prototype = $desc;
  function Stream_contains__closure(needle_4, element_5) {
    this.needle_4 = needle_4;
    this.element_5 = element_5;
  }
  Stream_contains__closure.builtin$cls = "Stream_contains__closure";
  if (!"name" in Stream_contains__closure)
    Stream_contains__closure.name = "Stream_contains__closure";
  $desc = $collectedClasses.Stream_contains__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure.prototype = $desc;
  function Stream_contains__closure0(box_0, future_6) {
    this.box_0 = box_0;
    this.future_6 = future_6;
  }
  Stream_contains__closure0.builtin$cls = "Stream_contains__closure0";
  if (!"name" in Stream_contains__closure0)
    Stream_contains__closure0.name = "Stream_contains__closure0";
  $desc = $collectedClasses.Stream_contains__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure0.prototype = $desc;
  function Stream_contains_closure0(future_7) {
    this.future_7 = future_7;
  }
  Stream_contains_closure0.builtin$cls = "Stream_contains_closure0";
  if (!"name" in Stream_contains_closure0)
    Stream_contains_closure0.name = "Stream_contains_closure0";
  $desc = $collectedClasses.Stream_contains_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure0.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function Stream_isEmpty_closure(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_isEmpty_closure.builtin$cls = "Stream_isEmpty_closure";
  if (!"name" in Stream_isEmpty_closure)
    Stream_isEmpty_closure.name = "Stream_isEmpty_closure";
  $desc = $collectedClasses.Stream_isEmpty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure.prototype = $desc;
  function Stream_isEmpty_closure0(future_2) {
    this.future_2 = future_2;
  }
  Stream_isEmpty_closure0.builtin$cls = "Stream_isEmpty_closure0";
  if (!"name" in Stream_isEmpty_closure0)
    Stream_isEmpty_closure0.name = "Stream_isEmpty_closure0";
  $desc = $collectedClasses.Stream_isEmpty_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure0.prototype = $desc;
  function Stream_toList_closure(this_0, result_1) {
    this.this_0 = this_0;
    this.result_1 = result_1;
  }
  Stream_toList_closure.builtin$cls = "Stream_toList_closure";
  if (!"name" in Stream_toList_closure)
    Stream_toList_closure.name = "Stream_toList_closure";
  $desc = $collectedClasses.Stream_toList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure.prototype = $desc;
  function Stream_toList_closure0(result_2, future_3) {
    this.result_2 = result_2;
    this.future_3 = future_3;
  }
  Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
  if (!"name" in Stream_toList_closure0)
    Stream_toList_closure0.name = "Stream_toList_closure0";
  $desc = $collectedClasses.Stream_toList_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure0.prototype = $desc;
  function Stream_first_closure(box_0, this_1, future_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.future_2 = future_2;
  }
  Stream_first_closure.builtin$cls = "Stream_first_closure";
  if (!"name" in Stream_first_closure)
    Stream_first_closure.name = "Stream_first_closure";
  $desc = $collectedClasses.Stream_first_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_first_closure.prototype = $desc;
  function Stream_first_closure0(future_3) {
    this.future_3 = future_3;
  }
  Stream_first_closure0.builtin$cls = "Stream_first_closure0";
  if (!"name" in Stream_first_closure0)
    Stream_first_closure0.name = "Stream_first_closure0";
  $desc = $collectedClasses.Stream_first_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_first_closure0.prototype = $desc;
  function Stream_last_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Stream_last_closure.builtin$cls = "Stream_last_closure";
  if (!"name" in Stream_last_closure)
    Stream_last_closure.name = "Stream_last_closure";
  $desc = $collectedClasses.Stream_last_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure.prototype = $desc;
  function Stream_last_closure0(box_0, future_2) {
    this.box_0 = box_0;
    this.future_2 = future_2;
  }
  Stream_last_closure0.builtin$cls = "Stream_last_closure0";
  if (!"name" in Stream_last_closure0)
    Stream_last_closure0.name = "Stream_last_closure0";
  $desc = $collectedClasses.Stream_last_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function _StreamController() {
  }
  _StreamController.builtin$cls = "_StreamController";
  if (!"name" in _StreamController)
    _StreamController.name = "_StreamController";
  $desc = $collectedClasses._StreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController.prototype = $desc;
  function BoundClosure$20(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$20.builtin$cls = "BoundClosure$20";
  $desc = $collectedClasses.BoundClosure$20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$20.prototype = $desc;
  function _StreamController__subscribe_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
  if (!"name" in _StreamController__subscribe_closure)
    _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
  $desc = $collectedClasses._StreamController__subscribe_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__subscribe_closure.prototype = $desc;
  function _StreamController__recordCancel_complete(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
  if (!"name" in _StreamController__recordCancel_complete)
    _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
  $desc = $collectedClasses._StreamController__recordCancel_complete;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__recordCancel_complete.prototype = $desc;
  function _SyncStreamControllerDispatch() {
  }
  _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
  if (!"name" in _SyncStreamControllerDispatch)
    _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
  $desc = $collectedClasses._SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamControllerDispatch() {
  }
  _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
  if (!"name" in _AsyncStreamControllerDispatch)
    _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
  $desc = $collectedClasses._AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _AsyncStreamController.builtin$cls = "_AsyncStreamController";
  if (!"name" in _AsyncStreamController)
    _AsyncStreamController.name = "_AsyncStreamController";
  $desc = $collectedClasses._AsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamController.prototype = $desc;
  _AsyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _AsyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _AsyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _AsyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__AsyncStreamControllerDispatch() {
  }
  _StreamController__AsyncStreamControllerDispatch.builtin$cls = "_StreamController__AsyncStreamControllerDispatch";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch)
    _StreamController__AsyncStreamControllerDispatch.name = "_StreamController__AsyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch.prototype = $desc;
  function _SyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _SyncStreamController.builtin$cls = "_SyncStreamController";
  if (!"name" in _SyncStreamController)
    _SyncStreamController.name = "_SyncStreamController";
  $desc = $collectedClasses._SyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamController.prototype = $desc;
  _SyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _SyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _SyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _SyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__SyncStreamControllerDispatch() {
  }
  _StreamController__SyncStreamControllerDispatch.builtin$cls = "_StreamController__SyncStreamControllerDispatch";
  if (!"name" in _StreamController__SyncStreamControllerDispatch)
    _StreamController__SyncStreamControllerDispatch.name = "_StreamController__SyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch.prototype = $desc;
  function _NoCallbacks() {
  }
  _NoCallbacks.builtin$cls = "_NoCallbacks";
  if (!"name" in _NoCallbacks)
    _NoCallbacks.name = "_NoCallbacks";
  $desc = $collectedClasses._NoCallbacks;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbacks.prototype = $desc;
  function _NoCallbackAsyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _NoCallbackAsyncStreamController.builtin$cls = "_NoCallbackAsyncStreamController";
  if (!"name" in _NoCallbackAsyncStreamController)
    _NoCallbackAsyncStreamController.name = "_NoCallbackAsyncStreamController";
  $desc = $collectedClasses._NoCallbackAsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbackAsyncStreamController.prototype = $desc;
  function _StreamController__AsyncStreamControllerDispatch0() {
  }
  _StreamController__AsyncStreamControllerDispatch0.builtin$cls = "_StreamController__AsyncStreamControllerDispatch0";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch0)
    _StreamController__AsyncStreamControllerDispatch0.name = "_StreamController__AsyncStreamControllerDispatch0";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch0.prototype = $desc;
  function _NoCallbackSyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _NoCallbackSyncStreamController.builtin$cls = "_NoCallbackSyncStreamController";
  if (!"name" in _NoCallbackSyncStreamController)
    _NoCallbackSyncStreamController.name = "_NoCallbackSyncStreamController";
  $desc = $collectedClasses._NoCallbackSyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbackSyncStreamController.prototype = $desc;
  function _StreamController__SyncStreamControllerDispatch0() {
  }
  _StreamController__SyncStreamControllerDispatch0.builtin$cls = "_StreamController__SyncStreamControllerDispatch0";
  if (!"name" in _StreamController__SyncStreamControllerDispatch0)
    _StreamController__SyncStreamControllerDispatch0.name = "_StreamController__SyncStreamControllerDispatch0";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch0.prototype = $desc;
  function _ControllerStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_async$_controller, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_controller = _async$_controller;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  _ControllerSubscription.prototype.get$_async$_controller = function() {
    return this._async$_controller;
  };
  function _AddStreamState() {
  }
  _AddStreamState.builtin$cls = "_AddStreamState";
  if (!"name" in _AddStreamState)
    _AddStreamState.name = "_AddStreamState";
  $desc = $collectedClasses._AddStreamState;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AddStreamState.prototype = $desc;
  function _AddStreamState_makeErrorHandler_closure(controller_0) {
    this.controller_0 = controller_0;
  }
  _AddStreamState_makeErrorHandler_closure.builtin$cls = "_AddStreamState_makeErrorHandler_closure";
  if (!"name" in _AddStreamState_makeErrorHandler_closure)
    _AddStreamState_makeErrorHandler_closure.name = "_AddStreamState_makeErrorHandler_closure";
  $desc = $collectedClasses._AddStreamState_makeErrorHandler_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AddStreamState_makeErrorHandler_closure.prototype = $desc;
  function _StreamControllerAddStreamState(varData, addStreamFuture, addSubscription) {
    this.varData = varData;
    this.addStreamFuture = addStreamFuture;
    this.addSubscription = addSubscription;
  }
  _StreamControllerAddStreamState.builtin$cls = "_StreamControllerAddStreamState";
  if (!"name" in _StreamControllerAddStreamState)
    _StreamControllerAddStreamState.name = "_StreamControllerAddStreamState";
  $desc = $collectedClasses._StreamControllerAddStreamState;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamControllerAddStreamState.prototype = $desc;
  _StreamControllerAddStreamState.prototype.get$varData = function() {
    return this.varData;
  };
  _StreamControllerAddStreamState.prototype.set$varData = function(v) {
    return this.varData = v;
  };
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _BufferingStreamSubscription(_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_onError = function() {
    return this._onError;
  };
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendError_sendError(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
  if (!"name" in _BufferingStreamSubscription__sendError_sendError)
    _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
  $desc = $collectedClasses._BufferingStreamSubscription__sendError_sendError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _GeneratedStreamImpl(_pending, _isUsed) {
    this._pending = _pending;
    this._isUsed = _isUsed;
  }
  _GeneratedStreamImpl.builtin$cls = "_GeneratedStreamImpl";
  if (!"name" in _GeneratedStreamImpl)
    _GeneratedStreamImpl.name = "_GeneratedStreamImpl";
  $desc = $collectedClasses._GeneratedStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GeneratedStreamImpl.prototype = $desc;
  function _IterablePendingEvents(_async$_iterator, _state) {
    this._async$_iterator = _async$_iterator;
    this._state = _state;
  }
  _IterablePendingEvents.builtin$cls = "_IterablePendingEvents";
  if (!"name" in _IterablePendingEvents)
    _IterablePendingEvents.name = "_IterablePendingEvents";
  $desc = $collectedClasses._IterablePendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IterablePendingEvents.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  _DelayedData.prototype.get$value = function(receiver) {
    return this.value;
  };
  function _DelayedError(error, stackTrace, next) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.next = next;
  }
  _DelayedError.builtin$cls = "_DelayedError";
  if (!"name" in _DelayedError)
    _DelayedError.name = "_DelayedError";
  $desc = $collectedClasses._DelayedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedError.prototype = $desc;
  _DelayedError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _DelayedError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _StreamIteratorImpl(_subscription, _async$_current, _futureOrPrefetch, _state) {
    this._subscription = _subscription;
    this._async$_current = _async$_current;
    this._futureOrPrefetch = _futureOrPrefetch;
    this._state = _state;
  }
  _StreamIteratorImpl.builtin$cls = "_StreamIteratorImpl";
  if (!"name" in _StreamIteratorImpl)
    _StreamIteratorImpl.name = "_StreamIteratorImpl";
  $desc = $collectedClasses._StreamIteratorImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamIteratorImpl.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _cancelAndValue_closure(future_0, value_1) {
    this.future_0 = future_0;
    this.value_1 = value_1;
  }
  _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
  if (!"name" in _cancelAndValue_closure)
    _cancelAndValue_closure.name = "_cancelAndValue_closure";
  $desc = $collectedClasses._cancelAndValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndValue_closure.prototype = $desc;
  function _ForwardingStream() {
  }
  _ForwardingStream.builtin$cls = "_ForwardingStream";
  if (!"name" in _ForwardingStream)
    _ForwardingStream.name = "_ForwardingStream";
  $desc = $collectedClasses._ForwardingStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStream.prototype = $desc;
  function _ForwardingStreamSubscription(_stream, _subscription, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._stream = _stream;
    this._subscription = _subscription;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
  if (!"name" in _ForwardingStreamSubscription)
    _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
  $desc = $collectedClasses._ForwardingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStreamSubscription.prototype = $desc;
  function _MapStream(_transform, _async$_source) {
    this._transform = _transform;
    this._async$_source = _async$_source;
  }
  _MapStream.builtin$cls = "_MapStream";
  if (!"name" in _MapStream)
    _MapStream.name = "_MapStream";
  $desc = $collectedClasses._MapStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MapStream.prototype = $desc;
  function _BaseZone() {
  }
  _BaseZone.builtin$cls = "_BaseZone";
  if (!"name" in _BaseZone)
    _BaseZone.name = "_BaseZone";
  $desc = $collectedClasses._BaseZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone.prototype = $desc;
  function _BaseZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindCallback_closure.builtin$cls = "_BaseZone_bindCallback_closure";
  if (!"name" in _BaseZone_bindCallback_closure)
    _BaseZone_bindCallback_closure.name = "_BaseZone_bindCallback_closure";
  $desc = $collectedClasses._BaseZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure.prototype = $desc;
  function _BaseZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindCallback_closure0.builtin$cls = "_BaseZone_bindCallback_closure0";
  if (!"name" in _BaseZone_bindCallback_closure0)
    _BaseZone_bindCallback_closure0.name = "_BaseZone_bindCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure0.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindUnaryCallback_closure.builtin$cls = "_BaseZone_bindUnaryCallback_closure";
  if (!"name" in _BaseZone_bindUnaryCallback_closure)
    _BaseZone_bindUnaryCallback_closure.name = "_BaseZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindUnaryCallback_closure0.builtin$cls = "_BaseZone_bindUnaryCallback_closure0";
  if (!"name" in _BaseZone_bindUnaryCallback_closure0)
    _BaseZone_bindUnaryCallback_closure0.name = "_BaseZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure0.prototype = $desc;
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _rootHandleUncaughtError__closure(error_2, stackTrace_3) {
    this.error_2 = error_2;
    this.stackTrace_3 = stackTrace_3;
  }
  _rootHandleUncaughtError__closure.builtin$cls = "_rootHandleUncaughtError__closure";
  if (!"name" in _rootHandleUncaughtError__closure)
    _rootHandleUncaughtError__closure.name = "_rootHandleUncaughtError__closure";
  $desc = $collectedClasses._rootHandleUncaughtError__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError__closure.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _keys, _offset, _collection$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function _LinkedHashMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_addAll_closure.builtin$cls = "_LinkedHashMap_addAll_closure";
  if (!"name" in _LinkedHashMap_addAll_closure)
    _LinkedHashMap_addAll_closure.name = "_LinkedHashMap_addAll_closure";
  $desc = $collectedClasses._LinkedHashMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_addAll_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _value, _next, _previous) {
    this._key = _key;
    this._value = _value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_value = function() {
    return this._value;
  };
  LinkedHashMapCell.prototype.set$_value = function(v) {
    return this._value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _collection$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_element, _next, _previous) {
    this._element = _element;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_element = function() {
    return this._element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function UnmodifiableListView(_collection$_source) {
    this._collection$_source = _collection$_source;
  }
  UnmodifiableListView.builtin$cls = "UnmodifiableListView";
  if (!"name" in UnmodifiableListView)
    UnmodifiableListView.name = "UnmodifiableListView";
  $desc = $collectedClasses.UnmodifiableListView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListView.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function Codec() {
  }
  Codec.builtin$cls = "Codec";
  if (!"name" in Codec)
    Codec.name = "Codec";
  $desc = $collectedClasses.Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Codec.prototype = $desc;
  function Converter() {
  }
  Converter.builtin$cls = "Converter";
  if (!"name" in Converter)
    Converter.name = "Converter";
  $desc = $collectedClasses.Converter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Converter.prototype = $desc;
  function Encoding() {
  }
  Encoding.builtin$cls = "Encoding";
  if (!"name" in Encoding)
    Encoding.name = "Encoding";
  $desc = $collectedClasses.Encoding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Encoding.prototype = $desc;
  function HtmlEscapeMode(_convert$_name, escapeLtGt, escapeQuot, escapeApos, escapeSlash) {
    this._convert$_name = _convert$_name;
    this.escapeLtGt = escapeLtGt;
    this.escapeQuot = escapeQuot;
    this.escapeApos = escapeApos;
    this.escapeSlash = escapeSlash;
  }
  HtmlEscapeMode.builtin$cls = "HtmlEscapeMode";
  if (!"name" in HtmlEscapeMode)
    HtmlEscapeMode.name = "HtmlEscapeMode";
  $desc = $collectedClasses.HtmlEscapeMode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEscapeMode.prototype = $desc;
  function HtmlEscape(mode) {
    this.mode = mode;
  }
  HtmlEscape.builtin$cls = "HtmlEscape";
  if (!"name" in HtmlEscape)
    HtmlEscape.name = "HtmlEscape";
  $desc = $collectedClasses.HtmlEscape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEscape.prototype = $desc;
  function Utf8Codec(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Codec.builtin$cls = "Utf8Codec";
  if (!"name" in Utf8Codec)
    Utf8Codec.name = "Utf8Codec";
  $desc = $collectedClasses.Utf8Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Codec.prototype = $desc;
  function Utf8Encoder() {
  }
  Utf8Encoder.builtin$cls = "Utf8Encoder";
  if (!"name" in Utf8Encoder)
    Utf8Encoder.name = "Utf8Encoder";
  $desc = $collectedClasses.Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Encoder.prototype = $desc;
  function _Utf8Encoder(_carry, _bufferIndex, _buffer) {
    this._carry = _carry;
    this._bufferIndex = _bufferIndex;
    this._buffer = _buffer;
  }
  _Utf8Encoder.builtin$cls = "_Utf8Encoder";
  if (!"name" in _Utf8Encoder)
    _Utf8Encoder.name = "_Utf8Encoder";
  $desc = $collectedClasses._Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Encoder.prototype = $desc;
  function Utf8Decoder(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Decoder.builtin$cls = "Utf8Decoder";
  if (!"name" in Utf8Decoder)
    Utf8Decoder.name = "Utf8Decoder";
  $desc = $collectedClasses.Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Decoder.prototype = $desc;
  function _Utf8Decoder(_allowMalformed, _stringSink, _isFirstCharacter, _convert$_value, _expectedUnits, _extraUnits) {
    this._allowMalformed = _allowMalformed;
    this._stringSink = _stringSink;
    this._isFirstCharacter = _isFirstCharacter;
    this._convert$_value = _convert$_value;
    this._expectedUnits = _expectedUnits;
    this._extraUnits = _extraUnits;
  }
  _Utf8Decoder.builtin$cls = "_Utf8Decoder";
  if (!"name" in _Utf8Decoder)
    _Utf8Decoder.name = "_Utf8Decoder";
  $desc = $collectedClasses._Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function bool() {
  }
  bool.builtin$cls = "bool";
  if (!"name" in bool)
    bool.name = "bool";
  $desc = $collectedClasses.bool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bool.prototype = $desc;
  function Comparable() {
  }
  Comparable.builtin$cls = "Comparable";
  if (!"name" in Comparable)
    Comparable.name = "Comparable";
  $desc = $collectedClasses.Comparable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comparable.prototype = $desc;
  function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  DateTime.prototype.get$millisecondsSinceEpoch = function() {
    return this.millisecondsSinceEpoch;
  };
  function DateTime_toString_fourDigits() {
  }
  DateTime_toString_fourDigits.builtin$cls = "DateTime_toString_fourDigits";
  if (!"name" in DateTime_toString_fourDigits)
    DateTime_toString_fourDigits.name = "DateTime_toString_fourDigits";
  $desc = $collectedClasses.DateTime_toString_fourDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_fourDigits.prototype = $desc;
  function DateTime_toString_threeDigits() {
  }
  DateTime_toString_threeDigits.builtin$cls = "DateTime_toString_threeDigits";
  if (!"name" in DateTime_toString_threeDigits)
    DateTime_toString_threeDigits.name = "DateTime_toString_threeDigits";
  $desc = $collectedClasses.DateTime_toString_threeDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_threeDigits.prototype = $desc;
  function DateTime_toString_twoDigits() {
  }
  DateTime_toString_twoDigits.builtin$cls = "DateTime_toString_twoDigits";
  if (!"name" in DateTime_toString_twoDigits)
    DateTime_toString_twoDigits.name = "DateTime_toString_twoDigits";
  $desc = $collectedClasses.DateTime_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_twoDigits.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  ArgumentError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function NoSuchMethodError(_core$_receiver, _memberName, _core$_arguments, _namedArguments, _existingArgumentNames) {
    this._core$_receiver = _core$_receiver;
    this._memberName = _memberName;
    this._core$_arguments = _core$_arguments;
    this._namedArguments = _namedArguments;
    this._existingArgumentNames = _existingArgumentNames;
  }
  NoSuchMethodError.builtin$cls = "NoSuchMethodError";
  if (!"name" in NoSuchMethodError)
    NoSuchMethodError.name = "NoSuchMethodError";
  $desc = $collectedClasses.NoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  UnsupportedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  UnimplementedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  StateError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  _ExceptionImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function FormatException(message) {
    this.message = message;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  FormatException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  Expando.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function Iterable() {
  }
  Iterable.builtin$cls = "Iterable";
  if (!"name" in Iterable)
    Iterable.name = "Iterable";
  $desc = $collectedClasses.Iterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterable.prototype = $desc;
  function _GeneratorIterable(_count, _generator) {
    this._count = _count;
    this._generator = _generator;
  }
  _GeneratorIterable.builtin$cls = "_GeneratorIterable";
  if (!"name" in _GeneratorIterable)
    _GeneratorIterable.name = "_GeneratorIterable";
  $desc = $collectedClasses._GeneratorIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GeneratorIterable.prototype = $desc;
  function _GeneratorIterator(_count, _generator, _core$_index, _core$_current) {
    this._count = _count;
    this._generator = _generator;
    this._core$_index = _core$_index;
    this._core$_current = _core$_current;
  }
  _GeneratorIterator.builtin$cls = "_GeneratorIterator";
  if (!"name" in _GeneratorIterator)
    _GeneratorIterator.name = "_GeneratorIterator";
  $desc = $collectedClasses._GeneratorIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GeneratorIterator.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function Map() {
  }
  Map.builtin$cls = "Map";
  if (!"name" in Map)
    Map.name = "Map";
  $desc = $collectedClasses.Map;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Map.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function Match() {
  }
  Match.builtin$cls = "Match";
  if (!"name" in Match)
    Match.name = "Match";
  $desc = $collectedClasses.Match;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Match.prototype = $desc;
  function Set() {
  }
  Set.builtin$cls = "Set";
  if (!"name" in Set)
    Set.name = "Set";
  $desc = $collectedClasses.Set;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Set.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol0() {
  }
  Symbol0.builtin$cls = "Symbol0";
  if (!"name" in Symbol0)
    Symbol0.name = "Symbol0";
  $desc = $collectedClasses.Symbol0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol0.prototype = $desc;
  function Uri(_host, _port, _path, scheme, userInfo, query, fragment, _pathSegments, _queryParameters) {
    this._host = _host;
    this._port = _port;
    this._path = _path;
    this.scheme = scheme;
    this.userInfo = userInfo;
    this.query = query;
    this.fragment = fragment;
    this._pathSegments = _pathSegments;
    this._queryParameters = _queryParameters;
  }
  Uri.builtin$cls = "Uri";
  if (!"name" in Uri)
    Uri.name = "Uri";
  $desc = $collectedClasses.Uri;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri.prototype = $desc;
  function Uri__makeScheme_isSchemeLowerCharacter() {
  }
  Uri__makeScheme_isSchemeLowerCharacter.builtin$cls = "Uri__makeScheme_isSchemeLowerCharacter";
  if (!"name" in Uri__makeScheme_isSchemeLowerCharacter)
    Uri__makeScheme_isSchemeLowerCharacter.name = "Uri__makeScheme_isSchemeLowerCharacter";
  $desc = $collectedClasses.Uri__makeScheme_isSchemeLowerCharacter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeScheme_isSchemeLowerCharacter.prototype = $desc;
  function Uri__makeScheme_isSchemeCharacter() {
  }
  Uri__makeScheme_isSchemeCharacter.builtin$cls = "Uri__makeScheme_isSchemeCharacter";
  if (!"name" in Uri__makeScheme_isSchemeCharacter)
    Uri__makeScheme_isSchemeCharacter.name = "Uri__makeScheme_isSchemeCharacter";
  $desc = $collectedClasses.Uri__makeScheme_isSchemeCharacter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeScheme_isSchemeCharacter.prototype = $desc;
  function Uri__makePath_closure() {
  }
  Uri__makePath_closure.builtin$cls = "Uri__makePath_closure";
  if (!"name" in Uri__makePath_closure)
    Uri__makePath_closure.name = "Uri__makePath_closure";
  $desc = $collectedClasses.Uri__makePath_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makePath_closure.prototype = $desc;
  function Uri__makeQuery_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Uri__makeQuery_closure.builtin$cls = "Uri__makeQuery_closure";
  if (!"name" in Uri__makeQuery_closure)
    Uri__makeQuery_closure.name = "Uri__makeQuery_closure";
  $desc = $collectedClasses.Uri__makeQuery_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeQuery_closure.prototype = $desc;
  function Uri__normalize_isNormalizedHexDigit() {
  }
  Uri__normalize_isNormalizedHexDigit.builtin$cls = "Uri__normalize_isNormalizedHexDigit";
  if (!"name" in Uri__normalize_isNormalizedHexDigit)
    Uri__normalize_isNormalizedHexDigit.name = "Uri__normalize_isNormalizedHexDigit";
  $desc = $collectedClasses.Uri__normalize_isNormalizedHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isNormalizedHexDigit.prototype = $desc;
  function Uri__normalize_isLowerCaseHexDigit() {
  }
  Uri__normalize_isLowerCaseHexDigit.builtin$cls = "Uri__normalize_isLowerCaseHexDigit";
  if (!"name" in Uri__normalize_isLowerCaseHexDigit)
    Uri__normalize_isLowerCaseHexDigit.name = "Uri__normalize_isLowerCaseHexDigit";
  $desc = $collectedClasses.Uri__normalize_isLowerCaseHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isLowerCaseHexDigit.prototype = $desc;
  function Uri__normalize_isUnreserved() {
  }
  Uri__normalize_isUnreserved.builtin$cls = "Uri__normalize_isUnreserved";
  if (!"name" in Uri__normalize_isUnreserved)
    Uri__normalize_isUnreserved.name = "Uri__normalize_isUnreserved";
  $desc = $collectedClasses.Uri__normalize_isUnreserved;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isUnreserved.prototype = $desc;
  function Uri__normalize_normalizeHexDigit(component_1, isNormalizedHexDigit_2, isLowerCaseHexDigit_3) {
    this.component_1 = component_1;
    this.isNormalizedHexDigit_2 = isNormalizedHexDigit_2;
    this.isLowerCaseHexDigit_3 = isLowerCaseHexDigit_3;
  }
  Uri__normalize_normalizeHexDigit.builtin$cls = "Uri__normalize_normalizeHexDigit";
  if (!"name" in Uri__normalize_normalizeHexDigit)
    Uri__normalize_normalizeHexDigit.name = "Uri__normalize_normalizeHexDigit";
  $desc = $collectedClasses.Uri__normalize_normalizeHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_normalizeHexDigit.prototype = $desc;
  function Uri__normalize_decodeHexDigitPair(component_4) {
    this.component_4 = component_4;
  }
  Uri__normalize_decodeHexDigitPair.builtin$cls = "Uri__normalize_decodeHexDigitPair";
  if (!"name" in Uri__normalize_decodeHexDigitPair)
    Uri__normalize_decodeHexDigitPair.name = "Uri__normalize_decodeHexDigitPair";
  $desc = $collectedClasses.Uri__normalize_decodeHexDigitPair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_decodeHexDigitPair.prototype = $desc;
  function Uri__normalize_fillResult(box_0, component_5) {
    this.box_0 = box_0;
    this.component_5 = component_5;
  }
  Uri__normalize_fillResult.builtin$cls = "Uri__normalize_fillResult";
  if (!"name" in Uri__normalize_fillResult)
    Uri__normalize_fillResult.name = "Uri__normalize_fillResult";
  $desc = $collectedClasses.Uri__normalize_fillResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_fillResult.prototype = $desc;
  function Uri_hashCode_combine() {
  }
  Uri_hashCode_combine.builtin$cls = "Uri_hashCode_combine";
  if (!"name" in Uri_hashCode_combine)
    Uri_hashCode_combine.name = "Uri_hashCode_combine";
  $desc = $collectedClasses.Uri_hashCode_combine;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_hashCode_combine.prototype = $desc;
  function Uri_parseIPv4Address_error() {
  }
  Uri_parseIPv4Address_error.builtin$cls = "Uri_parseIPv4Address_error";
  if (!"name" in Uri_parseIPv4Address_error)
    Uri_parseIPv4Address_error.name = "Uri_parseIPv4Address_error";
  $desc = $collectedClasses.Uri_parseIPv4Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_error.prototype = $desc;
  function Uri_parseIPv4Address_closure(error_0) {
    this.error_0 = error_0;
  }
  Uri_parseIPv4Address_closure.builtin$cls = "Uri_parseIPv4Address_closure";
  if (!"name" in Uri_parseIPv4Address_closure)
    Uri_parseIPv4Address_closure.name = "Uri_parseIPv4Address_closure";
  $desc = $collectedClasses.Uri_parseIPv4Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_closure.prototype = $desc;
  function Uri_parseIPv6Address_error() {
  }
  Uri_parseIPv6Address_error.builtin$cls = "Uri_parseIPv6Address_error";
  if (!"name" in Uri_parseIPv6Address_error)
    Uri_parseIPv6Address_error.name = "Uri_parseIPv6Address_error";
  $desc = $collectedClasses.Uri_parseIPv6Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_error.prototype = $desc;
  function Uri_parseIPv6Address_parseHex(host_0, error_1) {
    this.host_0 = host_0;
    this.error_1 = error_1;
  }
  Uri_parseIPv6Address_parseHex.builtin$cls = "Uri_parseIPv6Address_parseHex";
  if (!"name" in Uri_parseIPv6Address_parseHex)
    Uri_parseIPv6Address_parseHex.name = "Uri_parseIPv6Address_parseHex";
  $desc = $collectedClasses.Uri_parseIPv6Address_parseHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_parseHex.prototype = $desc;
  function Uri_parseIPv6Address_closure(parts_2) {
    this.parts_2 = parts_2;
  }
  Uri_parseIPv6Address_closure.builtin$cls = "Uri_parseIPv6Address_closure";
  if (!"name" in Uri_parseIPv6Address_closure)
    Uri_parseIPv6Address_closure.name = "Uri_parseIPv6Address_closure";
  $desc = $collectedClasses.Uri_parseIPv6Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_closure.prototype = $desc;
  function Uri__uriEncode_byteToHex() {
  }
  Uri__uriEncode_byteToHex.builtin$cls = "Uri__uriEncode_byteToHex";
  if (!"name" in Uri__uriEncode_byteToHex)
    Uri__uriEncode_byteToHex.name = "Uri__uriEncode_byteToHex";
  $desc = $collectedClasses.Uri__uriEncode_byteToHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__uriEncode_byteToHex.prototype = $desc;
  function Console() {
  }
  Console.builtin$cls = "Console";
  if (!"name" in Console)
    Console.name = "Console";
  $desc = $collectedClasses.Console;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Console.prototype = $desc;
  function Interceptor_CssStyleDeclarationBase() {
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  function CssStyleDeclarationBase() {
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclarationBase.prototype = $desc;
  function _ChildrenElementList(_html$_element, _childElements) {
    this._html$_element = _html$_element;
    this._childElements = _childElements;
  }
  _ChildrenElementList.builtin$cls = "_ChildrenElementList";
  if (!"name" in _ChildrenElementList)
    _ChildrenElementList.name = "_ChildrenElementList";
  $desc = $collectedClasses._ChildrenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildrenElementList.prototype = $desc;
  function _FrozenElementList(_nodeList, _elementList) {
    this._nodeList = _nodeList;
    this._elementList = _elementList;
  }
  _FrozenElementList.builtin$cls = "_FrozenElementList";
  if (!"name" in _FrozenElementList)
    _FrozenElementList.name = "_FrozenElementList";
  $desc = $collectedClasses._FrozenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList.prototype = $desc;
  function _FrozenElementList$_wrap_closure() {
  }
  _FrozenElementList$_wrap_closure.builtin$cls = "_FrozenElementList$_wrap_closure";
  if (!"name" in _FrozenElementList$_wrap_closure)
    _FrozenElementList$_wrap_closure.name = "_FrozenElementList$_wrap_closure";
  $desc = $collectedClasses._FrozenElementList$_wrap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList$_wrap_closure.prototype = $desc;
  function Element_Element$html_closure() {
  }
  Element_Element$html_closure.builtin$cls = "Element_Element$html_closure";
  if (!"name" in Element_Element$html_closure)
    Element_Element$html_closure.name = "Element_Element$html_closure";
  $desc = $collectedClasses.Element_Element$html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element_Element$html_closure.prototype = $desc;
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function _ChildNodeListLazy(_this) {
    this._this = _this;
  }
  _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
  if (!"name" in _ChildNodeListLazy)
    _ChildNodeListLazy.name = "_ChildNodeListLazy";
  $desc = $collectedClasses._ChildNodeListLazy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildNodeListLazy.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function Interceptor_ListMixin1() {
  }
  Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
  if (!"name" in Interceptor_ListMixin1)
    Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin1.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin1() {
  }
  Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin1)
    Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
  function _AttributeMap() {
  }
  _AttributeMap.builtin$cls = "_AttributeMap";
  if (!"name" in _AttributeMap)
    _AttributeMap.name = "_AttributeMap";
  $desc = $collectedClasses._AttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeMap.prototype = $desc;
  function _ElementAttributeMap(_html$_element) {
    this._html$_element = _html$_element;
  }
  _ElementAttributeMap.builtin$cls = "_ElementAttributeMap";
  if (!"name" in _ElementAttributeMap)
    _ElementAttributeMap.name = "_ElementAttributeMap";
  $desc = $collectedClasses._ElementAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementAttributeMap.prototype = $desc;
  function _MultiElementCssClassSet(_elementIterable, _elementCssClassSetIterable) {
    this._elementIterable = _elementIterable;
    this._elementCssClassSetIterable = _elementCssClassSetIterable;
  }
  _MultiElementCssClassSet.builtin$cls = "_MultiElementCssClassSet";
  if (!"name" in _MultiElementCssClassSet)
    _MultiElementCssClassSet.name = "_MultiElementCssClassSet";
  $desc = $collectedClasses._MultiElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet.prototype = $desc;
  function _MultiElementCssClassSet_closure() {
  }
  _MultiElementCssClassSet_closure.builtin$cls = "_MultiElementCssClassSet_closure";
  if (!"name" in _MultiElementCssClassSet_closure)
    _MultiElementCssClassSet_closure.name = "_MultiElementCssClassSet_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_closure.prototype = $desc;
  function _MultiElementCssClassSet_readClasses_closure(s_0) {
    this.s_0 = s_0;
  }
  _MultiElementCssClassSet_readClasses_closure.builtin$cls = "_MultiElementCssClassSet_readClasses_closure";
  if (!"name" in _MultiElementCssClassSet_readClasses_closure)
    _MultiElementCssClassSet_readClasses_closure.name = "_MultiElementCssClassSet_readClasses_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_readClasses_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_readClasses_closure.prototype = $desc;
  function _MultiElementCssClassSet_modify_closure(f_0) {
    this.f_0 = f_0;
  }
  _MultiElementCssClassSet_modify_closure.builtin$cls = "_MultiElementCssClassSet_modify_closure";
  if (!"name" in _MultiElementCssClassSet_modify_closure)
    _MultiElementCssClassSet_modify_closure.name = "_MultiElementCssClassSet_modify_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_modify_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_modify_closure.prototype = $desc;
  function _ElementCssClassSet(_html$_element) {
    this._html$_element = _html$_element;
  }
  _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
  if (!"name" in _ElementCssClassSet)
    _ElementCssClassSet.name = "_ElementCssClassSet";
  $desc = $collectedClasses._ElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementCssClassSet.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function _EventStream(_html$_target, _eventType, _useCapture) {
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_html$_target, _eventType, _useCapture) {
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _ElementListEventStreamImpl(_targetList, _useCapture, _eventType) {
    this._targetList = _targetList;
    this._useCapture = _useCapture;
    this._eventType = _eventType;
  }
  _ElementListEventStreamImpl.builtin$cls = "_ElementListEventStreamImpl";
  if (!"name" in _ElementListEventStreamImpl)
    _ElementListEventStreamImpl.name = "_ElementListEventStreamImpl";
  $desc = $collectedClasses._ElementListEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _html$_target, _eventType, _html$_onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._html$_onData = _html$_onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function _StreamPool(_html$_controller, _subscriptions) {
    this._html$_controller = _html$_controller;
    this._subscriptions = _subscriptions;
  }
  _StreamPool.builtin$cls = "_StreamPool";
  if (!"name" in _StreamPool)
    _StreamPool.name = "_StreamPool";
  $desc = $collectedClasses._StreamPool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool.prototype = $desc;
  function _StreamPool_add_closure(this_0, stream_1) {
    this.this_0 = this_0;
    this.stream_1 = stream_1;
  }
  _StreamPool_add_closure.builtin$cls = "_StreamPool_add_closure";
  if (!"name" in _StreamPool_add_closure)
    _StreamPool_add_closure.name = "_StreamPool_add_closure";
  $desc = $collectedClasses._StreamPool_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool_add_closure.prototype = $desc;
  function _Html5NodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _Html5NodeValidator.builtin$cls = "_Html5NodeValidator";
  if (!"name" in _Html5NodeValidator)
    _Html5NodeValidator.name = "_Html5NodeValidator";
  $desc = $collectedClasses._Html5NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Html5NodeValidator.prototype = $desc;
  _Html5NodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function NodeValidatorBuilder(_validators) {
    this._validators = _validators;
  }
  NodeValidatorBuilder.builtin$cls = "NodeValidatorBuilder";
  if (!"name" in NodeValidatorBuilder)
    NodeValidatorBuilder.name = "NodeValidatorBuilder";
  $desc = $collectedClasses.NodeValidatorBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder.prototype = $desc;
  function NodeValidatorBuilder_allowsElement_closure(element_0) {
    this.element_0 = element_0;
  }
  NodeValidatorBuilder_allowsElement_closure.builtin$cls = "NodeValidatorBuilder_allowsElement_closure";
  if (!"name" in NodeValidatorBuilder_allowsElement_closure)
    NodeValidatorBuilder_allowsElement_closure.name = "NodeValidatorBuilder_allowsElement_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsElement_closure.prototype = $desc;
  function NodeValidatorBuilder_allowsAttribute_closure(element_0, attributeName_1, value_2) {
    this.element_0 = element_0;
    this.attributeName_1 = attributeName_1;
    this.value_2 = value_2;
  }
  NodeValidatorBuilder_allowsAttribute_closure.builtin$cls = "NodeValidatorBuilder_allowsAttribute_closure";
  if (!"name" in NodeValidatorBuilder_allowsAttribute_closure)
    NodeValidatorBuilder_allowsAttribute_closure.name = "NodeValidatorBuilder_allowsAttribute_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsAttribute_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsAttribute_closure.prototype = $desc;
  function _SimpleNodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _SimpleNodeValidator.builtin$cls = "_SimpleNodeValidator";
  if (!"name" in _SimpleNodeValidator)
    _SimpleNodeValidator.name = "_SimpleNodeValidator";
  $desc = $collectedClasses._SimpleNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleNodeValidator.prototype = $desc;
  _SimpleNodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function _TemplatingNodeValidator(_templateAttrs, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this._templateAttrs = _templateAttrs;
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _TemplatingNodeValidator.builtin$cls = "_TemplatingNodeValidator";
  if (!"name" in _TemplatingNodeValidator)
    _TemplatingNodeValidator.name = "_TemplatingNodeValidator";
  $desc = $collectedClasses._TemplatingNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator.prototype = $desc;
  function _TemplatingNodeValidator_closure() {
  }
  _TemplatingNodeValidator_closure.builtin$cls = "_TemplatingNodeValidator_closure";
  if (!"name" in _TemplatingNodeValidator_closure)
    _TemplatingNodeValidator_closure.name = "_TemplatingNodeValidator_closure";
  $desc = $collectedClasses._TemplatingNodeValidator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator_closure.prototype = $desc;
  function _SvgNodeValidator() {
  }
  _SvgNodeValidator.builtin$cls = "_SvgNodeValidator";
  if (!"name" in _SvgNodeValidator)
    _SvgNodeValidator.name = "_SvgNodeValidator";
  $desc = $collectedClasses._SvgNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SvgNodeValidator.prototype = $desc;
  function FixedSizeListIterator(_array, _length, _position, _current) {
    this._array = _array;
    this._length = _length;
    this._position = _position;
    this._current = _current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function _LocationWrapper(_ptr) {
    this._ptr = _ptr;
  }
  _LocationWrapper.builtin$cls = "_LocationWrapper";
  if (!"name" in _LocationWrapper)
    _LocationWrapper.name = "_LocationWrapper";
  $desc = $collectedClasses._LocationWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocationWrapper.prototype = $desc;
  function NodeValidator() {
  }
  NodeValidator.builtin$cls = "NodeValidator";
  if (!"name" in NodeValidator)
    NodeValidator.name = "NodeValidator";
  $desc = $collectedClasses.NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidator.prototype = $desc;
  function _SameOriginUriPolicy(_hiddenAnchor, _loc) {
    this._hiddenAnchor = _hiddenAnchor;
    this._loc = _loc;
  }
  _SameOriginUriPolicy.builtin$cls = "_SameOriginUriPolicy";
  if (!"name" in _SameOriginUriPolicy)
    _SameOriginUriPolicy.name = "_SameOriginUriPolicy";
  $desc = $collectedClasses._SameOriginUriPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SameOriginUriPolicy.prototype = $desc;
  function _ValidatingTreeSanitizer(validator) {
    this.validator = validator;
  }
  _ValidatingTreeSanitizer.builtin$cls = "_ValidatingTreeSanitizer";
  if (!"name" in _ValidatingTreeSanitizer)
    _ValidatingTreeSanitizer.name = "_ValidatingTreeSanitizer";
  $desc = $collectedClasses._ValidatingTreeSanitizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer.prototype = $desc;
  function _ValidatingTreeSanitizer_sanitizeTree_walk(this_0) {
    this.this_0 = this_0;
  }
  _ValidatingTreeSanitizer_sanitizeTree_walk.builtin$cls = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  if (!"name" in _ValidatingTreeSanitizer_sanitizeTree_walk)
    _ValidatingTreeSanitizer_sanitizeTree_walk.name = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  $desc = $collectedClasses._ValidatingTreeSanitizer_sanitizeTree_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer_sanitizeTree_walk.prototype = $desc;
  function _AttributeClassSet(_svg$_element) {
    this._svg$_element = _svg$_element;
  }
  _AttributeClassSet.builtin$cls = "_AttributeClassSet";
  if (!"name" in _AttributeClassSet)
    _AttributeClassSet.name = "_AttributeClassSet";
  $desc = $collectedClasses._AttributeClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeClassSet.prototype = $desc;
  function _Random() {
  }
  _Random.builtin$cls = "_Random";
  if (!"name" in _Random)
    _Random.name = "_Random";
  $desc = $collectedClasses._Random;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Random.prototype = $desc;
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  Point.builtin$cls = "Point";
  if (!"name" in Point)
    Point.name = "Point";
  $desc = $collectedClasses.Point;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point.prototype = $desc;
  Point.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point.prototype.get$y = function(receiver) {
    return this.y;
  };
  function _RectangleBase() {
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RectangleBase.prototype = $desc;
  function Rectangle(left) {
    this.left = left;
  }
  Rectangle.builtin$cls = "Rectangle";
  if (!"name" in Rectangle)
    Rectangle.name = "Rectangle";
  $desc = $collectedClasses.Rectangle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rectangle.prototype = $desc;
  Rectangle.prototype.get$left = function(receiver) {
    return this.left;
  };
  function Mirror() {
  }
  Mirror.builtin$cls = "Mirror";
  if (!"name" in Mirror)
    Mirror.name = "Mirror";
  $desc = $collectedClasses.Mirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mirror.prototype = $desc;
  function DeclarationMirror() {
  }
  DeclarationMirror.builtin$cls = "DeclarationMirror";
  if (!"name" in DeclarationMirror)
    DeclarationMirror.name = "DeclarationMirror";
  $desc = $collectedClasses.DeclarationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeclarationMirror.prototype = $desc;
  function LibraryMirror() {
  }
  LibraryMirror.builtin$cls = "LibraryMirror";
  if (!"name" in LibraryMirror)
    LibraryMirror.name = "LibraryMirror";
  $desc = $collectedClasses.LibraryMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LibraryMirror.prototype = $desc;
  function TypeMirror() {
  }
  TypeMirror.builtin$cls = "TypeMirror";
  if (!"name" in TypeMirror)
    TypeMirror.name = "TypeMirror";
  $desc = $collectedClasses.TypeMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeMirror.prototype = $desc;
  function ClassMirror() {
  }
  ClassMirror.builtin$cls = "ClassMirror";
  if (!"name" in ClassMirror)
    ClassMirror.name = "ClassMirror";
  $desc = $collectedClasses.ClassMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassMirror.prototype = $desc;
  function TypeVariableMirror() {
  }
  TypeVariableMirror.builtin$cls = "TypeVariableMirror";
  if (!"name" in TypeVariableMirror)
    TypeVariableMirror.name = "TypeVariableMirror";
  $desc = $collectedClasses.TypeVariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeVariableMirror.prototype = $desc;
  function MethodMirror() {
  }
  MethodMirror.builtin$cls = "MethodMirror";
  if (!"name" in MethodMirror)
    MethodMirror.name = "MethodMirror";
  $desc = $collectedClasses.MethodMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MethodMirror.prototype = $desc;
  function VariableMirror() {
  }
  VariableMirror.builtin$cls = "VariableMirror";
  if (!"name" in VariableMirror)
    VariableMirror.name = "VariableMirror";
  $desc = $collectedClasses.VariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VariableMirror.prototype = $desc;
  function TypedData_ListMixin() {
  }
  TypedData_ListMixin.builtin$cls = "TypedData_ListMixin";
  if (!"name" in TypedData_ListMixin)
    TypedData_ListMixin.name = "TypedData_ListMixin";
  $desc = $collectedClasses.TypedData_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin() {
  }
  TypedData_ListMixin_FixedLengthListMixin.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin)
    TypedData_ListMixin_FixedLengthListMixin.name = "TypedData_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin.prototype = $desc;
  function TypedData_ListMixin0() {
  }
  TypedData_ListMixin0.builtin$cls = "TypedData_ListMixin0";
  if (!"name" in TypedData_ListMixin0)
    TypedData_ListMixin0.name = "TypedData_ListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin0.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin0() {
  }
  TypedData_ListMixin_FixedLengthListMixin0.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin0";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin0)
    TypedData_ListMixin_FixedLengthListMixin0.name = "TypedData_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function TypedData_ListMixin1() {
  }
  TypedData_ListMixin1.builtin$cls = "TypedData_ListMixin1";
  if (!"name" in TypedData_ListMixin1)
    TypedData_ListMixin1.name = "TypedData_ListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin1.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin1() {
  }
  TypedData_ListMixin_FixedLengthListMixin1.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin1";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin1)
    TypedData_ListMixin_FixedLengthListMixin1.name = "TypedData_ListMixin_FixedLengthListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin1.prototype = $desc;
  function TypedData_ListMixin2() {
  }
  TypedData_ListMixin2.builtin$cls = "TypedData_ListMixin2";
  if (!"name" in TypedData_ListMixin2)
    TypedData_ListMixin2.name = "TypedData_ListMixin2";
  $desc = $collectedClasses.TypedData_ListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin2.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin2() {
  }
  TypedData_ListMixin_FixedLengthListMixin2.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin2";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin2)
    TypedData_ListMixin_FixedLengthListMixin2.name = "TypedData_ListMixin_FixedLengthListMixin2";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin2.prototype = $desc;
  function TypedData_ListMixin3() {
  }
  TypedData_ListMixin3.builtin$cls = "TypedData_ListMixin3";
  if (!"name" in TypedData_ListMixin3)
    TypedData_ListMixin3.name = "TypedData_ListMixin3";
  $desc = $collectedClasses.TypedData_ListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin3.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin3() {
  }
  TypedData_ListMixin_FixedLengthListMixin3.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin3";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin3)
    TypedData_ListMixin_FixedLengthListMixin3.name = "TypedData_ListMixin_FixedLengthListMixin3";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin3.prototype = $desc;
  function TypedData_ListMixin4() {
  }
  TypedData_ListMixin4.builtin$cls = "TypedData_ListMixin4";
  if (!"name" in TypedData_ListMixin4)
    TypedData_ListMixin4.name = "TypedData_ListMixin4";
  $desc = $collectedClasses.TypedData_ListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin4.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin4() {
  }
  TypedData_ListMixin_FixedLengthListMixin4.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin4";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin4)
    TypedData_ListMixin_FixedLengthListMixin4.name = "TypedData_ListMixin_FixedLengthListMixin4";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin4.prototype = $desc;
  function TypedData_ListMixin5() {
  }
  TypedData_ListMixin5.builtin$cls = "TypedData_ListMixin5";
  if (!"name" in TypedData_ListMixin5)
    TypedData_ListMixin5.name = "TypedData_ListMixin5";
  $desc = $collectedClasses.TypedData_ListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin5.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin5() {
  }
  TypedData_ListMixin_FixedLengthListMixin5.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin5";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin5)
    TypedData_ListMixin_FixedLengthListMixin5.name = "TypedData_ListMixin_FixedLengthListMixin5";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin5.prototype = $desc;
  function TypedData_ListMixin6() {
  }
  TypedData_ListMixin6.builtin$cls = "TypedData_ListMixin6";
  if (!"name" in TypedData_ListMixin6)
    TypedData_ListMixin6.name = "TypedData_ListMixin6";
  $desc = $collectedClasses.TypedData_ListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin6.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin6() {
  }
  TypedData_ListMixin_FixedLengthListMixin6.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin6";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin6)
    TypedData_ListMixin_FixedLengthListMixin6.name = "TypedData_ListMixin_FixedLengthListMixin6";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin6.prototype = $desc;
  function TypedData_ListMixin7() {
  }
  TypedData_ListMixin7.builtin$cls = "TypedData_ListMixin7";
  if (!"name" in TypedData_ListMixin7)
    TypedData_ListMixin7.name = "TypedData_ListMixin7";
  $desc = $collectedClasses.TypedData_ListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin7.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin7() {
  }
  TypedData_ListMixin_FixedLengthListMixin7.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin7";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin7)
    TypedData_ListMixin_FixedLengthListMixin7.name = "TypedData_ListMixin_FixedLengthListMixin7";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin7.prototype = $desc;
  function Int64List() {
  }
  Int64List.builtin$cls = "Int64List";
  if (!"name" in Int64List)
    Int64List.name = "Int64List";
  $desc = $collectedClasses.Int64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int64List.prototype = $desc;
  function Uint64List() {
  }
  Uint64List.builtin$cls = "Uint64List";
  if (!"name" in Uint64List)
    Uint64List.name = "Uint64List";
  $desc = $collectedClasses.Uint64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint64List.prototype = $desc;
  function Frame(uri, line, column, member) {
    this.uri = uri;
    this.line = line;
    this.column = column;
    this.member = member;
  }
  Frame.builtin$cls = "Frame";
  if (!"name" in Frame)
    Frame.name = "Frame";
  $desc = $collectedClasses.Frame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Frame.prototype = $desc;
  Frame.prototype.get$uri = function() {
    return this.uri;
  };
  Frame.prototype.get$line = function() {
    return this.line;
  };
  Frame.prototype.get$column = function() {
    return this.column;
  };
  Frame.prototype.get$member = function() {
    return this.member;
  };
  function _convertDartToNative_PrepareForStructuredClone_findSlot(values_1, copies_2) {
    this.values_1 = values_1;
    this.copies_2 = copies_2;
  }
  _convertDartToNative_PrepareForStructuredClone_findSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_findSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_findSlot)
    _convertDartToNative_PrepareForStructuredClone_findSlot.name = "_convertDartToNative_PrepareForStructuredClone_findSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_findSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_readSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  _convertDartToNative_PrepareForStructuredClone_readSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_readSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_readSlot)
    _convertDartToNative_PrepareForStructuredClone_readSlot.name = "_convertDartToNative_PrepareForStructuredClone_readSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_readSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_writeSlot(copies_4) {
    this.copies_4 = copies_4;
  }
  _convertDartToNative_PrepareForStructuredClone_writeSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_writeSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_writeSlot)
    _convertDartToNative_PrepareForStructuredClone_writeSlot.name = "_convertDartToNative_PrepareForStructuredClone_writeSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_writeSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_cleanupSlots() {
  }
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_cleanupSlots";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_cleanupSlots)
    _convertDartToNative_PrepareForStructuredClone_cleanupSlots.name = "_convertDartToNative_PrepareForStructuredClone_cleanupSlots";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_cleanupSlots;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_walk(findSlot_5, readSlot_6, writeSlot_7) {
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  _convertDartToNative_PrepareForStructuredClone_walk.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_walk";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_walk)
    _convertDartToNative_PrepareForStructuredClone_walk.name = "_convertDartToNative_PrepareForStructuredClone_walk";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_walk.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_walk_closure(box_0, walk_8) {
    this.box_0 = box_0;
    this.walk_8 = walk_8;
  }
  _convertDartToNative_PrepareForStructuredClone_walk_closure.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_walk_closure";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_walk_closure)
    _convertDartToNative_PrepareForStructuredClone_walk_closure.name = "_convertDartToNative_PrepareForStructuredClone_walk_closure";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_walk_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_walk_closure.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_findSlot(values_0, copies_1) {
    this.values_0 = values_0;
    this.copies_1 = copies_1;
  }
  convertNativeToDart_AcceptStructuredClone_findSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_findSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_findSlot)
    convertNativeToDart_AcceptStructuredClone_findSlot.name = "convertNativeToDart_AcceptStructuredClone_findSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_findSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_readSlot(copies_2) {
    this.copies_2 = copies_2;
  }
  convertNativeToDart_AcceptStructuredClone_readSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_readSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_readSlot)
    convertNativeToDart_AcceptStructuredClone_readSlot.name = "convertNativeToDart_AcceptStructuredClone_readSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_readSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_writeSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  convertNativeToDart_AcceptStructuredClone_writeSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_writeSlot)
    convertNativeToDart_AcceptStructuredClone_writeSlot.name = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_writeSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_walk(mustCopy_4, findSlot_5, readSlot_6, writeSlot_7) {
    this.mustCopy_4 = mustCopy_4;
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  convertNativeToDart_AcceptStructuredClone_walk.builtin$cls = "convertNativeToDart_AcceptStructuredClone_walk";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_walk)
    convertNativeToDart_AcceptStructuredClone_walk.name = "convertNativeToDart_AcceptStructuredClone_walk";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_walk.prototype = $desc;
  function CssClassSetImpl() {
  }
  CssClassSetImpl.builtin$cls = "CssClassSetImpl";
  if (!"name" in CssClassSetImpl)
    CssClassSetImpl.name = "CssClassSetImpl";
  $desc = $collectedClasses.CssClassSetImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl.prototype = $desc;
  function CssClassSetImpl_add_closure(value_0) {
    this.value_0 = value_0;
  }
  CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
  if (!"name" in CssClassSetImpl_add_closure)
    CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
  $desc = $collectedClasses.CssClassSetImpl_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_add_closure.prototype = $desc;
  function FilteredElementList(_node, _childNodes) {
    this._node = _node;
    this._childNodes = _childNodes;
  }
  FilteredElementList.builtin$cls = "FilteredElementList";
  if (!"name" in FilteredElementList)
    FilteredElementList.name = "FilteredElementList";
  $desc = $collectedClasses.FilteredElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList.prototype = $desc;
  function FilteredElementList__filtered_closure() {
  }
  FilteredElementList__filtered_closure.builtin$cls = "FilteredElementList__filtered_closure";
  if (!"name" in FilteredElementList__filtered_closure)
    FilteredElementList__filtered_closure.name = "FilteredElementList__filtered_closure";
  $desc = $collectedClasses.FilteredElementList__filtered_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList__filtered_closure.prototype = $desc;
  function FilteredElementList_removeRange_closure() {
  }
  FilteredElementList_removeRange_closure.builtin$cls = "FilteredElementList_removeRange_closure";
  if (!"name" in FilteredElementList_removeRange_closure)
    FilteredElementList_removeRange_closure.name = "FilteredElementList_removeRange_closure";
  $desc = $collectedClasses.FilteredElementList_removeRange_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList_removeRange_closure.prototype = $desc;
  function LazyTrace(_thunk, _inner) {
    this._thunk = _thunk;
    this._inner = _inner;
  }
  LazyTrace.builtin$cls = "LazyTrace";
  if (!"name" in LazyTrace)
    LazyTrace.name = "LazyTrace";
  $desc = $collectedClasses.LazyTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LazyTrace.prototype = $desc;
  function _IsNull() {
  }
  _IsNull.builtin$cls = "_IsNull";
  if (!"name" in _IsNull)
    _IsNull.name = "_IsNull";
  $desc = $collectedClasses._IsNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsNull.prototype = $desc;
  function _IsTrue() {
  }
  _IsTrue.builtin$cls = "_IsTrue";
  if (!"name" in _IsTrue)
    _IsTrue.name = "_IsTrue";
  $desc = $collectedClasses._IsTrue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsTrue.prototype = $desc;
  function _IsFalse() {
  }
  _IsFalse.builtin$cls = "_IsFalse";
  if (!"name" in _IsFalse)
    _IsFalse.name = "_IsFalse";
  $desc = $collectedClasses._IsFalse;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsFalse.prototype = $desc;
  function _IsSameAs(_expected) {
    this._expected = _expected;
  }
  _IsSameAs.builtin$cls = "_IsSameAs";
  if (!"name" in _IsSameAs)
    _IsSameAs.name = "_IsSameAs";
  $desc = $collectedClasses._IsSameAs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsSameAs.prototype = $desc;
  function _DeepMatcher(_expected, _limit, count) {
    this._expected = _expected;
    this._limit = _limit;
    this.count = count;
  }
  _DeepMatcher.builtin$cls = "_DeepMatcher";
  if (!"name" in _DeepMatcher)
    _DeepMatcher.name = "_DeepMatcher";
  $desc = $collectedClasses._DeepMatcher;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DeepMatcher.prototype = $desc;
  function BoundClosure$4(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$4.builtin$cls = "BoundClosure$4";
  $desc = $collectedClasses.BoundClosure$4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$4.prototype = $desc;
  function _StringEqualsMatcher(_matcher$_value) {
    this._matcher$_value = _matcher$_value;
  }
  _StringEqualsMatcher.builtin$cls = "_StringEqualsMatcher";
  if (!"name" in _StringEqualsMatcher)
    _StringEqualsMatcher.name = "_StringEqualsMatcher";
  $desc = $collectedClasses._StringEqualsMatcher;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StringEqualsMatcher.prototype = $desc;
  function isInstanceOf(_matcher$_name) {
    this._matcher$_name = _matcher$_name;
  }
  isInstanceOf.builtin$cls = "isInstanceOf";
  if (!"name" in isInstanceOf)
    isInstanceOf.name = "isInstanceOf";
  $desc = $collectedClasses.isInstanceOf;
  if ($desc instanceof Array)
    $desc = $desc[1];
  isInstanceOf.prototype = $desc;
  function Throws(_matcher) {
    this._matcher = _matcher;
  }
  Throws.builtin$cls = "Throws";
  if (!"name" in Throws)
    Throws.name = "Throws";
  $desc = $collectedClasses.Throws;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Throws.prototype = $desc;
  function Throws_matches_closure() {
  }
  Throws_matches_closure.builtin$cls = "Throws_matches_closure";
  if (!"name" in Throws_matches_closure)
    Throws_matches_closure.name = "Throws_matches_closure";
  $desc = $collectedClasses.Throws_matches_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Throws_matches_closure.prototype = $desc;
  function Throws_matches_closure0(done_0) {
    this.done_0 = done_0;
  }
  Throws_matches_closure0.builtin$cls = "Throws_matches_closure0";
  if (!"name" in Throws_matches_closure0)
    Throws_matches_closure0.name = "Throws_matches_closure0";
  $desc = $collectedClasses.Throws_matches_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Throws_matches_closure0.prototype = $desc;
  function Throws_matches__closure0(value_1) {
    this.value_1 = value_1;
  }
  Throws_matches__closure0.builtin$cls = "Throws_matches__closure0";
  if (!"name" in Throws_matches__closure0)
    Throws_matches__closure0.name = "Throws_matches__closure0";
  $desc = $collectedClasses.Throws_matches__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Throws_matches__closure0.prototype = $desc;
  function Throws_matches_closure1(this_2, done_3) {
    this.this_2 = this_2;
    this.done_3 = done_3;
  }
  Throws_matches_closure1.builtin$cls = "Throws_matches_closure1";
  if (!"name" in Throws_matches_closure1)
    Throws_matches_closure1.name = "Throws_matches_closure1";
  $desc = $collectedClasses.Throws_matches_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Throws_matches_closure1.prototype = $desc;
  function Throws_matches__closure(this_4, error_5, trace_6) {
    this.this_4 = this_4;
    this.error_5 = error_5;
    this.trace_6 = trace_6;
  }
  Throws_matches__closure.builtin$cls = "Throws_matches__closure";
  if (!"name" in Throws_matches__closure)
    Throws_matches__closure.name = "Throws_matches__closure";
  $desc = $collectedClasses.Throws_matches__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Throws_matches__closure.prototype = $desc;
  function _ReturnsNormally() {
  }
  _ReturnsNormally.builtin$cls = "_ReturnsNormally";
  if (!"name" in _ReturnsNormally)
    _ReturnsNormally.name = "_ReturnsNormally";
  $desc = $collectedClasses._ReturnsNormally;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ReturnsNormally.prototype = $desc;
  function TypeMatcher() {
  }
  TypeMatcher.builtin$cls = "TypeMatcher";
  if (!"name" in TypeMatcher)
    TypeMatcher.name = "TypeMatcher";
  $desc = $collectedClasses.TypeMatcher;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeMatcher.prototype = $desc;
  function _ArgumentError(_matcher$_name) {
    this._matcher$_name = _matcher$_name;
  }
  _ArgumentError.builtin$cls = "_ArgumentError";
  if (!"name" in _ArgumentError)
    _ArgumentError.name = "_ArgumentError";
  $desc = $collectedClasses._ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ArgumentError.prototype = $desc;
  function _UnsupportedError(_matcher$_name) {
    this._matcher$_name = _matcher$_name;
  }
  _UnsupportedError.builtin$cls = "_UnsupportedError";
  if (!"name" in _UnsupportedError)
    _UnsupportedError.name = "_UnsupportedError";
  $desc = $collectedClasses._UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UnsupportedError.prototype = $desc;
  function _Contains(_expected) {
    this._expected = _expected;
  }
  _Contains.builtin$cls = "_Contains";
  if (!"name" in _Contains)
    _Contains.name = "_Contains";
  $desc = $collectedClasses._Contains;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Contains.prototype = $desc;
  function _Contains_matches_closure(this_0, matchState_1) {
    this.this_0 = this_0;
    this.matchState_1 = matchState_1;
  }
  _Contains_matches_closure.builtin$cls = "_Contains_matches_closure";
  if (!"name" in _Contains_matches_closure)
    _Contains_matches_closure.name = "_Contains_matches_closure";
  $desc = $collectedClasses._Contains_matches_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Contains_matches_closure.prototype = $desc;
  function _Predicate(_matcher, _description) {
    this._matcher = _matcher;
    this._description = _description;
  }
  _Predicate.builtin$cls = "_Predicate";
  if (!"name" in _Predicate)
    _Predicate.name = "_Predicate";
  $desc = $collectedClasses._Predicate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Predicate.prototype = $desc;
  function StringDescription(_out) {
    this._out = _out;
  }
  StringDescription.builtin$cls = "StringDescription";
  if (!"name" in StringDescription)
    StringDescription.name = "StringDescription";
  $desc = $collectedClasses.StringDescription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringDescription.prototype = $desc;
  function TestFailure(message) {
    this.message = message;
  }
  TestFailure.builtin$cls = "TestFailure";
  if (!"name" in TestFailure)
    TestFailure.name = "TestFailure";
  $desc = $collectedClasses.TestFailure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestFailure.prototype = $desc;
  TestFailure.prototype.get$message = function(receiver) {
    return this.message;
  };
  function closure() {
  }
  closure.builtin$cls = "closure";
  if (!"name" in closure)
    closure.name = "closure";
  $desc = $collectedClasses.closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure.prototype = $desc;
  function DefaultFailureHandler() {
  }
  DefaultFailureHandler.builtin$cls = "DefaultFailureHandler";
  if (!"name" in DefaultFailureHandler)
    DefaultFailureHandler.name = "DefaultFailureHandler";
  $desc = $collectedClasses.DefaultFailureHandler;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefaultFailureHandler.prototype = $desc;
  function Description() {
  }
  Description.builtin$cls = "Description";
  if (!"name" in Description)
    Description.name = "Description";
  $desc = $collectedClasses.Description;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Description.prototype = $desc;
  function Matcher() {
  }
  Matcher.builtin$cls = "Matcher";
  if (!"name" in Matcher)
    Matcher.name = "Matcher";
  $desc = $collectedClasses.Matcher;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matcher.prototype = $desc;
  function _EveryElement(_matcher) {
    this._matcher = _matcher;
  }
  _EveryElement.builtin$cls = "_EveryElement";
  if (!"name" in _EveryElement)
    _EveryElement.name = "_EveryElement";
  $desc = $collectedClasses._EveryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EveryElement.prototype = $desc;
  function _OrderedEquals(_expected, _matcher) {
    this._expected = _expected;
    this._matcher = _matcher;
  }
  _OrderedEquals.builtin$cls = "_OrderedEquals";
  if (!"name" in _OrderedEquals)
    _OrderedEquals.name = "_OrderedEquals";
  $desc = $collectedClasses._OrderedEquals;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _OrderedEquals.prototype = $desc;
  function _UnorderedEquals(_expected) {
    this._expected = _expected;
  }
  _UnorderedEquals.builtin$cls = "_UnorderedEquals";
  if (!"name" in _UnorderedEquals)
    _UnorderedEquals.name = "_UnorderedEquals";
  $desc = $collectedClasses._UnorderedEquals;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UnorderedEquals.prototype = $desc;
  function _IterableMatcher() {
  }
  _IterableMatcher.builtin$cls = "_IterableMatcher";
  if (!"name" in _IterableMatcher)
    _IterableMatcher.name = "_IterableMatcher";
  $desc = $collectedClasses._IterableMatcher;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IterableMatcher.prototype = $desc;
  function _OrderingComparison(_matcher$_value, _equalValue, _lessThanValue, _greaterThanValue, _comparisonDescription, _valueInDescription) {
    this._matcher$_value = _matcher$_value;
    this._equalValue = _equalValue;
    this._lessThanValue = _lessThanValue;
    this._greaterThanValue = _greaterThanValue;
    this._comparisonDescription = _comparisonDescription;
    this._valueInDescription = _valueInDescription;
  }
  _OrderingComparison.builtin$cls = "_OrderingComparison";
  if (!"name" in _OrderingComparison)
    _OrderingComparison.name = "_OrderingComparison";
  $desc = $collectedClasses._OrderingComparison;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _OrderingComparison.prototype = $desc;
  function _IsCloseTo(_matcher$_value, _delta) {
    this._matcher$_value = _matcher$_value;
    this._delta = _delta;
  }
  _IsCloseTo.builtin$cls = "_IsCloseTo";
  if (!"name" in _IsCloseTo)
    _IsCloseTo.name = "_IsCloseTo";
  $desc = $collectedClasses._IsCloseTo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsCloseTo.prototype = $desc;
  function _IsNot(_matcher) {
    this._matcher = _matcher;
  }
  _IsNot.builtin$cls = "_IsNot";
  if (!"name" in _IsNot)
    _IsNot.name = "_IsNot";
  $desc = $collectedClasses._IsNot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsNot.prototype = $desc;
  function _validateArgList_closure() {
  }
  _validateArgList_closure.builtin$cls = "_validateArgList_closure";
  if (!"name" in _validateArgList_closure)
    _validateArgList_closure.name = "_validateArgList_closure";
  $desc = $collectedClasses._validateArgList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _validateArgList_closure.prototype = $desc;
  function Builder(style, root) {
    this.style = style;
    this.root = root;
  }
  Builder.builtin$cls = "Builder";
  if (!"name" in Builder)
    Builder.name = "Builder";
  $desc = $collectedClasses.Builder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Builder.prototype = $desc;
  function Builder_join_closure() {
  }
  Builder_join_closure.builtin$cls = "Builder_join_closure";
  if (!"name" in Builder_join_closure)
    Builder_join_closure.name = "Builder_join_closure";
  $desc = $collectedClasses.Builder_join_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Builder_join_closure.prototype = $desc;
  function Builder_joinAll_closure() {
  }
  Builder_joinAll_closure.builtin$cls = "Builder_joinAll_closure";
  if (!"name" in Builder_joinAll_closure)
    Builder_joinAll_closure.name = "Builder_joinAll_closure";
  $desc = $collectedClasses.Builder_joinAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Builder_joinAll_closure.prototype = $desc;
  function Builder_split_closure() {
  }
  Builder_split_closure.builtin$cls = "Builder_split_closure";
  if (!"name" in Builder_split_closure)
    Builder_split_closure.name = "Builder_split_closure";
  $desc = $collectedClasses.Builder_split_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Builder_split_closure.prototype = $desc;
  function Style(relativeRootPattern) {
    this.relativeRootPattern = relativeRootPattern;
  }
  Style.builtin$cls = "Style";
  if (!"name" in Style)
    Style.name = "Style";
  $desc = $collectedClasses.Style;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Style.prototype = $desc;
  Style.prototype.get$relativeRootPattern = function() {
    return this.relativeRootPattern;
  };
  function _PosixStyle(name, separator, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern) {
    this.name = name;
    this.separator = separator;
    this.separatorPattern = separatorPattern;
    this.needsSeparatorPattern = needsSeparatorPattern;
    this.rootPattern = rootPattern;
    this.relativeRootPattern = relativeRootPattern;
  }
  _PosixStyle.builtin$cls = "_PosixStyle";
  if (!"name" in _PosixStyle)
    _PosixStyle.name = "_PosixStyle";
  $desc = $collectedClasses._PosixStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PosixStyle.prototype = $desc;
  _PosixStyle.prototype.get$name = function(receiver) {
    return this.name;
  };
  _PosixStyle.prototype.get$separator = function() {
    return this.separator;
  };
  _PosixStyle.prototype.get$separatorPattern = function() {
    return this.separatorPattern;
  };
  _PosixStyle.prototype.get$needsSeparatorPattern = function() {
    return this.needsSeparatorPattern;
  };
  _PosixStyle.prototype.get$rootPattern = function() {
    return this.rootPattern;
  };
  function _WindowsStyle(name, separator, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern) {
    this.name = name;
    this.separator = separator;
    this.separatorPattern = separatorPattern;
    this.needsSeparatorPattern = needsSeparatorPattern;
    this.rootPattern = rootPattern;
    this.relativeRootPattern = relativeRootPattern;
  }
  _WindowsStyle.builtin$cls = "_WindowsStyle";
  if (!"name" in _WindowsStyle)
    _WindowsStyle.name = "_WindowsStyle";
  $desc = $collectedClasses._WindowsStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WindowsStyle.prototype = $desc;
  _WindowsStyle.prototype.get$name = function(receiver) {
    return this.name;
  };
  _WindowsStyle.prototype.get$separator = function() {
    return this.separator;
  };
  _WindowsStyle.prototype.get$separatorPattern = function() {
    return this.separatorPattern;
  };
  _WindowsStyle.prototype.get$needsSeparatorPattern = function() {
    return this.needsSeparatorPattern;
  };
  _WindowsStyle.prototype.get$rootPattern = function() {
    return this.rootPattern;
  };
  function _UrlStyle(name, separator, separatorPattern, needsSeparatorPattern, rootPattern, path$_UrlStyle$relativeRootPattern, relativeRootPattern) {
    this.name = name;
    this.separator = separator;
    this.separatorPattern = separatorPattern;
    this.needsSeparatorPattern = needsSeparatorPattern;
    this.rootPattern = rootPattern;
    this.path$_UrlStyle$relativeRootPattern = path$_UrlStyle$relativeRootPattern;
    this.relativeRootPattern = relativeRootPattern;
  }
  _UrlStyle.builtin$cls = "_UrlStyle";
  if (!"name" in _UrlStyle)
    _UrlStyle.name = "_UrlStyle";
  $desc = $collectedClasses._UrlStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UrlStyle.prototype = $desc;
  _UrlStyle.prototype.get$name = function(receiver) {
    return this.name;
  };
  _UrlStyle.prototype.get$separator = function() {
    return this.separator;
  };
  _UrlStyle.prototype.get$separatorPattern = function() {
    return this.separatorPattern;
  };
  _UrlStyle.prototype.get$needsSeparatorPattern = function() {
    return this.needsSeparatorPattern;
  };
  _UrlStyle.prototype.get$rootPattern = function() {
    return this.rootPattern;
  };
  _UrlStyle.prototype.get$relativeRootPattern = function() {
    return this.path$_UrlStyle$relativeRootPattern;
  };
  function _ParsedPath(style, root, isRootRelative, parts, separators) {
    this.style = style;
    this.root = root;
    this.isRootRelative = isRootRelative;
    this.parts = parts;
    this.separators = separators;
  }
  _ParsedPath.builtin$cls = "_ParsedPath";
  if (!"name" in _ParsedPath)
    _ParsedPath.name = "_ParsedPath";
  $desc = $collectedClasses._ParsedPath;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ParsedPath.prototype = $desc;
  function _ParsedPath_normalize_closure(this_0) {
    this.this_0 = this_0;
  }
  _ParsedPath_normalize_closure.builtin$cls = "_ParsedPath_normalize_closure";
  if (!"name" in _ParsedPath_normalize_closure)
    _ParsedPath_normalize_closure.name = "_ParsedPath_normalize_closure";
  $desc = $collectedClasses._ParsedPath_normalize_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ParsedPath_normalize_closure.prototype = $desc;
  function prettyPrint__prettyPrint(maxLineLength_1, maxItems_2) {
    this.maxLineLength_1 = maxLineLength_1;
    this.maxItems_2 = maxItems_2;
  }
  prettyPrint__prettyPrint.builtin$cls = "prettyPrint__prettyPrint";
  if (!"name" in prettyPrint__prettyPrint)
    prettyPrint__prettyPrint.name = "prettyPrint__prettyPrint";
  $desc = $collectedClasses.prettyPrint__prettyPrint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  prettyPrint__prettyPrint.prototype = $desc;
  function prettyPrint__prettyPrint_pp(box_0, _prettyPrint_3, indent_4) {
    this.box_0 = box_0;
    this._prettyPrint_3 = _prettyPrint_3;
    this.indent_4 = indent_4;
  }
  prettyPrint__prettyPrint_pp.builtin$cls = "prettyPrint__prettyPrint_pp";
  if (!"name" in prettyPrint__prettyPrint_pp)
    prettyPrint__prettyPrint_pp.name = "prettyPrint__prettyPrint_pp";
  $desc = $collectedClasses.prettyPrint__prettyPrint_pp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  prettyPrint__prettyPrint_pp.prototype = $desc;
  function prettyPrint__prettyPrint_closure(indent_5) {
    this.indent_5 = indent_5;
  }
  prettyPrint__prettyPrint_closure.builtin$cls = "prettyPrint__prettyPrint_closure";
  if (!"name" in prettyPrint__prettyPrint_closure)
    prettyPrint__prettyPrint_closure.name = "prettyPrint__prettyPrint_closure";
  $desc = $collectedClasses.prettyPrint__prettyPrint_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  prettyPrint__prettyPrint_closure.prototype = $desc;
  function prettyPrint__prettyPrint_closure0(object_6, pp_7) {
    this.object_6 = object_6;
    this.pp_7 = pp_7;
  }
  prettyPrint__prettyPrint_closure0.builtin$cls = "prettyPrint__prettyPrint_closure0";
  if (!"name" in prettyPrint__prettyPrint_closure0)
    prettyPrint__prettyPrint_closure0.name = "prettyPrint__prettyPrint_closure0";
  $desc = $collectedClasses.prettyPrint__prettyPrint_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  prettyPrint__prettyPrint_closure0.prototype = $desc;
  function prettyPrint__prettyPrint_closure1(indent_8) {
    this.indent_8 = indent_8;
  }
  prettyPrint__prettyPrint_closure1.builtin$cls = "prettyPrint__prettyPrint_closure1";
  if (!"name" in prettyPrint__prettyPrint_closure1)
    prettyPrint__prettyPrint_closure1.name = "prettyPrint__prettyPrint_closure1";
  $desc = $collectedClasses.prettyPrint__prettyPrint_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  prettyPrint__prettyPrint_closure1.prototype = $desc;
  function main_closure1() {
  }
  main_closure1.builtin$cls = "main_closure1";
  if (!"name" in main_closure1)
    main_closure1.name = "main_closure1";
  $desc = $collectedClasses.main_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure1.prototype = $desc;
  function main_closure2() {
  }
  main_closure2.builtin$cls = "main_closure2";
  if (!"name" in main_closure2)
    main_closure2.name = "main_closure2";
  $desc = $collectedClasses.main_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure2.prototype = $desc;
  function main__closure10() {
  }
  main__closure10.builtin$cls = "main__closure10";
  if (!"name" in main__closure10)
    main__closure10.name = "main__closure10";
  $desc = $collectedClasses.main__closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure10.prototype = $desc;
  function main_closure3() {
  }
  main_closure3.builtin$cls = "main_closure3";
  if (!"name" in main_closure3)
    main_closure3.name = "main_closure3";
  $desc = $collectedClasses.main_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure3.prototype = $desc;
  function main_closure4() {
  }
  main_closure4.builtin$cls = "main_closure4";
  if (!"name" in main_closure4)
    main_closure4.name = "main_closure4";
  $desc = $collectedClasses.main_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure4.prototype = $desc;
  function _testSilly_closure() {
  }
  _testSilly_closure.builtin$cls = "_testSilly_closure";
  if (!"name" in _testSilly_closure)
    _testSilly_closure.name = "_testSilly_closure";
  $desc = $collectedClasses._testSilly_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _testSilly_closure.prototype = $desc;
  function _returnSilly_closure(finalVal_0) {
    this.finalVal_0 = finalVal_0;
  }
  _returnSilly_closure.builtin$cls = "_returnSilly_closure";
  if (!"name" in _returnSilly_closure)
    _returnSilly_closure.name = "_returnSilly_closure";
  $desc = $collectedClasses._returnSilly_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _returnSilly_closure.prototype = $desc;
  function _returnSilly_closure0(values_1, finalVal_2, doThrow_3) {
    this.values_1 = values_1;
    this.finalVal_2 = finalVal_2;
    this.doThrow_3 = doThrow_3;
  }
  _returnSilly_closure0.builtin$cls = "_returnSilly_closure0";
  if (!"name" in _returnSilly_closure0)
    _returnSilly_closure0.name = "_returnSilly_closure0";
  $desc = $collectedClasses._returnSilly_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _returnSilly_closure0.prototype = $desc;
  function _drTest_closure(input_0, expectedOutput_1, expectThrow_2) {
    this.input_0 = input_0;
    this.expectedOutput_1 = expectedOutput_1;
    this.expectThrow_2 = expectThrow_2;
  }
  _drTest_closure.builtin$cls = "_drTest_closure";
  if (!"name" in _drTest_closure)
    _drTest_closure.name = "_drTest_closure";
  $desc = $collectedClasses._drTest_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _drTest_closure.prototype = $desc;
  function main_closure5() {
  }
  main_closure5.builtin$cls = "main_closure5";
  if (!"name" in main_closure5)
    main_closure5.name = "main_closure5";
  $desc = $collectedClasses.main_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure5.prototype = $desc;
  function main__closure16() {
  }
  main__closure16.builtin$cls = "main__closure16";
  if (!"name" in main__closure16)
    main__closure16.name = "main__closure16";
  $desc = $collectedClasses.main__closure16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure16.prototype = $desc;
  function main___closure17() {
  }
  main___closure17.builtin$cls = "main___closure17";
  if (!"name" in main___closure17)
    main___closure17.name = "main___closure17";
  $desc = $collectedClasses.main___closure17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure17.prototype = $desc;
  function main_closure6() {
  }
  main_closure6.builtin$cls = "main_closure6";
  if (!"name" in main_closure6)
    main_closure6.name = "main_closure6";
  $desc = $collectedClasses.main_closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure6.prototype = $desc;
  function main__closure11() {
  }
  main__closure11.builtin$cls = "main__closure11";
  if (!"name" in main__closure11)
    main__closure11.name = "main__closure11";
  $desc = $collectedClasses.main__closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure11.prototype = $desc;
  function main___closure14() {
  }
  main___closure14.builtin$cls = "main___closure14";
  if (!"name" in main___closure14)
    main___closure14.name = "main___closure14";
  $desc = $collectedClasses.main___closure14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure14.prototype = $desc;
  function main___closure15(box_0, items_5) {
    this.box_0 = box_0;
    this.items_5 = items_5;
  }
  main___closure15.builtin$cls = "main___closure15";
  if (!"name" in main___closure15)
    main___closure15.name = "main___closure15";
  $desc = $collectedClasses.main___closure15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure15.prototype = $desc;
  function main___closure16(box_0, items_6) {
    this.box_0 = box_0;
    this.items_6 = items_6;
  }
  main___closure16.builtin$cls = "main___closure16";
  if (!"name" in main___closure16)
    main___closure16.name = "main___closure16";
  $desc = $collectedClasses.main___closure16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure16.prototype = $desc;
  function main__closure12() {
  }
  main__closure12.builtin$cls = "main__closure12";
  if (!"name" in main__closure12)
    main__closure12.name = "main__closure12";
  $desc = $collectedClasses.main__closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure12.prototype = $desc;
  function main___closure11() {
  }
  main___closure11.builtin$cls = "main___closure11";
  if (!"name" in main___closure11)
    main___closure11.name = "main___closure11";
  $desc = $collectedClasses.main___closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure11.prototype = $desc;
  function main___closure12(box_1, items_7) {
    this.box_1 = box_1;
    this.items_7 = items_7;
  }
  main___closure12.builtin$cls = "main___closure12";
  if (!"name" in main___closure12)
    main___closure12.name = "main___closure12";
  $desc = $collectedClasses.main___closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure12.prototype = $desc;
  function main___closure13(box_1, items_8) {
    this.box_1 = box_1;
    this.items_8 = items_8;
  }
  main___closure13.builtin$cls = "main___closure13";
  if (!"name" in main___closure13)
    main___closure13.name = "main___closure13";
  $desc = $collectedClasses.main___closure13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure13.prototype = $desc;
  function main__closure13() {
  }
  main__closure13.builtin$cls = "main__closure13";
  if (!"name" in main__closure13)
    main__closure13.name = "main__closure13";
  $desc = $collectedClasses.main__closure13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure13.prototype = $desc;
  function main___closure7(box_2) {
    this.box_2 = box_2;
  }
  main___closure7.builtin$cls = "main___closure7";
  if (!"name" in main___closure7)
    main___closure7.name = "main___closure7";
  $desc = $collectedClasses.main___closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure7.prototype = $desc;
  function main___closure8(box_2, controller_9) {
    this.box_2 = box_2;
    this.controller_9 = controller_9;
  }
  main___closure8.builtin$cls = "main___closure8";
  if (!"name" in main___closure8)
    main___closure8.name = "main___closure8";
  $desc = $collectedClasses.main___closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure8.prototype = $desc;
  function main___closure9(box_2) {
    this.box_2 = box_2;
  }
  main___closure9.builtin$cls = "main___closure9";
  if (!"name" in main___closure9)
    main___closure9.name = "main___closure9";
  $desc = $collectedClasses.main___closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure9.prototype = $desc;
  function main___closure10(box_2) {
    this.box_2 = box_2;
  }
  main___closure10.builtin$cls = "main___closure10";
  if (!"name" in main___closure10)
    main___closure10.name = "main___closure10";
  $desc = $collectedClasses.main___closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure10.prototype = $desc;
  function main__closure14() {
  }
  main__closure14.builtin$cls = "main__closure14";
  if (!"name" in main__closure14)
    main__closure14.name = "main__closure14";
  $desc = $collectedClasses.main__closure14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure14.prototype = $desc;
  function main___closure3(box_3) {
    this.box_3 = box_3;
  }
  main___closure3.builtin$cls = "main___closure3";
  if (!"name" in main___closure3)
    main___closure3.name = "main___closure3";
  $desc = $collectedClasses.main___closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure3.prototype = $desc;
  function main___closure4(box_3, controller_10) {
    this.box_3 = box_3;
    this.controller_10 = controller_10;
  }
  main___closure4.builtin$cls = "main___closure4";
  if (!"name" in main___closure4)
    main___closure4.name = "main___closure4";
  $desc = $collectedClasses.main___closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure4.prototype = $desc;
  function main___closure5(box_3) {
    this.box_3 = box_3;
  }
  main___closure5.builtin$cls = "main___closure5";
  if (!"name" in main___closure5)
    main___closure5.name = "main___closure5";
  $desc = $collectedClasses.main___closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure5.prototype = $desc;
  function main___closure6(box_3) {
    this.box_3 = box_3;
  }
  main___closure6.builtin$cls = "main___closure6";
  if (!"name" in main___closure6)
    main___closure6.name = "main___closure6";
  $desc = $collectedClasses.main___closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure6.prototype = $desc;
  function main__closure15() {
  }
  main__closure15.builtin$cls = "main__closure15";
  if (!"name" in main__closure15)
    main__closure15.name = "main__closure15";
  $desc = $collectedClasses.main__closure15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure15.prototype = $desc;
  function main___closure(box_4) {
    this.box_4 = box_4;
  }
  main___closure.builtin$cls = "main___closure";
  if (!"name" in main___closure)
    main___closure.name = "main___closure";
  $desc = $collectedClasses.main___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure.prototype = $desc;
  function main___closure0(box_4, controller_11) {
    this.box_4 = box_4;
    this.controller_11 = controller_11;
  }
  main___closure0.builtin$cls = "main___closure0";
  if (!"name" in main___closure0)
    main___closure0.name = "main___closure0";
  $desc = $collectedClasses.main___closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure0.prototype = $desc;
  function main___closure1(box_4) {
    this.box_4 = box_4;
  }
  main___closure1.builtin$cls = "main___closure1";
  if (!"name" in main___closure1)
    main___closure1.name = "main___closure1";
  $desc = $collectedClasses.main___closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure1.prototype = $desc;
  function main___closure2(box_4) {
    this.box_4 = box_4;
  }
  main___closure2.builtin$cls = "main___closure2";
  if (!"name" in main___closure2)
    main___closure2.name = "main___closure2";
  $desc = $collectedClasses.main___closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure2.prototype = $desc;
  function _slowFromList_closure(controller_0) {
    this.controller_0 = controller_0;
  }
  _slowFromList_closure.builtin$cls = "_slowFromList_closure";
  if (!"name" in _slowFromList_closure)
    _slowFromList_closure.name = "_slowFromList_closure";
  $desc = $collectedClasses._slowFromList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _slowFromList_closure.prototype = $desc;
  function _slowFromList__closure(controller_1, item_2) {
    this.controller_1 = controller_1;
    this.item_2 = item_2;
  }
  _slowFromList__closure.builtin$cls = "_slowFromList__closure";
  if (!"name" in _slowFromList__closure)
    _slowFromList__closure.name = "_slowFromList__closure";
  $desc = $collectedClasses._slowFromList__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _slowFromList__closure.prototype = $desc;
  function main_closure7() {
  }
  main_closure7.builtin$cls = "main_closure7";
  if (!"name" in main_closure7)
    main_closure7.name = "main_closure7";
  $desc = $collectedClasses.main_closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure7.prototype = $desc;
  function main_closure8() {
  }
  main_closure8.builtin$cls = "main_closure8";
  if (!"name" in main_closure8)
    main_closure8.name = "main_closure8";
  $desc = $collectedClasses.main_closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure8.prototype = $desc;
  function main_closure9() {
  }
  main_closure9.builtin$cls = "main_closure9";
  if (!"name" in main_closure9)
    main_closure9.name = "main_closure9";
  $desc = $collectedClasses.main_closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure9.prototype = $desc;
  function main_closure10() {
  }
  main_closure10.builtin$cls = "main_closure10";
  if (!"name" in main_closure10)
    main_closure10.name = "main_closure10";
  $desc = $collectedClasses.main_closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure10.prototype = $desc;
  function main_closure11() {
  }
  main_closure11.builtin$cls = "main_closure11";
  if (!"name" in main_closure11)
    main_closure11.name = "main_closure11";
  $desc = $collectedClasses.main_closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure11.prototype = $desc;
  function main_closure12() {
  }
  main_closure12.builtin$cls = "main_closure12";
  if (!"name" in main_closure12)
    main_closure12.name = "main_closure12";
  $desc = $collectedClasses.main_closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure12.prototype = $desc;
  function _test_closure(map_0, expected_1) {
    this.map_0 = map_0;
    this.expected_1 = expected_1;
  }
  _test_closure.builtin$cls = "_test_closure";
  if (!"name" in _test_closure)
    _test_closure.name = "_test_closure";
  $desc = $collectedClasses._test_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _test_closure.prototype = $desc;
  function _testThrow_closure(map_0, throwsMatcher_1) {
    this.map_0 = map_0;
    this.throwsMatcher_1 = throwsMatcher_1;
  }
  _testThrow_closure.builtin$cls = "_testThrow_closure";
  if (!"name" in _testThrow_closure)
    _testThrow_closure.name = "_testThrow_closure";
  $desc = $collectedClasses._testThrow_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _testThrow_closure.prototype = $desc;
  function _testThrow__closure(map_2) {
    this.map_2 = map_2;
  }
  _testThrow__closure.builtin$cls = "_testThrow__closure";
  if (!"name" in _testThrow__closure)
    _testThrow__closure.name = "_testThrow__closure";
  $desc = $collectedClasses._testThrow__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _testThrow__closure.prototype = $desc;
  function main_closure0() {
  }
  main_closure0.builtin$cls = "main_closure0";
  if (!"name" in main_closure0)
    main_closure0.name = "main_closure0";
  $desc = $collectedClasses.main_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure0.prototype = $desc;
  function main__closure1(ts_0) {
    this.ts_0 = ts_0;
  }
  main__closure1.builtin$cls = "main__closure1";
  if (!"name" in main__closure1)
    main__closure1.name = "main__closure1";
  $desc = $collectedClasses.main__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure1.prototype = $desc;
  function main__closure2(ts_1) {
    this.ts_1 = ts_1;
  }
  main__closure2.builtin$cls = "main__closure2";
  if (!"name" in main__closure2)
    main__closure2.name = "main__closure2";
  $desc = $collectedClasses.main__closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure2.prototype = $desc;
  function main__closure3(ts_2) {
    this.ts_2 = ts_2;
  }
  main__closure3.builtin$cls = "main__closure3";
  if (!"name" in main__closure3)
    main__closure3.name = "main__closure3";
  $desc = $collectedClasses.main__closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure3.prototype = $desc;
  function main__closure4() {
  }
  main__closure4.builtin$cls = "main__closure4";
  if (!"name" in main__closure4)
    main__closure4.name = "main__closure4";
  $desc = $collectedClasses.main__closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure4.prototype = $desc;
  function main__closure5() {
  }
  main__closure5.builtin$cls = "main__closure5";
  if (!"name" in main__closure5)
    main__closure5.name = "main__closure5";
  $desc = $collectedClasses.main__closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure5.prototype = $desc;
  function main__closure6(ts_3, simple_4) {
    this.ts_3 = ts_3;
    this.simple_4 = simple_4;
  }
  main__closure6.builtin$cls = "main__closure6";
  if (!"name" in main__closure6)
    main__closure6.name = "main__closure6";
  $desc = $collectedClasses.main__closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure6.prototype = $desc;
  function main__closure7(ts_5) {
    this.ts_5 = ts_5;
  }
  main__closure7.builtin$cls = "main__closure7";
  if (!"name" in main__closure7)
    main__closure7.name = "main__closure7";
  $desc = $collectedClasses.main__closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure7.prototype = $desc;
  function main__closure8(ts_6, simple_7) {
    this.ts_6 = ts_6;
    this.simple_7 = simple_7;
  }
  main__closure8.builtin$cls = "main__closure8";
  if (!"name" in main__closure8)
    main__closure8.name = "main__closure8";
  $desc = $collectedClasses.main__closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure8.prototype = $desc;
  function main__closure9() {
  }
  main__closure9.builtin$cls = "main__closure9";
  if (!"name" in main__closure9)
    main__closure9.name = "main__closure9";
  $desc = $collectedClasses.main__closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure9.prototype = $desc;
  function _sum_closure(values_0) {
    this.values_0 = values_0;
  }
  _sum_closure.builtin$cls = "_sum_closure";
  if (!"name" in _sum_closure)
    _sum_closure.name = "_sum_closure";
  $desc = $collectedClasses._sum_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _sum_closure.prototype = $desc;
  function _sum__closure() {
  }
  _sum__closure.builtin$cls = "_sum__closure";
  if (!"name" in _sum__closure)
    _sum__closure.name = "_sum__closure";
  $desc = $collectedClasses._sum__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _sum__closure.prototype = $desc;
  function main_closure() {
  }
  main_closure.builtin$cls = "main_closure";
  if (!"name" in main_closure)
    main_closure.name = "main_closure";
  $desc = $collectedClasses.main_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure.prototype = $desc;
  function main__closure() {
  }
  main__closure.builtin$cls = "main__closure";
  if (!"name" in main__closure)
    main__closure.name = "main__closure";
  $desc = $collectedClasses.main__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure.prototype = $desc;
  function main__closure0() {
  }
  main__closure0.builtin$cls = "main__closure0";
  if (!"name" in main__closure0)
    main__closure0.name = "main__closure0";
  $desc = $collectedClasses.main__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure0.prototype = $desc;
  function TestAttachedEvents(_propertyValues, _eventHandlers, _disposed) {
    this._propertyValues = _propertyValues;
    this._eventHandlers = _eventHandlers;
    this._disposed = _disposed;
  }
  TestAttachedEvents.builtin$cls = "TestAttachedEvents";
  if (!"name" in TestAttachedEvents)
    TestAttachedEvents.name = "TestAttachedEvents";
  $desc = $collectedClasses.TestAttachedEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAttachedEvents.prototype = $desc;
  function TestAttachedEvents_run_closure() {
  }
  TestAttachedEvents_run_closure.builtin$cls = "TestAttachedEvents_run_closure";
  if (!"name" in TestAttachedEvents_run_closure)
    TestAttachedEvents_run_closure.name = "TestAttachedEvents_run_closure";
  $desc = $collectedClasses.TestAttachedEvents_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAttachedEvents_run_closure.prototype = $desc;
  function TestProperties(_propertyValues, _eventHandlers, _disposed) {
    this._propertyValues = _propertyValues;
    this._eventHandlers = _eventHandlers;
    this._disposed = _disposed;
  }
  TestProperties.builtin$cls = "TestProperties";
  if (!"name" in TestProperties)
    TestProperties.name = "TestProperties";
  $desc = $collectedClasses.TestProperties;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestProperties.prototype = $desc;
  function TestProperties_run_closure() {
  }
  TestProperties_run_closure.builtin$cls = "TestProperties_run_closure";
  if (!"name" in TestProperties_run_closure)
    TestProperties_run_closure.name = "TestProperties_run_closure";
  $desc = $collectedClasses.TestProperties_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestProperties_run_closure.prototype = $desc;
  function TestProperties_run__closure() {
  }
  TestProperties_run__closure.builtin$cls = "TestProperties_run__closure";
  if (!"name" in TestProperties_run__closure)
    TestProperties_run__closure.name = "TestProperties_run__closure";
  $desc = $collectedClasses.TestProperties_run__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestProperties_run__closure.prototype = $desc;
  function TestProperties_run__closure0() {
  }
  TestProperties_run__closure0.builtin$cls = "TestProperties_run__closure0";
  if (!"name" in TestProperties_run__closure0)
    TestProperties_run__closure0.name = "TestProperties_run__closure0";
  $desc = $collectedClasses.TestProperties_run__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestProperties_run__closure0.prototype = $desc;
  function TestProperties_run__closure1() {
  }
  TestProperties_run__closure1.builtin$cls = "TestProperties_run__closure1";
  if (!"name" in TestProperties_run__closure1)
    TestProperties_run__closure1.name = "TestProperties_run__closure1";
  $desc = $collectedClasses.TestProperties_run__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestProperties_run__closure1.prototype = $desc;
  function TestProperties_run__closure2() {
  }
  TestProperties_run__closure2.builtin$cls = "TestProperties_run__closure2";
  if (!"name" in TestProperties_run__closure2)
    TestProperties_run__closure2.name = "TestProperties_run__closure2";
  $desc = $collectedClasses.TestProperties_run__closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestProperties_run__closure2.prototype = $desc;
  function TestProperties_testFactories_closure(propFactoryValue_0) {
    this.propFactoryValue_0 = propFactoryValue_0;
  }
  TestProperties_testFactories_closure.builtin$cls = "TestProperties_testFactories_closure";
  if (!"name" in TestProperties_testFactories_closure)
    TestProperties_testFactories_closure.name = "TestProperties_testFactories_closure";
  $desc = $collectedClasses.TestProperties_testFactories_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestProperties_testFactories_closure.prototype = $desc;
  function TestPropertyEventIntegration(_nameChangedEventHandle, _ageChangedEventHandle, _propertyValues, _eventHandlers, _disposed) {
    this._nameChangedEventHandle = _nameChangedEventHandle;
    this._ageChangedEventHandle = _ageChangedEventHandle;
    this._propertyValues = _propertyValues;
    this._eventHandlers = _eventHandlers;
    this._disposed = _disposed;
  }
  TestPropertyEventIntegration.builtin$cls = "TestPropertyEventIntegration";
  if (!"name" in TestPropertyEventIntegration)
    TestPropertyEventIntegration.name = "TestPropertyEventIntegration";
  $desc = $collectedClasses.TestPropertyEventIntegration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestPropertyEventIntegration.prototype = $desc;
  function TestPropertyEventIntegration_closure(this_0) {
    this.this_0 = this_0;
  }
  TestPropertyEventIntegration_closure.builtin$cls = "TestPropertyEventIntegration_closure";
  if (!"name" in TestPropertyEventIntegration_closure)
    TestPropertyEventIntegration_closure.name = "TestPropertyEventIntegration_closure";
  $desc = $collectedClasses.TestPropertyEventIntegration_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestPropertyEventIntegration_closure.prototype = $desc;
  function TestPropertyEventIntegration_closure0(this_1) {
    this.this_1 = this_1;
  }
  TestPropertyEventIntegration_closure0.builtin$cls = "TestPropertyEventIntegration_closure0";
  if (!"name" in TestPropertyEventIntegration_closure0)
    TestPropertyEventIntegration_closure0.name = "TestPropertyEventIntegration_closure0";
  $desc = $collectedClasses.TestPropertyEventIntegration_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestPropertyEventIntegration_closure0.prototype = $desc;
  function TestArray2d_run_closure() {
  }
  TestArray2d_run_closure.builtin$cls = "TestArray2d_run_closure";
  if (!"name" in TestArray2d_run_closure)
    TestArray2d_run_closure.name = "TestArray2d_run_closure";
  $desc = $collectedClasses.TestArray2d_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestArray2d_run_closure.prototype = $desc;
  function TestArray2d__testReadonlyFromCtorParams_closure() {
  }
  TestArray2d__testReadonlyFromCtorParams_closure.builtin$cls = "TestArray2d__testReadonlyFromCtorParams_closure";
  if (!"name" in TestArray2d__testReadonlyFromCtorParams_closure)
    TestArray2d__testReadonlyFromCtorParams_closure.name = "TestArray2d__testReadonlyFromCtorParams_closure";
  $desc = $collectedClasses.TestArray2d__testReadonlyFromCtorParams_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestArray2d__testReadonlyFromCtorParams_closure.prototype = $desc;
  function TestArray2d__testReadonlyFromCtorParams_closure0() {
  }
  TestArray2d__testReadonlyFromCtorParams_closure0.builtin$cls = "TestArray2d__testReadonlyFromCtorParams_closure0";
  if (!"name" in TestArray2d__testReadonlyFromCtorParams_closure0)
    TestArray2d__testReadonlyFromCtorParams_closure0.name = "TestArray2d__testReadonlyFromCtorParams_closure0";
  $desc = $collectedClasses.TestArray2d__testReadonlyFromCtorParams_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestArray2d__testReadonlyFromCtorParams_closure0.prototype = $desc;
  function TestArray2d__testReadonlyFromCtorParams_closure1() {
  }
  TestArray2d__testReadonlyFromCtorParams_closure1.builtin$cls = "TestArray2d__testReadonlyFromCtorParams_closure1";
  if (!"name" in TestArray2d__testReadonlyFromCtorParams_closure1)
    TestArray2d__testReadonlyFromCtorParams_closure1.name = "TestArray2d__testReadonlyFromCtorParams_closure1";
  $desc = $collectedClasses.TestArray2d__testReadonlyFromCtorParams_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestArray2d__testReadonlyFromCtorParams_closure1.prototype = $desc;
  function TestArray2d__testReadonlyFromCtorParams_closure2() {
  }
  TestArray2d__testReadonlyFromCtorParams_closure2.builtin$cls = "TestArray2d__testReadonlyFromCtorParams_closure2";
  if (!"name" in TestArray2d__testReadonlyFromCtorParams_closure2)
    TestArray2d__testReadonlyFromCtorParams_closure2.name = "TestArray2d__testReadonlyFromCtorParams_closure2";
  $desc = $collectedClasses.TestArray2d__testReadonlyFromCtorParams_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestArray2d__testReadonlyFromCtorParams_closure2.prototype = $desc;
  function TestCollectionUtil_run_closure() {
  }
  TestCollectionUtil_run_closure.builtin$cls = "TestCollectionUtil_run_closure";
  if (!"name" in TestCollectionUtil_run_closure)
    TestCollectionUtil_run_closure.name = "TestCollectionUtil_run_closure";
  $desc = $collectedClasses.TestCollectionUtil_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCollectionUtil_run_closure.prototype = $desc;
  function TestEnumerable_run_closure() {
  }
  TestEnumerable_run_closure.builtin$cls = "TestEnumerable_run_closure";
  if (!"name" in TestEnumerable_run_closure)
    TestEnumerable_run_closure.name = "TestEnumerable_run_closure";
  $desc = $collectedClasses.TestEnumerable_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable_run_closure.prototype = $desc;
  function TestEnumerable_run__closure() {
  }
  TestEnumerable_run__closure.builtin$cls = "TestEnumerable_run__closure";
  if (!"name" in TestEnumerable_run__closure)
    TestEnumerable_run__closure.name = "TestEnumerable_run__closure";
  $desc = $collectedClasses.TestEnumerable_run__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable_run__closure.prototype = $desc;
  function TestEnumerable__testDistinct_closure() {
  }
  TestEnumerable__testDistinct_closure.builtin$cls = "TestEnumerable__testDistinct_closure";
  if (!"name" in TestEnumerable__testDistinct_closure)
    TestEnumerable__testDistinct_closure.name = "TestEnumerable__testDistinct_closure";
  $desc = $collectedClasses.TestEnumerable__testDistinct_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testDistinct_closure.prototype = $desc;
  function TestEnumerable__testForEachWithIndex_closure() {
  }
  TestEnumerable__testForEachWithIndex_closure.builtin$cls = "TestEnumerable__testForEachWithIndex_closure";
  if (!"name" in TestEnumerable__testForEachWithIndex_closure)
    TestEnumerable__testForEachWithIndex_closure.name = "TestEnumerable__testForEachWithIndex_closure";
  $desc = $collectedClasses.TestEnumerable__testForEachWithIndex_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testForEachWithIndex_closure.prototype = $desc;
  function TestEnumerable__testToMap_closure() {
  }
  TestEnumerable__testToMap_closure.builtin$cls = "TestEnumerable__testToMap_closure";
  if (!"name" in TestEnumerable__testToMap_closure)
    TestEnumerable__testToMap_closure.name = "TestEnumerable__testToMap_closure";
  $desc = $collectedClasses.TestEnumerable__testToMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testToMap_closure.prototype = $desc;
  function TestEnumerable__testToMap_closure0() {
  }
  TestEnumerable__testToMap_closure0.builtin$cls = "TestEnumerable__testToMap_closure0";
  if (!"name" in TestEnumerable__testToMap_closure0)
    TestEnumerable__testToMap_closure0.name = "TestEnumerable__testToMap_closure0";
  $desc = $collectedClasses.TestEnumerable__testToMap_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testToMap_closure0.prototype = $desc;
  function TestEnumerable__testToMap_closure1() {
  }
  TestEnumerable__testToMap_closure1.builtin$cls = "TestEnumerable__testToMap_closure1";
  if (!"name" in TestEnumerable__testToMap_closure1)
    TestEnumerable__testToMap_closure1.name = "TestEnumerable__testToMap_closure1";
  $desc = $collectedClasses.TestEnumerable__testToMap_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testToMap_closure1.prototype = $desc;
  function TestEnumerable__testToMap_closure2() {
  }
  TestEnumerable__testToMap_closure2.builtin$cls = "TestEnumerable__testToMap_closure2";
  if (!"name" in TestEnumerable__testToMap_closure2)
    TestEnumerable__testToMap_closure2.name = "TestEnumerable__testToMap_closure2";
  $desc = $collectedClasses.TestEnumerable__testToMap_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testToMap_closure2.prototype = $desc;
  function TestEnumerable__testToMap_closure3() {
  }
  TestEnumerable__testToMap_closure3.builtin$cls = "TestEnumerable__testToMap_closure3";
  if (!"name" in TestEnumerable__testToMap_closure3)
    TestEnumerable__testToMap_closure3.name = "TestEnumerable__testToMap_closure3";
  $desc = $collectedClasses.TestEnumerable__testToMap_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testToMap_closure3.prototype = $desc;
  function TestEnumerable__testToMap_closure4(noDupes_0) {
    this.noDupes_0 = noDupes_0;
  }
  TestEnumerable__testToMap_closure4.builtin$cls = "TestEnumerable__testToMap_closure4";
  if (!"name" in TestEnumerable__testToMap_closure4)
    TestEnumerable__testToMap_closure4.name = "TestEnumerable__testToMap_closure4";
  $desc = $collectedClasses.TestEnumerable__testToMap_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testToMap_closure4.prototype = $desc;
  function TestEnumerable__testToMap__closure0() {
  }
  TestEnumerable__testToMap__closure0.builtin$cls = "TestEnumerable__testToMap__closure0";
  if (!"name" in TestEnumerable__testToMap__closure0)
    TestEnumerable__testToMap__closure0.name = "TestEnumerable__testToMap__closure0";
  $desc = $collectedClasses.TestEnumerable__testToMap__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testToMap__closure0.prototype = $desc;
  function TestEnumerable__testToMap__closure1() {
  }
  TestEnumerable__testToMap__closure1.builtin$cls = "TestEnumerable__testToMap__closure1";
  if (!"name" in TestEnumerable__testToMap__closure1)
    TestEnumerable__testToMap__closure1.name = "TestEnumerable__testToMap__closure1";
  $desc = $collectedClasses.TestEnumerable__testToMap__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testToMap__closure1.prototype = $desc;
  function TestEnumerable__testToMap_closure5(withDupes_1) {
    this.withDupes_1 = withDupes_1;
  }
  TestEnumerable__testToMap_closure5.builtin$cls = "TestEnumerable__testToMap_closure5";
  if (!"name" in TestEnumerable__testToMap_closure5)
    TestEnumerable__testToMap_closure5.name = "TestEnumerable__testToMap_closure5";
  $desc = $collectedClasses.TestEnumerable__testToMap_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testToMap_closure5.prototype = $desc;
  function TestEnumerable__testToMap__closure() {
  }
  TestEnumerable__testToMap__closure.builtin$cls = "TestEnumerable__testToMap__closure";
  if (!"name" in TestEnumerable__testToMap__closure)
    TestEnumerable__testToMap__closure.name = "TestEnumerable__testToMap__closure";
  $desc = $collectedClasses.TestEnumerable__testToMap__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testToMap__closure.prototype = $desc;
  function TestEnumerable__testCount_closure() {
  }
  TestEnumerable__testCount_closure.builtin$cls = "TestEnumerable__testCount_closure";
  if (!"name" in TestEnumerable__testCount_closure)
    TestEnumerable__testCount_closure.name = "TestEnumerable__testCount_closure";
  $desc = $collectedClasses.TestEnumerable__testCount_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testCount_closure.prototype = $desc;
  function TestEnumerable__testSelectNumbers_closure() {
  }
  TestEnumerable__testSelectNumbers_closure.builtin$cls = "TestEnumerable__testSelectNumbers_closure";
  if (!"name" in TestEnumerable__testSelectNumbers_closure)
    TestEnumerable__testSelectNumbers_closure.name = "TestEnumerable__testSelectNumbers_closure";
  $desc = $collectedClasses.TestEnumerable__testSelectNumbers_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testSelectNumbers_closure.prototype = $desc;
  function TestEnumerable__testComplexGrouping_closure() {
  }
  TestEnumerable__testComplexGrouping_closure.builtin$cls = "TestEnumerable__testComplexGrouping_closure";
  if (!"name" in TestEnumerable__testComplexGrouping_closure)
    TestEnumerable__testComplexGrouping_closure.name = "TestEnumerable__testComplexGrouping_closure";
  $desc = $collectedClasses.TestEnumerable__testComplexGrouping_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEnumerable__testComplexGrouping_closure.prototype = $desc;
  function TestNumberEnumerable_run_closure() {
  }
  TestNumberEnumerable_run_closure.builtin$cls = "TestNumberEnumerable_run_closure";
  if (!"name" in TestNumberEnumerable_run_closure)
    TestNumberEnumerable_run_closure.name = "TestNumberEnumerable_run_closure";
  $desc = $collectedClasses.TestNumberEnumerable_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestNumberEnumerable_run_closure.prototype = $desc;
  function TestNumberEnumerable__testSum_closure() {
  }
  TestNumberEnumerable__testSum_closure.builtin$cls = "TestNumberEnumerable__testSum_closure";
  if (!"name" in TestNumberEnumerable__testSum_closure)
    TestNumberEnumerable__testSum_closure.name = "TestNumberEnumerable__testSum_closure";
  $desc = $collectedClasses.TestNumberEnumerable__testSum_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestNumberEnumerable__testSum_closure.prototype = $desc;
  function TestNumberEnumerable__testMin_closure() {
  }
  TestNumberEnumerable__testMin_closure.builtin$cls = "TestNumberEnumerable__testMin_closure";
  if (!"name" in TestNumberEnumerable__testMin_closure)
    TestNumberEnumerable__testMin_closure.name = "TestNumberEnumerable__testMin_closure";
  $desc = $collectedClasses.TestNumberEnumerable__testMin_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestNumberEnumerable__testMin_closure.prototype = $desc;
  function TestNumberEnumerable__testMax_closure() {
  }
  TestNumberEnumerable__testMax_closure.builtin$cls = "TestNumberEnumerable__testMax_closure";
  if (!"name" in TestNumberEnumerable__testMax_closure)
    TestNumberEnumerable__testMax_closure.name = "TestNumberEnumerable__testMax_closure";
  $desc = $collectedClasses.TestNumberEnumerable__testMax_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestNumberEnumerable__testMax_closure.prototype = $desc;
  function TestNumberEnumerable__testAverage_closure() {
  }
  TestNumberEnumerable__testAverage_closure.builtin$cls = "TestNumberEnumerable__testAverage_closure";
  if (!"name" in TestNumberEnumerable__testAverage_closure)
    TestNumberEnumerable__testAverage_closure.name = "TestNumberEnumerable__testAverage_closure";
  $desc = $collectedClasses.TestNumberEnumerable__testAverage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestNumberEnumerable__testAverage_closure.prototype = $desc;
  function TestSequence(flip) {
    this.flip = flip;
  }
  TestSequence.builtin$cls = "TestSequence";
  if (!"name" in TestSequence)
    TestSequence.name = "TestSequence";
  $desc = $collectedClasses.TestSequence;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestSequence.prototype = $desc;
  function TestSequence_run_closure() {
  }
  TestSequence_run_closure.builtin$cls = "TestSequence_run_closure";
  if (!"name" in TestSequence_run_closure)
    TestSequence_run_closure.name = "TestSequence_run_closure";
  $desc = $collectedClasses.TestSequence_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestSequence_run_closure.prototype = $desc;
  function TestHslColor_run_closure() {
  }
  TestHslColor_run_closure.builtin$cls = "TestHslColor_run_closure";
  if (!"name" in TestHslColor_run_closure)
    TestHslColor_run_closure.name = "TestHslColor_run_closure";
  $desc = $collectedClasses.TestHslColor_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestHslColor_run_closure.prototype = $desc;
  function TestHslColor_run__closure() {
  }
  TestHslColor_run__closure.builtin$cls = "TestHslColor_run__closure";
  if (!"name" in TestHslColor_run__closure)
    TestHslColor_run__closure.name = "TestHslColor_run__closure";
  $desc = $collectedClasses.TestHslColor_run__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestHslColor_run__closure.prototype = $desc;
  function TestHslColor__testInvalid_closure() {
  }
  TestHslColor__testInvalid_closure.builtin$cls = "TestHslColor__testInvalid_closure";
  if (!"name" in TestHslColor__testInvalid_closure)
    TestHslColor__testInvalid_closure.name = "TestHslColor__testInvalid_closure";
  $desc = $collectedClasses.TestHslColor__testInvalid_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestHslColor__testInvalid_closure.prototype = $desc;
  function TestHslColor__testInvalid_closure0(invalidNumber_0) {
    this.invalidNumber_0 = invalidNumber_0;
  }
  TestHslColor__testInvalid_closure0.builtin$cls = "TestHslColor__testInvalid_closure0";
  if (!"name" in TestHslColor__testInvalid_closure0)
    TestHslColor__testInvalid_closure0.name = "TestHslColor__testInvalid_closure0";
  $desc = $collectedClasses.TestHslColor__testInvalid_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestHslColor__testInvalid_closure0.prototype = $desc;
  function TestHslColor__testInvalid_closure1(invalidNumber_1) {
    this.invalidNumber_1 = invalidNumber_1;
  }
  TestHslColor__testInvalid_closure1.builtin$cls = "TestHslColor__testInvalid_closure1";
  if (!"name" in TestHslColor__testInvalid_closure1)
    TestHslColor__testInvalid_closure1.name = "TestHslColor__testInvalid_closure1";
  $desc = $collectedClasses.TestHslColor__testInvalid_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestHslColor__testInvalid_closure1.prototype = $desc;
  function TestHslColor__testInvalid_closure2(invalidNumber_2) {
    this.invalidNumber_2 = invalidNumber_2;
  }
  TestHslColor__testInvalid_closure2.builtin$cls = "TestHslColor__testInvalid_closure2";
  if (!"name" in TestHslColor__testInvalid_closure2)
    TestHslColor__testInvalid_closure2.name = "TestHslColor__testInvalid_closure2";
  $desc = $collectedClasses.TestHslColor__testInvalid_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestHslColor__testInvalid_closure2.prototype = $desc;
  function TestHslColor__testInvalid_closure3(invalidNumber_3) {
    this.invalidNumber_3 = invalidNumber_3;
  }
  TestHslColor__testInvalid_closure3.builtin$cls = "TestHslColor__testInvalid_closure3";
  if (!"name" in TestHslColor__testInvalid_closure3)
    TestHslColor__testInvalid_closure3.name = "TestHslColor__testInvalid_closure3";
  $desc = $collectedClasses.TestHslColor__testInvalid_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestHslColor__testInvalid_closure3.prototype = $desc;
  function TestHslColor__testInvalid_closure4() {
  }
  TestHslColor__testInvalid_closure4.builtin$cls = "TestHslColor__testInvalid_closure4";
  if (!"name" in TestHslColor__testInvalid_closure4)
    TestHslColor__testInvalid_closure4.name = "TestHslColor__testInvalid_closure4";
  $desc = $collectedClasses.TestHslColor__testInvalid_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestHslColor__testInvalid_closure4.prototype = $desc;
  function TestHslColor__testInvalid_closure5() {
  }
  TestHslColor__testInvalid_closure5.builtin$cls = "TestHslColor__testInvalid_closure5";
  if (!"name" in TestHslColor__testInvalid_closure5)
    TestHslColor__testInvalid_closure5.name = "TestHslColor__testInvalid_closure5";
  $desc = $collectedClasses.TestHslColor__testInvalid_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestHslColor__testInvalid_closure5.prototype = $desc;
  function TestRgbColor_run_closure() {
  }
  TestRgbColor_run_closure.builtin$cls = "TestRgbColor_run_closure";
  if (!"name" in TestRgbColor_run_closure)
    TestRgbColor_run_closure.name = "TestRgbColor_run_closure";
  $desc = $collectedClasses.TestRgbColor_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestRgbColor_run_closure.prototype = $desc;
  function TestRgbColor__testInvalid_closure() {
  }
  TestRgbColor__testInvalid_closure.builtin$cls = "TestRgbColor__testInvalid_closure";
  if (!"name" in TestRgbColor__testInvalid_closure)
    TestRgbColor__testInvalid_closure.name = "TestRgbColor__testInvalid_closure";
  $desc = $collectedClasses.TestRgbColor__testInvalid_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestRgbColor__testInvalid_closure.prototype = $desc;
  function TestRgbColor__testInvalid_closure0() {
  }
  TestRgbColor__testInvalid_closure0.builtin$cls = "TestRgbColor__testInvalid_closure0";
  if (!"name" in TestRgbColor__testInvalid_closure0)
    TestRgbColor__testInvalid_closure0.name = "TestRgbColor__testInvalid_closure0";
  $desc = $collectedClasses.TestRgbColor__testInvalid_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestRgbColor__testInvalid_closure0.prototype = $desc;
  function TestRgbColor__testInvalid_closure1() {
  }
  TestRgbColor__testInvalid_closure1.builtin$cls = "TestRgbColor__testInvalid_closure1";
  if (!"name" in TestRgbColor__testInvalid_closure1)
    TestRgbColor__testInvalid_closure1.name = "TestRgbColor__testInvalid_closure1";
  $desc = $collectedClasses.TestRgbColor__testInvalid_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestRgbColor__testInvalid_closure1.prototype = $desc;
  function TestRgbColor__testFromHex_closure() {
  }
  TestRgbColor__testFromHex_closure.builtin$cls = "TestRgbColor__testFromHex_closure";
  if (!"name" in TestRgbColor__testFromHex_closure)
    TestRgbColor__testFromHex_closure.name = "TestRgbColor__testFromHex_closure";
  $desc = $collectedClasses.TestRgbColor__testFromHex_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestRgbColor__testFromHex_closure.prototype = $desc;
  function TestRgbColor__testInvalidHex_closure() {
  }
  TestRgbColor__testInvalidHex_closure.builtin$cls = "TestRgbColor__testInvalidHex_closure";
  if (!"name" in TestRgbColor__testInvalidHex_closure)
    TestRgbColor__testInvalidHex_closure.name = "TestRgbColor__testInvalidHex_closure";
  $desc = $collectedClasses.TestRgbColor__testInvalidHex_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestRgbColor__testInvalidHex_closure.prototype = $desc;
  function TestRgbColor__testInvalidHex__closure(hex_0) {
    this.hex_0 = hex_0;
  }
  TestRgbColor__testInvalidHex__closure.builtin$cls = "TestRgbColor__testInvalidHex__closure";
  if (!"name" in TestRgbColor__testInvalidHex__closure)
    TestRgbColor__testInvalidHex__closure.name = "TestRgbColor__testInvalidHex__closure";
  $desc = $collectedClasses.TestRgbColor__testInvalidHex__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestRgbColor__testInvalidHex__closure.prototype = $desc;
  function TestEvents(_testEventHandle) {
    this._testEventHandle = _testEventHandle;
  }
  TestEvents.builtin$cls = "TestEvents";
  if (!"name" in TestEvents)
    TestEvents.name = "TestEvents";
  $desc = $collectedClasses.TestEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEvents.prototype = $desc;
  function TestEvents_run_closure() {
  }
  TestEvents_run_closure.builtin$cls = "TestEvents_run_closure";
  if (!"name" in TestEvents_run_closure)
    TestEvents_run_closure.name = "TestEvents_run_closure";
  $desc = $collectedClasses.TestEvents_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestEvents_run_closure.prototype = $desc;
  function TestAffineTransform_run_closure() {
  }
  TestAffineTransform_run_closure.builtin$cls = "TestAffineTransform_run_closure";
  if (!"name" in TestAffineTransform_run_closure)
    TestAffineTransform_run_closure.name = "TestAffineTransform_run_closure";
  $desc = $collectedClasses.TestAffineTransform_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAffineTransform_run_closure.prototype = $desc;
  function TestAffineTransform_run__closure() {
  }
  TestAffineTransform_run__closure.builtin$cls = "TestAffineTransform_run__closure";
  if (!"name" in TestAffineTransform_run__closure)
    TestAffineTransform_run__closure.name = "TestAffineTransform_run__closure";
  $desc = $collectedClasses.TestAffineTransform_run__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAffineTransform_run__closure.prototype = $desc;
  function TestAffineTransform_run__closure0() {
  }
  TestAffineTransform_run__closure0.builtin$cls = "TestAffineTransform_run__closure0";
  if (!"name" in TestAffineTransform_run__closure0)
    TestAffineTransform_run__closure0.name = "TestAffineTransform_run__closure0";
  $desc = $collectedClasses.TestAffineTransform_run__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAffineTransform_run__closure0.prototype = $desc;
  function TestAffineTransform_run__closure1() {
  }
  TestAffineTransform_run__closure1.builtin$cls = "TestAffineTransform_run__closure1";
  if (!"name" in TestAffineTransform_run__closure1)
    TestAffineTransform_run__closure1.name = "TestAffineTransform_run__closure1";
  $desc = $collectedClasses.TestAffineTransform_run__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAffineTransform_run__closure1.prototype = $desc;
  function TestAffineTransform_run__closure2() {
  }
  TestAffineTransform_run__closure2.builtin$cls = "TestAffineTransform_run__closure2";
  if (!"name" in TestAffineTransform_run__closure2)
    TestAffineTransform_run__closure2.name = "TestAffineTransform_run__closure2";
  $desc = $collectedClasses.TestAffineTransform_run__closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAffineTransform_run__closure2.prototype = $desc;
  function TestAffineTransform_run__closure3() {
  }
  TestAffineTransform_run__closure3.builtin$cls = "TestAffineTransform_run__closure3";
  if (!"name" in TestAffineTransform_run__closure3)
    TestAffineTransform_run__closure3.name = "TestAffineTransform_run__closure3";
  $desc = $collectedClasses.TestAffineTransform_run__closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAffineTransform_run__closure3.prototype = $desc;
  function TestAffineTransform_run__closure4() {
  }
  TestAffineTransform_run__closure4.builtin$cls = "TestAffineTransform_run__closure4";
  if (!"name" in TestAffineTransform_run__closure4)
    TestAffineTransform_run__closure4.name = "TestAffineTransform_run__closure4";
  $desc = $collectedClasses.TestAffineTransform_run__closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAffineTransform_run__closure4.prototype = $desc;
  function TestAffineTransform_run__closure5() {
  }
  TestAffineTransform_run__closure5.builtin$cls = "TestAffineTransform_run__closure5";
  if (!"name" in TestAffineTransform_run__closure5)
    TestAffineTransform_run__closure5.name = "TestAffineTransform_run__closure5";
  $desc = $collectedClasses.TestAffineTransform_run__closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAffineTransform_run__closure5.prototype = $desc;
  function TestAffineTransform_run__closure6() {
  }
  TestAffineTransform_run__closure6.builtin$cls = "TestAffineTransform_run__closure6";
  if (!"name" in TestAffineTransform_run__closure6)
    TestAffineTransform_run__closure6.name = "TestAffineTransform_run__closure6";
  $desc = $collectedClasses.TestAffineTransform_run__closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestAffineTransform_run__closure6.prototype = $desc;
  function TestCoordinate_run_closure() {
  }
  TestCoordinate_run_closure.builtin$cls = "TestCoordinate_run_closure";
  if (!"name" in TestCoordinate_run_closure)
    TestCoordinate_run_closure.name = "TestCoordinate_run_closure";
  $desc = $collectedClasses.TestCoordinate_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCoordinate_run_closure.prototype = $desc;
  function TestCoordinate_run__closure() {
  }
  TestCoordinate_run__closure.builtin$cls = "TestCoordinate_run__closure";
  if (!"name" in TestCoordinate_run__closure)
    TestCoordinate_run__closure.name = "TestCoordinate_run__closure";
  $desc = $collectedClasses.TestCoordinate_run__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCoordinate_run__closure.prototype = $desc;
  function TestCoordinate_run__closure0() {
  }
  TestCoordinate_run__closure0.builtin$cls = "TestCoordinate_run__closure0";
  if (!"name" in TestCoordinate_run__closure0)
    TestCoordinate_run__closure0.name = "TestCoordinate_run__closure0";
  $desc = $collectedClasses.TestCoordinate_run__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCoordinate_run__closure0.prototype = $desc;
  function TestCoordinate_run__closure1() {
  }
  TestCoordinate_run__closure1.builtin$cls = "TestCoordinate_run__closure1";
  if (!"name" in TestCoordinate_run__closure1)
    TestCoordinate_run__closure1.name = "TestCoordinate_run__closure1";
  $desc = $collectedClasses.TestCoordinate_run__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCoordinate_run__closure1.prototype = $desc;
  function TestCoordinate_run__closure2() {
  }
  TestCoordinate_run__closure2.builtin$cls = "TestCoordinate_run__closure2";
  if (!"name" in TestCoordinate_run__closure2)
    TestCoordinate_run__closure2.name = "TestCoordinate_run__closure2";
  $desc = $collectedClasses.TestCoordinate_run__closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCoordinate_run__closure2.prototype = $desc;
  function TestBox_run_closure() {
  }
  TestBox_run_closure.builtin$cls = "TestBox_run_closure";
  if (!"name" in TestBox_run_closure)
    TestBox_run_closure.name = "TestBox_run_closure";
  $desc = $collectedClasses.TestBox_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestBox_run_closure.prototype = $desc;
  function TestVector_run_closure() {
  }
  TestVector_run_closure.builtin$cls = "TestVector_run_closure";
  if (!"name" in TestVector_run_closure)
    TestVector_run_closure.name = "TestVector_run_closure";
  $desc = $collectedClasses.TestVector_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run_closure.prototype = $desc;
  function TestVector_run__closure() {
  }
  TestVector_run__closure.builtin$cls = "TestVector_run__closure";
  if (!"name" in TestVector_run__closure)
    TestVector_run__closure.name = "TestVector_run__closure";
  $desc = $collectedClasses.TestVector_run__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure.prototype = $desc;
  function TestVector_run__closure0() {
  }
  TestVector_run__closure0.builtin$cls = "TestVector_run__closure0";
  if (!"name" in TestVector_run__closure0)
    TestVector_run__closure0.name = "TestVector_run__closure0";
  $desc = $collectedClasses.TestVector_run__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure0.prototype = $desc;
  function TestVector_run__closure1() {
  }
  TestVector_run__closure1.builtin$cls = "TestVector_run__closure1";
  if (!"name" in TestVector_run__closure1)
    TestVector_run__closure1.name = "TestVector_run__closure1";
  $desc = $collectedClasses.TestVector_run__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure1.prototype = $desc;
  function TestVector_run__closure2() {
  }
  TestVector_run__closure2.builtin$cls = "TestVector_run__closure2";
  if (!"name" in TestVector_run__closure2)
    TestVector_run__closure2.name = "TestVector_run__closure2";
  $desc = $collectedClasses.TestVector_run__closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure2.prototype = $desc;
  function TestVector_run__closure3() {
  }
  TestVector_run__closure3.builtin$cls = "TestVector_run__closure3";
  if (!"name" in TestVector_run__closure3)
    TestVector_run__closure3.name = "TestVector_run__closure3";
  $desc = $collectedClasses.TestVector_run__closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure3.prototype = $desc;
  function TestVector_run__closure4() {
  }
  TestVector_run__closure4.builtin$cls = "TestVector_run__closure4";
  if (!"name" in TestVector_run__closure4)
    TestVector_run__closure4.name = "TestVector_run__closure4";
  $desc = $collectedClasses.TestVector_run__closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure4.prototype = $desc;
  function TestVector_run__closure5() {
  }
  TestVector_run__closure5.builtin$cls = "TestVector_run__closure5";
  if (!"name" in TestVector_run__closure5)
    TestVector_run__closure5.name = "TestVector_run__closure5";
  $desc = $collectedClasses.TestVector_run__closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure5.prototype = $desc;
  function TestVector_run__closure6() {
  }
  TestVector_run__closure6.builtin$cls = "TestVector_run__closure6";
  if (!"name" in TestVector_run__closure6)
    TestVector_run__closure6.name = "TestVector_run__closure6";
  $desc = $collectedClasses.TestVector_run__closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure6.prototype = $desc;
  function TestVector_run__closure7() {
  }
  TestVector_run__closure7.builtin$cls = "TestVector_run__closure7";
  if (!"name" in TestVector_run__closure7)
    TestVector_run__closure7.name = "TestVector_run__closure7";
  $desc = $collectedClasses.TestVector_run__closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure7.prototype = $desc;
  function TestVector_run__closure8() {
  }
  TestVector_run__closure8.builtin$cls = "TestVector_run__closure8";
  if (!"name" in TestVector_run__closure8)
    TestVector_run__closure8.name = "TestVector_run__closure8";
  $desc = $collectedClasses.TestVector_run__closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure8.prototype = $desc;
  function TestVector_run__closure9() {
  }
  TestVector_run__closure9.builtin$cls = "TestVector_run__closure9";
  if (!"name" in TestVector_run__closure9)
    TestVector_run__closure9.name = "TestVector_run__closure9";
  $desc = $collectedClasses.TestVector_run__closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure9.prototype = $desc;
  function TestVector_run__closure10() {
  }
  TestVector_run__closure10.builtin$cls = "TestVector_run__closure10";
  if (!"name" in TestVector_run__closure10)
    TestVector_run__closure10.name = "TestVector_run__closure10";
  $desc = $collectedClasses.TestVector_run__closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestVector_run__closure10.prototype = $desc;
  function TestCloneable(_test_bot$_id) {
    this._test_bot$_id = _test_bot$_id;
  }
  TestCloneable.builtin$cls = "TestCloneable";
  if (!"name" in TestCloneable)
    TestCloneable.name = "TestCloneable";
  $desc = $collectedClasses.TestCloneable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCloneable.prototype = $desc;
  TestCloneable.prototype.get$_test_bot$_id = function() {
    return this._test_bot$_id;
  };
  function TestCloneable_run_closure() {
  }
  TestCloneable_run_closure.builtin$cls = "TestCloneable_run_closure";
  if (!"name" in TestCloneable_run_closure)
    TestCloneable_run_closure.name = "TestCloneable_run_closure";
  $desc = $collectedClasses.TestCloneable_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCloneable_run_closure.prototype = $desc;
  function TestTuple_run_closure() {
  }
  TestTuple_run_closure.builtin$cls = "TestTuple_run_closure";
  if (!"name" in TestTuple_run_closure)
    TestTuple_run_closure.name = "TestTuple_run_closure";
  $desc = $collectedClasses.TestTuple_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestTuple_run_closure.prototype = $desc;
  function TestTuple_run_closure0() {
  }
  TestTuple_run_closure0.builtin$cls = "TestTuple_run_closure0";
  if (!"name" in TestTuple_run_closure0)
    TestTuple_run_closure0.name = "TestTuple_run_closure0";
  $desc = $collectedClasses.TestTuple_run_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestTuple_run_closure0.prototype = $desc;
  function TestUtil_run_closure() {
  }
  TestUtil_run_closure.builtin$cls = "TestUtil_run_closure";
  if (!"name" in TestUtil_run_closure)
    TestUtil_run_closure.name = "TestUtil_run_closure";
  $desc = $collectedClasses.TestUtil_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestUtil_run_closure.prototype = $desc;
  function TestUtil__testSplitLines_closure() {
  }
  TestUtil__testSplitLines_closure.builtin$cls = "TestUtil__testSplitLines_closure";
  if (!"name" in TestUtil__testSplitLines_closure)
    TestUtil__testSplitLines_closure.name = "TestUtil__testSplitLines_closure";
  $desc = $collectedClasses.TestUtil__testSplitLines_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestUtil__testSplitLines_closure.prototype = $desc;
  function TestUtil__testGetHashCode_closure() {
  }
  TestUtil__testGetHashCode_closure.builtin$cls = "TestUtil__testGetHashCode_closure";
  if (!"name" in TestUtil__testGetHashCode_closure)
    TestUtil__testGetHashCode_closure.name = "TestUtil__testGetHashCode_closure";
  $desc = $collectedClasses.TestUtil__testGetHashCode_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestUtil__testGetHashCode_closure.prototype = $desc;
  function TestUtil__hashCodeFun_closure() {
  }
  TestUtil__hashCodeFun_closure.builtin$cls = "TestUtil__hashCodeFun_closure";
  if (!"name" in TestUtil__hashCodeFun_closure)
    TestUtil__hashCodeFun_closure.name = "TestUtil__hashCodeFun_closure";
  $desc = $collectedClasses.TestUtil__hashCodeFun_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestUtil__hashCodeFun_closure.prototype = $desc;
  function _SimpleHash(hashCode) {
    this.hashCode = hashCode;
  }
  _SimpleHash.builtin$cls = "_SimpleHash";
  if (!"name" in _SimpleHash)
    _SimpleHash.name = "_SimpleHash";
  $desc = $collectedClasses._SimpleHash;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleHash.prototype = $desc;
  _SimpleHash.prototype.get$hashCode = function(receiver) {
    return this.hashCode;
  };
  function Trace(frames) {
    this.frames = frames;
  }
  Trace.builtin$cls = "Trace";
  if (!"name" in Trace)
    Trace.name = "Trace";
  $desc = $collectedClasses.Trace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace.prototype = $desc;
  Trace.prototype.get$frames = function() {
    return this.frames;
  };
  function Trace_Trace$from_closure(trace_0) {
    this.trace_0 = trace_0;
  }
  Trace_Trace$from_closure.builtin$cls = "Trace_Trace$from_closure";
  if (!"name" in Trace_Trace$from_closure)
    Trace_Trace$from_closure.name = "Trace_Trace$from_closure";
  $desc = $collectedClasses.Trace_Trace$from_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace_Trace$from_closure.prototype = $desc;
  function Trace$parseVM_closure() {
  }
  Trace$parseVM_closure.builtin$cls = "Trace$parseVM_closure";
  if (!"name" in Trace$parseVM_closure)
    Trace$parseVM_closure.name = "Trace$parseVM_closure";
  $desc = $collectedClasses.Trace$parseVM_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace$parseVM_closure.prototype = $desc;
  function Trace$parseV8_closure() {
  }
  Trace$parseV8_closure.builtin$cls = "Trace$parseV8_closure";
  if (!"name" in Trace$parseV8_closure)
    Trace$parseV8_closure.name = "Trace$parseV8_closure";
  $desc = $collectedClasses.Trace$parseV8_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace$parseV8_closure.prototype = $desc;
  function Trace$parseV8_closure0() {
  }
  Trace$parseV8_closure0.builtin$cls = "Trace$parseV8_closure0";
  if (!"name" in Trace$parseV8_closure0)
    Trace$parseV8_closure0.name = "Trace$parseV8_closure0";
  $desc = $collectedClasses.Trace$parseV8_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace$parseV8_closure0.prototype = $desc;
  function Trace$parseSafari6_1_closure() {
  }
  Trace$parseSafari6_1_closure.builtin$cls = "Trace$parseSafari6_1_closure";
  if (!"name" in Trace$parseSafari6_1_closure)
    Trace$parseSafari6_1_closure.name = "Trace$parseSafari6_1_closure";
  $desc = $collectedClasses.Trace$parseSafari6_1_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace$parseSafari6_1_closure.prototype = $desc;
  function Trace$parseSafari6_0_closure() {
  }
  Trace$parseSafari6_0_closure.builtin$cls = "Trace$parseSafari6_0_closure";
  if (!"name" in Trace$parseSafari6_0_closure)
    Trace$parseSafari6_0_closure.name = "Trace$parseSafari6_0_closure";
  $desc = $collectedClasses.Trace$parseSafari6_0_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace$parseSafari6_0_closure.prototype = $desc;
  function Trace$parseSafari6_0_closure0() {
  }
  Trace$parseSafari6_0_closure0.builtin$cls = "Trace$parseSafari6_0_closure0";
  if (!"name" in Trace$parseSafari6_0_closure0)
    Trace$parseSafari6_0_closure0.name = "Trace$parseSafari6_0_closure0";
  $desc = $collectedClasses.Trace$parseSafari6_0_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace$parseSafari6_0_closure0.prototype = $desc;
  function Trace$parseFriendly_closure() {
  }
  Trace$parseFriendly_closure.builtin$cls = "Trace$parseFriendly_closure";
  if (!"name" in Trace$parseFriendly_closure)
    Trace$parseFriendly_closure.name = "Trace$parseFriendly_closure";
  $desc = $collectedClasses.Trace$parseFriendly_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace$parseFriendly_closure.prototype = $desc;
  function Trace_terse_closure() {
  }
  Trace_terse_closure.builtin$cls = "Trace_terse_closure";
  if (!"name" in Trace_terse_closure)
    Trace_terse_closure.name = "Trace_terse_closure";
  $desc = $collectedClasses.Trace_terse_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace_terse_closure.prototype = $desc;
  function Trace_terse_closure0() {
  }
  Trace_terse_closure0.builtin$cls = "Trace_terse_closure0";
  if (!"name" in Trace_terse_closure0)
    Trace_terse_closure0.name = "Trace_terse_closure0";
  $desc = $collectedClasses.Trace_terse_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace_terse_closure0.prototype = $desc;
  function Trace_toString_closure() {
  }
  Trace_toString_closure.builtin$cls = "Trace_toString_closure";
  if (!"name" in Trace_toString_closure)
    Trace_toString_closure.name = "Trace_toString_closure";
  $desc = $collectedClasses.Trace_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace_toString_closure.prototype = $desc;
  function Trace_toString_closure0(longest_0) {
    this.longest_0 = longest_0;
  }
  Trace_toString_closure0.builtin$cls = "Trace_toString_closure0";
  if (!"name" in Trace_toString_closure0)
    Trace_toString_closure0.name = "Trace_toString_closure0";
  $desc = $collectedClasses.Trace_toString_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Trace_toString_closure0.prototype = $desc;
  function Configuration() {
  }
  Configuration.builtin$cls = "Configuration";
  if (!"name" in Configuration)
    Configuration.name = "Configuration";
  $desc = $collectedClasses.Configuration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Configuration.prototype = $desc;
  function _ExpectFailureHandler(_config) {
    this._config = _config;
  }
  _ExpectFailureHandler.builtin$cls = "_ExpectFailureHandler";
  if (!"name" in _ExpectFailureHandler)
    _ExpectFailureHandler.name = "_ExpectFailureHandler";
  $desc = $collectedClasses._ExpectFailureHandler;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExpectFailureHandler.prototype = $desc;
  function SimpleConfiguration(_receivePort, throwOnTestFailures, stopTestOnExpectFailure, _testLogBuffer, timeout) {
    this._receivePort = _receivePort;
    this.throwOnTestFailures = throwOnTestFailures;
    this.stopTestOnExpectFailure = stopTestOnExpectFailure;
    this._testLogBuffer = _testLogBuffer;
    this.timeout = timeout;
  }
  SimpleConfiguration.builtin$cls = "SimpleConfiguration";
  if (!"name" in SimpleConfiguration)
    SimpleConfiguration.name = "SimpleConfiguration";
  $desc = $collectedClasses.SimpleConfiguration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimpleConfiguration.prototype = $desc;
  function TestCase(id, description, setUp, tearDown, testFunction, _callbackFunctionsOutstanding, _unittest$_message, _result, _stackTrace, currentGroup, _startTime, _runningTime, enabled, _doneTeardown, _testComplete) {
    this.id = id;
    this.description = description;
    this.setUp = setUp;
    this.tearDown = tearDown;
    this.testFunction = testFunction;
    this._callbackFunctionsOutstanding = _callbackFunctionsOutstanding;
    this._unittest$_message = _unittest$_message;
    this._result = _result;
    this._stackTrace = _stackTrace;
    this.currentGroup = currentGroup;
    this._startTime = _startTime;
    this._runningTime = _runningTime;
    this.enabled = enabled;
    this._doneTeardown = _doneTeardown;
    this._testComplete = _testComplete;
  }
  TestCase.builtin$cls = "TestCase";
  if (!"name" in TestCase)
    TestCase.name = "TestCase";
  $desc = $collectedClasses.TestCase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCase.prototype = $desc;
  TestCase.prototype.get$id = function(receiver) {
    return this.id;
  };
  TestCase.prototype.get$description = function() {
    return this.description;
  };
  TestCase.prototype.get$_callbackFunctionsOutstanding = function() {
    return this._callbackFunctionsOutstanding;
  };
  TestCase.prototype.set$_callbackFunctionsOutstanding = function(v) {
    return this._callbackFunctionsOutstanding = v;
  };
  TestCase.prototype.get$currentGroup = function() {
    return this.currentGroup;
  };
  function BoundClosure$i2(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i2.builtin$cls = "BoundClosure$i2";
  $desc = $collectedClasses.BoundClosure$i2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i2.prototype = $desc;
  function TestCase__errorHandler_closure(this_0, stage_1) {
    this.this_0 = this_0;
    this.stage_1 = stage_1;
  }
  TestCase__errorHandler_closure.builtin$cls = "TestCase__errorHandler_closure";
  if (!"name" in TestCase__errorHandler_closure)
    TestCase__errorHandler_closure.name = "TestCase__errorHandler_closure";
  $desc = $collectedClasses.TestCase__errorHandler_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCase__errorHandler_closure.prototype = $desc;
  function TestCase__run_closure(this_0) {
    this.this_0 = this_0;
  }
  TestCase__run_closure.builtin$cls = "TestCase__run_closure";
  if (!"name" in TestCase__run_closure)
    TestCase__run_closure.name = "TestCase__run_closure";
  $desc = $collectedClasses.TestCase__run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCase__run_closure.prototype = $desc;
  function TestCase__run_closure0(this_1) {
    this.this_1 = this_1;
  }
  TestCase__run_closure0.builtin$cls = "TestCase__run_closure0";
  if (!"name" in TestCase__run_closure0)
    TestCase__run_closure0.name = "TestCase__run_closure0";
  $desc = $collectedClasses.TestCase__run_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCase__run_closure0.prototype = $desc;
  function TestCase__run_closure1(this_2) {
    this.this_2 = this_2;
  }
  TestCase__run_closure1.builtin$cls = "TestCase__run_closure1";
  if (!"name" in TestCase__run_closure1)
    TestCase__run_closure1.name = "TestCase__run_closure1";
  $desc = $collectedClasses.TestCase__run_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCase__run_closure1.prototype = $desc;
  function TestCase__run__closure(this_3) {
    this.this_3 = this_3;
  }
  TestCase__run__closure.builtin$cls = "TestCase__run__closure";
  if (!"name" in TestCase__run__closure)
    TestCase__run__closure.name = "TestCase__run__closure";
  $desc = $collectedClasses.TestCase__run__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestCase__run__closure.prototype = $desc;
  function _GroupContext(parent, _unittest$_name, _testSetup, _testTeardown) {
    this.parent = parent;
    this._unittest$_name = _unittest$_name;
    this._testSetup = _testSetup;
    this._testTeardown = _testTeardown;
  }
  _GroupContext.builtin$cls = "_GroupContext";
  if (!"name" in _GroupContext)
    _GroupContext.name = "_GroupContext";
  $desc = $collectedClasses._GroupContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GroupContext.prototype = $desc;
  function _SpreadArgsHelper(callback, minExpectedCalls, maxExpectedCalls, isDone, id, actualCalls, testCase, complete) {
    this.callback = callback;
    this.minExpectedCalls = minExpectedCalls;
    this.maxExpectedCalls = maxExpectedCalls;
    this.isDone = isDone;
    this.id = id;
    this.actualCalls = actualCalls;
    this.testCase = testCase;
    this.complete = complete;
  }
  _SpreadArgsHelper.builtin$cls = "_SpreadArgsHelper";
  if (!"name" in _SpreadArgsHelper)
    _SpreadArgsHelper.name = "_SpreadArgsHelper";
  $desc = $collectedClasses._SpreadArgsHelper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SpreadArgsHelper.prototype = $desc;
  _SpreadArgsHelper.prototype.get$id = function(receiver) {
    return this.id;
  };
  function _SpreadArgsHelper_invoke1_closure(this_0, arg1_1) {
    this.this_0 = this_0;
    this.arg1_1 = arg1_1;
  }
  _SpreadArgsHelper_invoke1_closure.builtin$cls = "_SpreadArgsHelper_invoke1_closure";
  if (!"name" in _SpreadArgsHelper_invoke1_closure)
    _SpreadArgsHelper_invoke1_closure.name = "_SpreadArgsHelper_invoke1_closure";
  $desc = $collectedClasses._SpreadArgsHelper_invoke1_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SpreadArgsHelper_invoke1_closure.prototype = $desc;
  function _runTest_closure(testCase_1, timeout_2) {
    this.testCase_1 = testCase_1;
    this.timeout_2 = timeout_2;
  }
  _runTest_closure.builtin$cls = "_runTest_closure";
  if (!"name" in _runTest_closure)
    _runTest_closure.name = "_runTest_closure";
  $desc = $collectedClasses._runTest_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _runTest_closure.prototype = $desc;
  function _runTest_closure0(box_0) {
    this.box_0 = box_0;
  }
  _runTest_closure0.builtin$cls = "_runTest_closure0";
  if (!"name" in _runTest_closure0)
    _runTest_closure0.name = "_runTest_closure0";
  $desc = $collectedClasses._runTest_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _runTest_closure0.prototype = $desc;
  function _ensureInitialized_closure() {
  }
  _ensureInitialized_closure.builtin$cls = "_ensureInitialized_closure";
  if (!"name" in _ensureInitialized_closure)
    _ensureInitialized_closure.name = "_ensureInitialized_closure";
  $desc = $collectedClasses._ensureInitialized_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ensureInitialized_closure.prototype = $desc;
  function _getTrace_closure() {
  }
  _getTrace_closure.builtin$cls = "_getTrace_closure";
  if (!"name" in _getTrace_closure)
    _getTrace_closure.name = "_getTrace_closure";
  $desc = $collectedClasses._getTrace_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _getTrace_closure.prototype = $desc;
  function _getTrace_closure0() {
  }
  _getTrace_closure0.builtin$cls = "_getTrace_closure0";
  if (!"name" in _getTrace_closure0)
    _getTrace_closure0.name = "_getTrace_closure0";
  $desc = $collectedClasses._getTrace_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _getTrace_closure0.prototype = $desc;
  function HtmlEnhancedConfiguration(_isLayoutTest, _onErrorSubscription, _onMessageSubscription, _receivePort, throwOnTestFailures, stopTestOnExpectFailure, _testLogBuffer, timeout) {
    this._isLayoutTest = _isLayoutTest;
    this._onErrorSubscription = _onErrorSubscription;
    this._onMessageSubscription = _onMessageSubscription;
    this._receivePort = _receivePort;
    this.throwOnTestFailures = throwOnTestFailures;
    this.stopTestOnExpectFailure = stopTestOnExpectFailure;
    this._testLogBuffer = _testLogBuffer;
    this.timeout = timeout;
  }
  HtmlEnhancedConfiguration.builtin$cls = "HtmlEnhancedConfiguration";
  if (!"name" in HtmlEnhancedConfiguration)
    HtmlEnhancedConfiguration.name = "HtmlEnhancedConfiguration";
  $desc = $collectedClasses.HtmlEnhancedConfiguration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration.prototype = $desc;
  function HtmlEnhancedConfiguration__installOnErrorHandler_closure() {
  }
  HtmlEnhancedConfiguration__installOnErrorHandler_closure.builtin$cls = "HtmlEnhancedConfiguration__installOnErrorHandler_closure";
  if (!"name" in HtmlEnhancedConfiguration__installOnErrorHandler_closure)
    HtmlEnhancedConfiguration__installOnErrorHandler_closure.name = "HtmlEnhancedConfiguration__installOnErrorHandler_closure";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__installOnErrorHandler_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__installOnErrorHandler_closure.prototype = $desc;
  function HtmlEnhancedConfiguration__installOnMessageHandler_closure(this_0) {
    this.this_0 = this_0;
  }
  HtmlEnhancedConfiguration__installOnMessageHandler_closure.builtin$cls = "HtmlEnhancedConfiguration__installOnMessageHandler_closure";
  if (!"name" in HtmlEnhancedConfiguration__installOnMessageHandler_closure)
    HtmlEnhancedConfiguration__installOnMessageHandler_closure.name = "HtmlEnhancedConfiguration__installOnMessageHandler_closure";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__installOnMessageHandler_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__installOnMessageHandler_closure.prototype = $desc;
  function HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure() {
  }
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure.builtin$cls = "HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure";
  if (!"name" in HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure)
    HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure.name = "HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure.prototype = $desc;
  function HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2() {
  }
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2.builtin$cls = "HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2";
  if (!"name" in HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2)
    HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2.name = "HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2.prototype = $desc;
  function HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0(flattened_1) {
    this.flattened_1 = flattened_1;
  }
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0.builtin$cls = "HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0";
  if (!"name" in HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0)
    HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0.name = "HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0.prototype = $desc;
  function HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1() {
  }
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1.builtin$cls = "HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1";
  if (!"name" in HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1)
    HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1.name = "HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1.prototype = $desc;
  function HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1(box_0) {
    this.box_0 = box_0;
  }
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1.builtin$cls = "HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1";
  if (!"name" in HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1)
    HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1.name = "HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1.prototype = $desc;
  function HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2() {
  }
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2.builtin$cls = "HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2";
  if (!"name" in HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2)
    HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2.name = "HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2.prototype = $desc;
  function HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3(safeGroup_2) {
    this.safeGroup_2 = safeGroup_2;
  }
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3.builtin$cls = "HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3";
  if (!"name" in HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3)
    HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3.name = "HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3.prototype = $desc;
  function HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure() {
  }
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure.builtin$cls = "HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure";
  if (!"name" in HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure)
    HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure.name = "HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure.prototype = $desc;
  function HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0() {
  }
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0.builtin$cls = "HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0";
  if (!"name" in HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0)
    HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0.name = "HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0.prototype = $desc;
  function HtmlEnhancedConfiguration__buildRow_addRowElement(test__0, te_1, groupID_2, background_3, display_4) {
    this.test__0 = test__0;
    this.te_1 = te_1;
    this.groupID_2 = groupID_2;
    this.background_3 = background_3;
    this.display_4 = display_4;
  }
  HtmlEnhancedConfiguration__buildRow_addRowElement.builtin$cls = "HtmlEnhancedConfiguration__buildRow_addRowElement";
  if (!"name" in HtmlEnhancedConfiguration__buildRow_addRowElement)
    HtmlEnhancedConfiguration__buildRow_addRowElement.name = "HtmlEnhancedConfiguration__buildRow_addRowElement";
  $desc = $collectedClasses.HtmlEnhancedConfiguration__buildRow_addRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEnhancedConfiguration__buildRow_addRowElement.prototype = $desc;
  function Pair(first, last) {
    this.first = first;
    this.last = last;
  }
  Pair.builtin$cls = "Pair";
  if (!"name" in Pair)
    Pair.name = "Pair";
  $desc = $collectedClasses.Pair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Pair.prototype = $desc;
  Pair.prototype.get$first = function(receiver) {
    return this.first;
  };
  Pair.prototype.get$last = function(receiver) {
    return this.last;
  };
  function Closure$2(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$2.builtin$cls = "Closure$2";
  $desc = $collectedClasses.Closure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$2.prototype = $desc;
  function Closure$1(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$1.builtin$cls = "Closure$1";
  $desc = $collectedClasses.Closure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$1.prototype = $desc;
  function Closure$0(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  }
  Closure$0.builtin$cls = "Closure$0";
  $desc = $collectedClasses.Closure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$0.prototype = $desc;
  function Closure$7(call$7, $name) {
    this.call$7 = call$7;
    this.$name = $name;
  }
  Closure$7.builtin$cls = "Closure$7";
  $desc = $collectedClasses.Closure$7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$7.prototype = $desc;
  function Closure$21(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$21.builtin$cls = "Closure$21";
  $desc = $collectedClasses.Closure$21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$21.prototype = $desc;
  function Closure$4(call$4, $name) {
    this.call$4 = call$4;
    this.$name = $name;
  }
  Closure$4.builtin$cls = "Closure$4";
  $desc = $collectedClasses.Closure$4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$4.prototype = $desc;
  function Closure$5(call$5, $name) {
    this.call$5 = call$5;
    this.$name = $name;
  }
  Closure$5.builtin$cls = "Closure$5";
  $desc = $collectedClasses.Closure$5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$5.prototype = $desc;
  return [HtmlElement, AnchorElement, AnimationEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeLoadEvent, BeforeUnloadEvent, Blob, BodyElement, ButtonElement, CDataSection, CanvasElement, CharacterData, CloseEvent, Comment, CompositionEvent, ContentElement, CssFontFaceLoadEvent, CssStyleDeclaration, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document, DocumentFragment, DocumentType, DomError, DomException, DomImplementation, Element, EmbedElement, ErrorEvent, Event, EventTarget, FieldSetElement, File, FileError, FocusEvent, FormElement, HRElement, HashChangeEvent, HeadElement, HeadingElement, HtmlCollection, HtmlDocument, HtmlFormControlsCollection, HtmlHtmlElement, HtmlOptionsCollection, IFrameElement, ImageElement, InputElement, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, Location, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStream, MediaStreamEvent, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiInput, MidiMessageEvent, MidiOutput, MidiPort, ModElement, MouseEvent, Navigator, NavigatorUserMediaError, Node, NodeList, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, QuoteElement, Range, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidateEvent, ScriptElement0, SecurityPolicyViolationEvent, SelectElement, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechInputEvent, SpeechRecognitionError, SpeechRecognitionEvent, SpeechSynthesisEvent, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TitleElement, TouchEvent, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WheelEvent, Window, _Attr, _Entity, _HTMLAppletElement, _HTMLBaseFontElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _NamedNodeMap, _Notation, _XMLHttpRequestProgressEvent, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedEnumeration, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimatedString, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PolygonElement, PolylineElement, RadialGradientElement, RectElement, ScriptElement, SetElement, StopElement, StyleElement0, SvgDocument, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGAnimateColorElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, ContextEvent, SqlError, ByteBuffer, TypedData, ByteData, Float32List, Float64List, Int16List, Int32List, Int8List, Uint16List, Uint32List, Uint8ClampedList, Uint8List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSMutableArray, JSFixedArray, JSExtendableArray, JSNumber, JSInt, JSDouble, JSPositiveInt, JSUInt32, JSUInt31, JSString, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _NativeJsSendPort_send__closure, _WorkerSendPort, _WorkerSendPort_send_closure, RawReceivePortImpl, ReceivePortImpl, BoundClosure$i0, _waitForPendingPorts_closure, _PendingSendPortFinder, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, BoundClosure$1, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, JSInvocationMirror, CachedInvocation, CachedNoSuchMethodInvocation, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, BoundClosure, CastErrorImplementation, RuntimeError, TypeImpl, initHooks_closure, initHooks_closure0, initHooks_closure1, JSSyntaxRegExp, _MatchImplementation, _AllMatchesIterable, _AllMatchesIterator, StringMatch, Attachable, AttachableObject, AttachableObject_disposeInternal_closure, AttachableObject__getStream_closure, AttachableObject__getStream__closure, AttachedEvent, Property, _UndefinedValue, PropertyChangedEventArgs, Array2d, Array2d_getAdjacent_closure, CollectionUtil_count_closure, CollectionUtil_exclude_closure, CollectionUtil_distinct_closure, CollectionUtil_distinct_closure0, CollectionUtil_toMap_closure, _DistinctIterator, _DistinctIterator_moveNext_closure, _SequenceIterator, Enumerable, Enumerable_concat_closure, _SimpleEnumerable, _FuncEnumerable, Grouping, Grouping_closure, Grouping_closure0, Grouping_getValues_closure, NumberEnumerable, NumberEnumerable_NumberEnumerable$fromRange_closure, NumberEnumerable_max_closure, NumberEnumerable_min_closure, _SimpleNumEnumerable, ReadOnlyCollection, Sequence, _SequenceList, Sequence_ListMixin, HslColor, RgbColor, RgbColor_toHex_closure, DisposedError, DisposableImpl, EventArgs, EventHandle, AffineTransform, Box, Coordinate, Vector, StringLineReader, _StringLineIterator, Tuple, Tuple3, Util_splitLines_closure, getDelayedResult_closure, DetailedArgumentError, InvalidOperationError, NullArgumentError, expandStream_closure, expandStream_closure0, expandStream_closure1, _StreamForEachAsync, _StreamForEachAsync__moveNext_closure, _StreamForEachAsync__moveNext__closure, _StreamForEachAsync__moveNext__closure0, _StreamForEachAsync__moveNext__closure1, _StreamForEachAsync__moveNext___closure, _StreamForEachAsync__moveNext_closure0, _Graph, _Graph__Graph_getNode, _Graph__Graph_getNode_closure, _Graph__Graph_closure, _Graph_toString_closure, _Graph_toString__closure, _GraphNode, _TarjanCycleDetect, topologicalSort_closure, topologicalSort__closure, topologicalSort_closure0, ThrottledStream, ThrottledStream__tryUpdate_closure, ThrottledStream__tryUpdate_closure0, ThrottledStream__tryUpdate_closure1, ThrottledStream__tryUpdate_closure2, EventWatcher, _Finishes, _Finishes_matches_closure, _Finishes_matches_closure0, _Finishes_matches__closure0, _Finishes_matches_closure1, _Finishes_matches__closure, _InvalidOperationError, _NullArgumentError, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, ExpandIterable, ExpandIterator, TakeWhileIterable, TakeWhileIterator, SkipWhileIterable, SkipWhileIterator, EmptyIterator, FixedLengthListMixin, UnmodifiableListMixin, UnmodifiableListBase, ReversedListIterable, Symbol, JsMirrorSystem, JsMirrorSystem_computeLibrariesByName_closure, JsMirror, JsIsolateMirror, JsDeclarationMirror, JsTypeVariableMirror, JsTypeMirror, JsLibraryMirror, JsDeclarationMirror_JsObjectMirror, JsLibraryMirror_members_addToResult, JsLibraryMirror_declarations_addToResult, filterMembers_closure, JsMixinApplication, JsTypeMirror_JsObjectMirror, JsObjectMirror, JsInstanceMirror, JsTypeBoundClassMirror, JsTypeBoundClassMirror_declarations_closure, JsClassMirror, JsTypeMirror_JsObjectMirror0, JsClassMirror_declarations_addToResult, JsClassMirror_declarations_closure, JsVariableMirror, JsClosureMirror, JsMethodMirror, JsTypedefMirror, JsFunctionTypeMirror, UnmodifiableMapView, computeReflectiveNames_closure, _AsyncError, _BroadcastStream, _BroadcastSubscription, BoundClosure$0, _BroadcastStreamController, BoundClosure$i1, BoundClosure$2, _SyncBroadcastStreamController, _SyncBroadcastStreamController__sendData_closure, _SyncBroadcastStreamController__sendError_closure, _SyncBroadcastStreamController__sendDone_closure, _AsyncBroadcastStreamController, Future, Future_Future_closure, Future_Future$delayed_closure0, Future_Future$delayed_closure, Future_wait_handleError, Future_wait_closure, Future_forEach_nextElement, Future_forEach_nextElement_closure, _Completer, _AsyncCompleter, _SyncCompleter, _Future, _Future__addListener_closure, _Future__chainFutures_closure, _Future__chainFutures_closure0, _Future__asyncComplete_closure, _Future__asyncCompleteError_closure, _Future__propagateToListeners_closure, _Future__propagateToListeners_closure0, _Future__propagateToListeners__closure, _Future__propagateToListeners__closure0, Stream, Stream_Stream$fromIterable_closure, Stream_reduce_closure, Stream_reduce__closure, Stream_reduce__closure0, Stream_reduce_closure0, Stream_contains_closure, Stream_contains__closure, Stream_contains__closure0, Stream_contains_closure0, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, Stream_isEmpty_closure, Stream_isEmpty_closure0, Stream_toList_closure, Stream_toList_closure0, Stream_first_closure, Stream_first_closure0, Stream_last_closure, Stream_last_closure0, StreamSubscription, _StreamController, BoundClosure$20, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _StreamController__AsyncStreamControllerDispatch, _SyncStreamController, _StreamController__SyncStreamControllerDispatch, _NoCallbacks, _NoCallbackAsyncStreamController, _StreamController__AsyncStreamControllerDispatch0, _NoCallbackSyncStreamController, _StreamController__SyncStreamControllerDispatch0, _ControllerStream, _ControllerSubscription, _AddStreamState, _AddStreamState_makeErrorHandler_closure, _StreamControllerAddStreamState, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _GeneratedStreamImpl, _IterablePendingEvents, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _StreamIteratorImpl, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, _ForwardingStream, _ForwardingStreamSubscription, _MapStream, _BaseZone, _BaseZone_bindCallback_closure, _BaseZone_bindCallback_closure0, _BaseZone_bindUnaryCallback_closure, _BaseZone_bindUnaryCallback_closure0, _rootHandleUncaughtError_closure, _rootHandleUncaughtError__closure, _RootZone, _HashMap, _HashMap_values_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, _LinkedHashMap_addAll_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, _IdentityHashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, UnmodifiableListView, _HashSetBase, IterableBase, ListBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, Codec, Converter, Encoding, HtmlEscapeMode, HtmlEscape, Utf8Codec, Utf8Encoder, _Utf8Encoder, Utf8Decoder, _Utf8Decoder, NoSuchMethodError_toString_closure, bool, Comparable, DateTime, DateTime_toString_fourDigits, DateTime_toString_threeDigits, DateTime_toString_twoDigits, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, NoSuchMethodError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, Expando, Function, Iterable, _GeneratorIterable, _GeneratorIterator, Iterator, Map, Null, Object, Match, Set, StackTrace, StringBuffer, Symbol0, Uri, Uri__makeScheme_isSchemeLowerCharacter, Uri__makeScheme_isSchemeCharacter, Uri__makePath_closure, Uri__makeQuery_closure, Uri__normalize_isNormalizedHexDigit, Uri__normalize_isLowerCaseHexDigit, Uri__normalize_isUnreserved, Uri__normalize_normalizeHexDigit, Uri__normalize_decodeHexDigitPair, Uri__normalize_fillResult, Uri_hashCode_combine, Uri_parseIPv4Address_error, Uri_parseIPv4Address_closure, Uri_parseIPv6Address_error, Uri_parseIPv6Address_parseHex, Uri_parseIPv6Address_closure, Uri__uriEncode_byteToHex, Console, Interceptor_CssStyleDeclarationBase, CssStyleDeclarationBase, _ChildrenElementList, _FrozenElementList, _FrozenElementList$_wrap_closure, Element_Element$html_closure, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, _ChildNodeListLazy, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, _AttributeMap, _ElementAttributeMap, _MultiElementCssClassSet, _MultiElementCssClassSet_closure, _MultiElementCssClassSet_readClasses_closure, _MultiElementCssClassSet_modify_closure, _ElementCssClassSet, EventStreamProvider, _EventStream, _ElementEventStreamImpl, _ElementListEventStreamImpl, _EventStreamSubscription, _StreamPool, _StreamPool_add_closure, _Html5NodeValidator, ImmutableListMixin, NodeValidatorBuilder, NodeValidatorBuilder_allowsElement_closure, NodeValidatorBuilder_allowsAttribute_closure, _SimpleNodeValidator, _TemplatingNodeValidator, _TemplatingNodeValidator_closure, _SvgNodeValidator, FixedSizeListIterator, _LocationWrapper, NodeValidator, _SameOriginUriPolicy, _ValidatingTreeSanitizer, _ValidatingTreeSanitizer_sanitizeTree_walk, _AttributeClassSet, _Random, Point, _RectangleBase, Rectangle, Mirror, DeclarationMirror, LibraryMirror, TypeMirror, ClassMirror, TypeVariableMirror, MethodMirror, VariableMirror, TypedData_ListMixin, TypedData_ListMixin_FixedLengthListMixin, TypedData_ListMixin0, TypedData_ListMixin_FixedLengthListMixin0, TypedData_ListMixin1, TypedData_ListMixin_FixedLengthListMixin1, TypedData_ListMixin2, TypedData_ListMixin_FixedLengthListMixin2, TypedData_ListMixin3, TypedData_ListMixin_FixedLengthListMixin3, TypedData_ListMixin4, TypedData_ListMixin_FixedLengthListMixin4, TypedData_ListMixin5, TypedData_ListMixin_FixedLengthListMixin5, TypedData_ListMixin6, TypedData_ListMixin_FixedLengthListMixin6, TypedData_ListMixin7, TypedData_ListMixin_FixedLengthListMixin7, Int64List, Uint64List, Frame, _convertDartToNative_PrepareForStructuredClone_findSlot, _convertDartToNative_PrepareForStructuredClone_readSlot, _convertDartToNative_PrepareForStructuredClone_writeSlot, _convertDartToNative_PrepareForStructuredClone_cleanupSlots, _convertDartToNative_PrepareForStructuredClone_walk, _convertDartToNative_PrepareForStructuredClone_walk_closure, convertNativeToDart_AcceptStructuredClone_findSlot, convertNativeToDart_AcceptStructuredClone_readSlot, convertNativeToDart_AcceptStructuredClone_writeSlot, convertNativeToDart_AcceptStructuredClone_walk, CssClassSetImpl, CssClassSetImpl_add_closure, FilteredElementList, FilteredElementList__filtered_closure, FilteredElementList_removeRange_closure, LazyTrace, _IsNull, _IsTrue, _IsFalse, _IsSameAs, _DeepMatcher, BoundClosure$4, _StringEqualsMatcher, isInstanceOf, Throws, Throws_matches_closure, Throws_matches_closure0, Throws_matches__closure0, Throws_matches_closure1, Throws_matches__closure, _ReturnsNormally, TypeMatcher, _ArgumentError, _UnsupportedError, _Contains, _Contains_matches_closure, _Predicate, StringDescription, TestFailure, closure, DefaultFailureHandler, Description, Matcher, _EveryElement, _OrderedEquals, _UnorderedEquals, _IterableMatcher, _OrderingComparison, _IsCloseTo, _IsNot, _validateArgList_closure, Builder, Builder_join_closure, Builder_joinAll_closure, Builder_split_closure, Style, _PosixStyle, _WindowsStyle, _UrlStyle, _ParsedPath, _ParsedPath_normalize_closure, prettyPrint__prettyPrint, prettyPrint__prettyPrint_pp, prettyPrint__prettyPrint_closure, prettyPrint__prettyPrint_closure0, prettyPrint__prettyPrint_closure1, main_closure1, main_closure2, main__closure10, main_closure3, main_closure4, _testSilly_closure, _returnSilly_closure, _returnSilly_closure0, _drTest_closure, main_closure5, main__closure16, main___closure17, main_closure6, main__closure11, main___closure14, main___closure15, main___closure16, main__closure12, main___closure11, main___closure12, main___closure13, main__closure13, main___closure7, main___closure8, main___closure9, main___closure10, main__closure14, main___closure3, main___closure4, main___closure5, main___closure6, main__closure15, main___closure, main___closure0, main___closure1, main___closure2, _slowFromList_closure, _slowFromList__closure, main_closure7, main_closure8, main_closure9, main_closure10, main_closure11, main_closure12, _test_closure, _testThrow_closure, _testThrow__closure, main_closure0, main__closure1, main__closure2, main__closure3, main__closure4, main__closure5, main__closure6, main__closure7, main__closure8, main__closure9, _sum_closure, _sum__closure, main_closure, main__closure, main__closure0, TestAttachedEvents, TestAttachedEvents_run_closure, TestProperties, TestProperties_run_closure, TestProperties_run__closure, TestProperties_run__closure0, TestProperties_run__closure1, TestProperties_run__closure2, TestProperties_testFactories_closure, TestPropertyEventIntegration, TestPropertyEventIntegration_closure, TestPropertyEventIntegration_closure0, TestArray2d_run_closure, TestArray2d__testReadonlyFromCtorParams_closure, TestArray2d__testReadonlyFromCtorParams_closure0, TestArray2d__testReadonlyFromCtorParams_closure1, TestArray2d__testReadonlyFromCtorParams_closure2, TestCollectionUtil_run_closure, TestEnumerable_run_closure, TestEnumerable_run__closure, TestEnumerable__testDistinct_closure, TestEnumerable__testForEachWithIndex_closure, TestEnumerable__testToMap_closure, TestEnumerable__testToMap_closure0, TestEnumerable__testToMap_closure1, TestEnumerable__testToMap_closure2, TestEnumerable__testToMap_closure3, TestEnumerable__testToMap_closure4, TestEnumerable__testToMap__closure0, TestEnumerable__testToMap__closure1, TestEnumerable__testToMap_closure5, TestEnumerable__testToMap__closure, TestEnumerable__testCount_closure, TestEnumerable__testSelectNumbers_closure, TestEnumerable__testComplexGrouping_closure, TestNumberEnumerable_run_closure, TestNumberEnumerable__testSum_closure, TestNumberEnumerable__testMin_closure, TestNumberEnumerable__testMax_closure, TestNumberEnumerable__testAverage_closure, TestSequence, TestSequence_run_closure, TestHslColor_run_closure, TestHslColor_run__closure, TestHslColor__testInvalid_closure, TestHslColor__testInvalid_closure0, TestHslColor__testInvalid_closure1, TestHslColor__testInvalid_closure2, TestHslColor__testInvalid_closure3, TestHslColor__testInvalid_closure4, TestHslColor__testInvalid_closure5, TestRgbColor_run_closure, TestRgbColor__testInvalid_closure, TestRgbColor__testInvalid_closure0, TestRgbColor__testInvalid_closure1, TestRgbColor__testFromHex_closure, TestRgbColor__testInvalidHex_closure, TestRgbColor__testInvalidHex__closure, TestEvents, TestEvents_run_closure, TestAffineTransform_run_closure, TestAffineTransform_run__closure, TestAffineTransform_run__closure0, TestAffineTransform_run__closure1, TestAffineTransform_run__closure2, TestAffineTransform_run__closure3, TestAffineTransform_run__closure4, TestAffineTransform_run__closure5, TestAffineTransform_run__closure6, TestCoordinate_run_closure, TestCoordinate_run__closure, TestCoordinate_run__closure0, TestCoordinate_run__closure1, TestCoordinate_run__closure2, TestBox_run_closure, TestVector_run_closure, TestVector_run__closure, TestVector_run__closure0, TestVector_run__closure1, TestVector_run__closure2, TestVector_run__closure3, TestVector_run__closure4, TestVector_run__closure5, TestVector_run__closure6, TestVector_run__closure7, TestVector_run__closure8, TestVector_run__closure9, TestVector_run__closure10, TestCloneable, TestCloneable_run_closure, TestTuple_run_closure, TestTuple_run_closure0, TestUtil_run_closure, TestUtil__testSplitLines_closure, TestUtil__testGetHashCode_closure, TestUtil__hashCodeFun_closure, _SimpleHash, Trace, Trace_Trace$from_closure, Trace$parseVM_closure, Trace$parseV8_closure, Trace$parseV8_closure0, Trace$parseSafari6_1_closure, Trace$parseSafari6_0_closure, Trace$parseSafari6_0_closure0, Trace$parseFriendly_closure, Trace_terse_closure, Trace_terse_closure0, Trace_toString_closure, Trace_toString_closure0, Configuration, _ExpectFailureHandler, SimpleConfiguration, TestCase, BoundClosure$i2, TestCase__errorHandler_closure, TestCase__run_closure, TestCase__run_closure0, TestCase__run_closure1, TestCase__run__closure, _GroupContext, _SpreadArgsHelper, _SpreadArgsHelper_invoke1_closure, _runTest_closure, _runTest_closure0, _ensureInitialized_closure, _getTrace_closure, _getTrace_closure0, HtmlEnhancedConfiguration, HtmlEnhancedConfiguration__installOnErrorHandler_closure, HtmlEnhancedConfiguration__installOnMessageHandler_closure, HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure, HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure2, HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure0, HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure1, HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure1, HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure2, HtmlEnhancedConfiguration__showInteractiveResultsInPage_closure3, HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure, HtmlEnhancedConfiguration__showInteractiveResultsInPage__closure0, HtmlEnhancedConfiguration__buildRow_addRowElement, Pair, Closure$2, Closure$1, Closure$0, Closure$7, Closure$21, Closure$4, Closure$5];
}
